
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f444  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003b564  0800f614  0800f614  00010614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804ab78  0804ab78  0004c0b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0804ab78  0804ab78  0004bb78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804ab80  0804ab80  0004c0b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804ab80  0804ab80  0004bb80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0804ab84  0804ab84  0004bb84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b4  20000000  0804ab88  0004c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000069fc  200000b4  0804ac3c  0004c0b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006ab0  0804ac3c  0004cab0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0004c0b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a8c  00000000  00000000  0004c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af2  00000000  00000000  00065b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  00069668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115d  00000000  00000000  0006aca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002553d  00000000  00000000  0006bdfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f5f8  00000000  00000000  0009133a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d870e  00000000  00000000  000b0932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189040  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066ec  00000000  00000000  00189084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0018f770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b4 	.word	0x200000b4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f5fc 	.word	0x0800f5fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b8 	.word	0x200000b8
 800020c:	0800f5fc 	.word	0x0800f5fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_ldivmod>:
 80002c0:	b97b      	cbnz	r3, 80002e2 <__aeabi_ldivmod+0x22>
 80002c2:	b972      	cbnz	r2, 80002e2 <__aeabi_ldivmod+0x22>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bfbe      	ittt	lt
 80002c8:	2000      	movlt	r0, #0
 80002ca:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80002ce:	e006      	blt.n	80002de <__aeabi_ldivmod+0x1e>
 80002d0:	bf08      	it	eq
 80002d2:	2800      	cmpeq	r0, #0
 80002d4:	bf1c      	itt	ne
 80002d6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80002da:	f04f 30ff 	movne.w	r0, #4294967295
 80002de:	f000 b9d3 	b.w	8000688 <__aeabi_idiv0>
 80002e2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ea:	2900      	cmp	r1, #0
 80002ec:	db09      	blt.n	8000302 <__aeabi_ldivmod+0x42>
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	db1a      	blt.n	8000328 <__aeabi_ldivmod+0x68>
 80002f2:	f000 f84d 	bl	8000390 <__udivmoddi4>
 80002f6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fe:	b004      	add	sp, #16
 8000300:	4770      	bx	lr
 8000302:	4240      	negs	r0, r0
 8000304:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000308:	2b00      	cmp	r3, #0
 800030a:	db1b      	blt.n	8000344 <__aeabi_ldivmod+0x84>
 800030c:	f000 f840 	bl	8000390 <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4240      	negs	r0, r0
 800031c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000320:	4252      	negs	r2, r2
 8000322:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000326:	4770      	bx	lr
 8000328:	4252      	negs	r2, r2
 800032a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032e:	f000 f82f 	bl	8000390 <__udivmoddi4>
 8000332:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000336:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033a:	b004      	add	sp, #16
 800033c:	4240      	negs	r0, r0
 800033e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000342:	4770      	bx	lr
 8000344:	4252      	negs	r2, r2
 8000346:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800034a:	f000 f821 	bl	8000390 <__udivmoddi4>
 800034e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000356:	b004      	add	sp, #16
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	4770      	bx	lr

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b988 	b.w	8000688 <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	468e      	mov	lr, r1
 8000398:	4604      	mov	r4, r0
 800039a:	4688      	mov	r8, r1
 800039c:	2b00      	cmp	r3, #0
 800039e:	d14a      	bne.n	8000436 <__udivmoddi4+0xa6>
 80003a0:	428a      	cmp	r2, r1
 80003a2:	4617      	mov	r7, r2
 80003a4:	d962      	bls.n	800046c <__udivmoddi4+0xdc>
 80003a6:	fab2 f682 	clz	r6, r2
 80003aa:	b14e      	cbz	r6, 80003c0 <__udivmoddi4+0x30>
 80003ac:	f1c6 0320 	rsb	r3, r6, #32
 80003b0:	fa01 f806 	lsl.w	r8, r1, r6
 80003b4:	fa20 f303 	lsr.w	r3, r0, r3
 80003b8:	40b7      	lsls	r7, r6
 80003ba:	ea43 0808 	orr.w	r8, r3, r8
 80003be:	40b4      	lsls	r4, r6
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	fa1f fc87 	uxth.w	ip, r7
 80003c8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003cc:	0c23      	lsrs	r3, r4, #16
 80003ce:	fb0e 8811 	mls	r8, lr, r1, r8
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fb01 f20c 	mul.w	r2, r1, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d909      	bls.n	80003f2 <__udivmoddi4+0x62>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e4:	f080 80ea 	bcs.w	80005bc <__udivmoddi4+0x22c>
 80003e8:	429a      	cmp	r2, r3
 80003ea:	f240 80e7 	bls.w	80005bc <__udivmoddi4+0x22c>
 80003ee:	3902      	subs	r1, #2
 80003f0:	443b      	add	r3, r7
 80003f2:	1a9a      	subs	r2, r3, r2
 80003f4:	b2a3      	uxth	r3, r4
 80003f6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003fa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000402:	fb00 fc0c 	mul.w	ip, r0, ip
 8000406:	459c      	cmp	ip, r3
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x8e>
 800040a:	18fb      	adds	r3, r7, r3
 800040c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000410:	f080 80d6 	bcs.w	80005c0 <__udivmoddi4+0x230>
 8000414:	459c      	cmp	ip, r3
 8000416:	f240 80d3 	bls.w	80005c0 <__udivmoddi4+0x230>
 800041a:	443b      	add	r3, r7
 800041c:	3802      	subs	r0, #2
 800041e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000422:	eba3 030c 	sub.w	r3, r3, ip
 8000426:	2100      	movs	r1, #0
 8000428:	b11d      	cbz	r5, 8000432 <__udivmoddi4+0xa2>
 800042a:	40f3      	lsrs	r3, r6
 800042c:	2200      	movs	r2, #0
 800042e:	e9c5 3200 	strd	r3, r2, [r5]
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	428b      	cmp	r3, r1
 8000438:	d905      	bls.n	8000446 <__udivmoddi4+0xb6>
 800043a:	b10d      	cbz	r5, 8000440 <__udivmoddi4+0xb0>
 800043c:	e9c5 0100 	strd	r0, r1, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	4608      	mov	r0, r1
 8000444:	e7f5      	b.n	8000432 <__udivmoddi4+0xa2>
 8000446:	fab3 f183 	clz	r1, r3
 800044a:	2900      	cmp	r1, #0
 800044c:	d146      	bne.n	80004dc <__udivmoddi4+0x14c>
 800044e:	4573      	cmp	r3, lr
 8000450:	d302      	bcc.n	8000458 <__udivmoddi4+0xc8>
 8000452:	4282      	cmp	r2, r0
 8000454:	f200 8105 	bhi.w	8000662 <__udivmoddi4+0x2d2>
 8000458:	1a84      	subs	r4, r0, r2
 800045a:	eb6e 0203 	sbc.w	r2, lr, r3
 800045e:	2001      	movs	r0, #1
 8000460:	4690      	mov	r8, r2
 8000462:	2d00      	cmp	r5, #0
 8000464:	d0e5      	beq.n	8000432 <__udivmoddi4+0xa2>
 8000466:	e9c5 4800 	strd	r4, r8, [r5]
 800046a:	e7e2      	b.n	8000432 <__udivmoddi4+0xa2>
 800046c:	2a00      	cmp	r2, #0
 800046e:	f000 8090 	beq.w	8000592 <__udivmoddi4+0x202>
 8000472:	fab2 f682 	clz	r6, r2
 8000476:	2e00      	cmp	r6, #0
 8000478:	f040 80a4 	bne.w	80005c4 <__udivmoddi4+0x234>
 800047c:	1a8a      	subs	r2, r1, r2
 800047e:	0c03      	lsrs	r3, r0, #16
 8000480:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000484:	b280      	uxth	r0, r0
 8000486:	b2bc      	uxth	r4, r7
 8000488:	2101      	movs	r1, #1
 800048a:	fbb2 fcfe 	udiv	ip, r2, lr
 800048e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000496:	fb04 f20c 	mul.w	r2, r4, ip
 800049a:	429a      	cmp	r2, r3
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x11e>
 800049e:	18fb      	adds	r3, r7, r3
 80004a0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004a4:	d202      	bcs.n	80004ac <__udivmoddi4+0x11c>
 80004a6:	429a      	cmp	r2, r3
 80004a8:	f200 80e0 	bhi.w	800066c <__udivmoddi4+0x2dc>
 80004ac:	46c4      	mov	ip, r8
 80004ae:	1a9b      	subs	r3, r3, r2
 80004b0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004b4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004b8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004bc:	fb02 f404 	mul.w	r4, r2, r4
 80004c0:	429c      	cmp	r4, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x144>
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x142>
 80004cc:	429c      	cmp	r4, r3
 80004ce:	f200 80ca 	bhi.w	8000666 <__udivmoddi4+0x2d6>
 80004d2:	4602      	mov	r2, r0
 80004d4:	1b1b      	subs	r3, r3, r4
 80004d6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004da:	e7a5      	b.n	8000428 <__udivmoddi4+0x98>
 80004dc:	f1c1 0620 	rsb	r6, r1, #32
 80004e0:	408b      	lsls	r3, r1
 80004e2:	fa22 f706 	lsr.w	r7, r2, r6
 80004e6:	431f      	orrs	r7, r3
 80004e8:	fa0e f401 	lsl.w	r4, lr, r1
 80004ec:	fa20 f306 	lsr.w	r3, r0, r6
 80004f0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004f4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004f8:	4323      	orrs	r3, r4
 80004fa:	fa00 f801 	lsl.w	r8, r0, r1
 80004fe:	fa1f fc87 	uxth.w	ip, r7
 8000502:	fbbe f0f9 	udiv	r0, lr, r9
 8000506:	0c1c      	lsrs	r4, r3, #16
 8000508:	fb09 ee10 	mls	lr, r9, r0, lr
 800050c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000510:	fb00 fe0c 	mul.w	lr, r0, ip
 8000514:	45a6      	cmp	lr, r4
 8000516:	fa02 f201 	lsl.w	r2, r2, r1
 800051a:	d909      	bls.n	8000530 <__udivmoddi4+0x1a0>
 800051c:	193c      	adds	r4, r7, r4
 800051e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000522:	f080 809c 	bcs.w	800065e <__udivmoddi4+0x2ce>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f240 8099 	bls.w	800065e <__udivmoddi4+0x2ce>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	eba4 040e 	sub.w	r4, r4, lr
 8000534:	fa1f fe83 	uxth.w	lr, r3
 8000538:	fbb4 f3f9 	udiv	r3, r4, r9
 800053c:	fb09 4413 	mls	r4, r9, r3, r4
 8000540:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000544:	fb03 fc0c 	mul.w	ip, r3, ip
 8000548:	45a4      	cmp	ip, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x1ce>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000552:	f080 8082 	bcs.w	800065a <__udivmoddi4+0x2ca>
 8000556:	45a4      	cmp	ip, r4
 8000558:	d97f      	bls.n	800065a <__udivmoddi4+0x2ca>
 800055a:	3b02      	subs	r3, #2
 800055c:	443c      	add	r4, r7
 800055e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000562:	eba4 040c 	sub.w	r4, r4, ip
 8000566:	fba0 ec02 	umull	lr, ip, r0, r2
 800056a:	4564      	cmp	r4, ip
 800056c:	4673      	mov	r3, lr
 800056e:	46e1      	mov	r9, ip
 8000570:	d362      	bcc.n	8000638 <__udivmoddi4+0x2a8>
 8000572:	d05f      	beq.n	8000634 <__udivmoddi4+0x2a4>
 8000574:	b15d      	cbz	r5, 800058e <__udivmoddi4+0x1fe>
 8000576:	ebb8 0203 	subs.w	r2, r8, r3
 800057a:	eb64 0409 	sbc.w	r4, r4, r9
 800057e:	fa04 f606 	lsl.w	r6, r4, r6
 8000582:	fa22 f301 	lsr.w	r3, r2, r1
 8000586:	431e      	orrs	r6, r3
 8000588:	40cc      	lsrs	r4, r1
 800058a:	e9c5 6400 	strd	r6, r4, [r5]
 800058e:	2100      	movs	r1, #0
 8000590:	e74f      	b.n	8000432 <__udivmoddi4+0xa2>
 8000592:	fbb1 fcf2 	udiv	ip, r1, r2
 8000596:	0c01      	lsrs	r1, r0, #16
 8000598:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800059c:	b280      	uxth	r0, r0
 800059e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005a2:	463b      	mov	r3, r7
 80005a4:	4638      	mov	r0, r7
 80005a6:	463c      	mov	r4, r7
 80005a8:	46b8      	mov	r8, r7
 80005aa:	46be      	mov	lr, r7
 80005ac:	2620      	movs	r6, #32
 80005ae:	fbb1 f1f7 	udiv	r1, r1, r7
 80005b2:	eba2 0208 	sub.w	r2, r2, r8
 80005b6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ba:	e766      	b.n	800048a <__udivmoddi4+0xfa>
 80005bc:	4601      	mov	r1, r0
 80005be:	e718      	b.n	80003f2 <__udivmoddi4+0x62>
 80005c0:	4610      	mov	r0, r2
 80005c2:	e72c      	b.n	800041e <__udivmoddi4+0x8e>
 80005c4:	f1c6 0220 	rsb	r2, r6, #32
 80005c8:	fa2e f302 	lsr.w	r3, lr, r2
 80005cc:	40b7      	lsls	r7, r6
 80005ce:	40b1      	lsls	r1, r6
 80005d0:	fa20 f202 	lsr.w	r2, r0, r2
 80005d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005d8:	430a      	orrs	r2, r1
 80005da:	fbb3 f8fe 	udiv	r8, r3, lr
 80005de:	b2bc      	uxth	r4, r7
 80005e0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb08 f904 	mul.w	r9, r8, r4
 80005ee:	40b0      	lsls	r0, r6
 80005f0:	4589      	cmp	r9, r1
 80005f2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005f6:	b280      	uxth	r0, r0
 80005f8:	d93e      	bls.n	8000678 <__udivmoddi4+0x2e8>
 80005fa:	1879      	adds	r1, r7, r1
 80005fc:	f108 3cff 	add.w	ip, r8, #4294967295
 8000600:	d201      	bcs.n	8000606 <__udivmoddi4+0x276>
 8000602:	4589      	cmp	r9, r1
 8000604:	d81f      	bhi.n	8000646 <__udivmoddi4+0x2b6>
 8000606:	eba1 0109 	sub.w	r1, r1, r9
 800060a:	fbb1 f9fe 	udiv	r9, r1, lr
 800060e:	fb09 f804 	mul.w	r8, r9, r4
 8000612:	fb0e 1119 	mls	r1, lr, r9, r1
 8000616:	b292      	uxth	r2, r2
 8000618:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800061c:	4542      	cmp	r2, r8
 800061e:	d229      	bcs.n	8000674 <__udivmoddi4+0x2e4>
 8000620:	18ba      	adds	r2, r7, r2
 8000622:	f109 31ff 	add.w	r1, r9, #4294967295
 8000626:	d2c4      	bcs.n	80005b2 <__udivmoddi4+0x222>
 8000628:	4542      	cmp	r2, r8
 800062a:	d2c2      	bcs.n	80005b2 <__udivmoddi4+0x222>
 800062c:	f1a9 0102 	sub.w	r1, r9, #2
 8000630:	443a      	add	r2, r7
 8000632:	e7be      	b.n	80005b2 <__udivmoddi4+0x222>
 8000634:	45f0      	cmp	r8, lr
 8000636:	d29d      	bcs.n	8000574 <__udivmoddi4+0x1e4>
 8000638:	ebbe 0302 	subs.w	r3, lr, r2
 800063c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000640:	3801      	subs	r0, #1
 8000642:	46e1      	mov	r9, ip
 8000644:	e796      	b.n	8000574 <__udivmoddi4+0x1e4>
 8000646:	eba7 0909 	sub.w	r9, r7, r9
 800064a:	4449      	add	r1, r9
 800064c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000650:	fbb1 f9fe 	udiv	r9, r1, lr
 8000654:	fb09 f804 	mul.w	r8, r9, r4
 8000658:	e7db      	b.n	8000612 <__udivmoddi4+0x282>
 800065a:	4673      	mov	r3, lr
 800065c:	e77f      	b.n	800055e <__udivmoddi4+0x1ce>
 800065e:	4650      	mov	r0, sl
 8000660:	e766      	b.n	8000530 <__udivmoddi4+0x1a0>
 8000662:	4608      	mov	r0, r1
 8000664:	e6fd      	b.n	8000462 <__udivmoddi4+0xd2>
 8000666:	443b      	add	r3, r7
 8000668:	3a02      	subs	r2, #2
 800066a:	e733      	b.n	80004d4 <__udivmoddi4+0x144>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	443b      	add	r3, r7
 8000672:	e71c      	b.n	80004ae <__udivmoddi4+0x11e>
 8000674:	4649      	mov	r1, r9
 8000676:	e79c      	b.n	80005b2 <__udivmoddi4+0x222>
 8000678:	eba1 0109 	sub.w	r1, r1, r9
 800067c:	46c4      	mov	ip, r8
 800067e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000682:	fb09 f804 	mul.w	r8, r9, r4
 8000686:	e7c4      	b.n	8000612 <__udivmoddi4+0x282>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <AudioPWM_Init>:

static TIM_HandleTypeDef *s_pwm;
static uint32_t s_timclk;

void AudioPWM_Init(TIM_HandleTypeDef *htim_pwm)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  s_pwm = htim_pwm;
 8000694:	4a1f      	ldr	r2, [pc, #124]	@ (8000714 <AudioPWM_Init+0x88>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]

  // Reloj efectivo (timers en APB2 duplican si prescaler != 1)
  s_timclk = HAL_RCC_GetPCLK2Freq();
 800069a:	f007 f837 	bl	800770c <HAL_RCC_GetPCLK2Freq>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000718 <AudioPWM_Init+0x8c>)
 80006a2:	6013      	str	r3, [r2, #0]
  uint32_t ppre2 = ((RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos) & 0x7;
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <AudioPWM_Init+0x90>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	0b5b      	lsrs	r3, r3, #13
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	613b      	str	r3, [r7, #16]
  if (ppre2 >= 4) s_timclk *= 2U;
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b03      	cmp	r3, #3
 80006b4:	d904      	bls.n	80006c0 <AudioPWM_Init+0x34>
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <AudioPWM_Init+0x8c>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	005b      	lsls	r3, r3, #1
 80006bc:	4a16      	ldr	r2, [pc, #88]	@ (8000718 <AudioPWM_Init+0x8c>)
 80006be:	6013      	str	r3, [r2, #0]

  // Base 1 MHz
  uint32_t target = 1000000UL;
 80006c0:	4b17      	ldr	r3, [pc, #92]	@ (8000720 <AudioPWM_Init+0x94>)
 80006c2:	60fb      	str	r3, [r7, #12]
  uint32_t psc = (s_timclk + target/2U) / target;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	085a      	lsrs	r2, r3, #1
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <AudioPWM_Init+0x8c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	441a      	add	r2, r3
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d4:	617b      	str	r3, [r7, #20]
  if (psc) psc--;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <AudioPWM_Init+0x56>
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	3b01      	subs	r3, #1
 80006e0:	617b      	str	r3, [r7, #20]
  if (psc > 65535U) psc = 65535U;
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80006e8:	d302      	bcc.n	80006f0 <AudioPWM_Init+0x64>
 80006ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006ee:	617b      	str	r3, [r7, #20]
  __HAL_TIM_SET_PRESCALER(s_pwm, (uint16_t)psc);
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <AudioPWM_Init+0x88>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	629a      	str	r2, [r3, #40]	@ 0x28

  HAL_TIM_PWM_Start(s_pwm, TIM_CHANNEL_1);
 80006fc:	4b05      	ldr	r3, [pc, #20]	@ (8000714 <AudioPWM_Init+0x88>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f008 f9f8 	bl	8008af8 <HAL_TIM_PWM_Start>
  AudioPWM_Silence();
 8000708:	f000 f848 	bl	800079c <AudioPWM_Silence>
}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000d0 	.word	0x200000d0
 8000718:	200000d4 	.word	0x200000d4
 800071c:	40023800 	.word	0x40023800
 8000720:	000f4240 	.word	0x000f4240

08000724 <AudioPWM_SetFreq>:

void AudioPWM_SetFreq(uint32_t hz)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if (!s_pwm) return;
 800072c:	4b19      	ldr	r3, [pc, #100]	@ (8000794 <AudioPWM_SetFreq+0x70>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d02a      	beq.n	800078a <AudioPWM_SetFreq+0x66>
  if (hz == 0) { AudioPWM_Silence(); return; }
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d102      	bne.n	8000740 <AudioPWM_SetFreq+0x1c>
 800073a:	f000 f82f 	bl	800079c <AudioPWM_Silence>
 800073e:	e025      	b.n	800078c <AudioPWM_SetFreq+0x68>

  uint32_t arr = (1000000UL / hz);
 8000740:	4a15      	ldr	r2, [pc, #84]	@ (8000798 <AudioPWM_SetFreq+0x74>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	fbb2 f3f3 	udiv	r3, r2, r3
 8000748:	60fb      	str	r3, [r7, #12]
  if (arr) arr--;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d002      	beq.n	8000756 <AudioPWM_SetFreq+0x32>
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	3b01      	subs	r3, #1
 8000754:	60fb      	str	r3, [r7, #12]
  if (arr > 65535U) arr = 65535U;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800075c:	d302      	bcc.n	8000764 <AudioPWM_SetFreq+0x40>
 800075e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000762:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_AUTORELOAD(s_pwm, (uint16_t)arr);
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <AudioPWM_SetFreq+0x70>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <AudioPWM_SetFreq+0x70>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COMPARE(s_pwm, TIM_CHANNEL_1, (uint16_t)(arr >> 1)); // 50%
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	b29a      	uxth	r2, r3
 8000780:	4b04      	ldr	r3, [pc, #16]	@ (8000794 <AudioPWM_SetFreq+0x70>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	635a      	str	r2, [r3, #52]	@ 0x34
 8000788:	e000      	b.n	800078c <AudioPWM_SetFreq+0x68>
  if (!s_pwm) return;
 800078a:	bf00      	nop
}
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200000d0 	.word	0x200000d0
 8000798:	000f4240 	.word	0x000f4240

0800079c <AudioPWM_Silence>:

void AudioPWM_Silence(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  if (!s_pwm) return;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <AudioPWM_Silence+0x24>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d005      	beq.n	80007b4 <AudioPWM_Silence+0x18>
  __HAL_TIM_SET_COMPARE(s_pwm, TIM_CHANNEL_1, 0);
 80007a8:	4b05      	ldr	r3, [pc, #20]	@ (80007c0 <AudioPWM_Silence+0x24>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	2200      	movs	r2, #0
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007b2:	e000      	b.n	80007b6 <AudioPWM_Silence+0x1a>
  if (!s_pwm) return;
 80007b4:	bf00      	nop
}
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	200000d0 	.word	0x200000d0

080007c4 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	2140      	movs	r1, #64	@ 0x40
 80007cc:	4803      	ldr	r0, [pc, #12]	@ (80007dc <SELECT+0x18>)
 80007ce:	f006 fe7d 	bl	80074cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f006 fb12 	bl	8006dfc <HAL_Delay>
}
 80007d8:	bf00      	nop
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40020400 	.word	0x40020400

080007e0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2140      	movs	r1, #64	@ 0x40
 80007e8:	4803      	ldr	r0, [pc, #12]	@ (80007f8 <DESELECT+0x18>)
 80007ea:	f006 fe6f 	bl	80074cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80007ee:	2001      	movs	r0, #1
 80007f0:	f006 fb04 	bl	8006dfc <HAL_Delay>
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40020400 	.word	0x40020400

080007fc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000806:	bf00      	nop
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <SPI_TxByte+0x30>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	689b      	ldr	r3, [r3, #8]
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	2b02      	cmp	r3, #2
 8000814:	d1f8      	bne.n	8000808 <SPI_TxByte+0xc>
    HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000816:	1df9      	adds	r1, r7, #7
 8000818:	2364      	movs	r3, #100	@ 0x64
 800081a:	2201      	movs	r2, #1
 800081c:	4803      	ldr	r0, [pc, #12]	@ (800082c <SPI_TxByte+0x30>)
 800081e:	f007 fc5a 	bl	80080d6 <HAL_SPI_Transmit>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000e0 	.word	0x200000e0

08000830 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800083c:	bf00      	nop
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <SPI_TxBuffer+0x30>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f003 0302 	and.w	r3, r3, #2
 8000848:	2b02      	cmp	r3, #2
 800084a:	d1f8      	bne.n	800083e <SPI_TxBuffer+0xe>
    HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800084c:	887a      	ldrh	r2, [r7, #2]
 800084e:	2364      	movs	r3, #100	@ 0x64
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	4803      	ldr	r0, [pc, #12]	@ (8000860 <SPI_TxBuffer+0x30>)
 8000854:	f007 fc3f 	bl	80080d6 <HAL_SPI_Transmit>
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	200000e0 	.word	0x200000e0

08000864 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af02      	add	r7, sp, #8
    uint8_t dummy, data;
    dummy = 0xFF;
 800086a:	23ff      	movs	r3, #255	@ 0xff
 800086c:	71fb      	strb	r3, [r7, #7]

    while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800086e:	bf00      	nop
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <SPI_RxByte+0x34>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	f003 0302 	and.w	r3, r3, #2
 800087a:	2b02      	cmp	r3, #2
 800087c:	d1f8      	bne.n	8000870 <SPI_RxByte+0xc>
    HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800087e:	1dba      	adds	r2, r7, #6
 8000880:	1df9      	adds	r1, r7, #7
 8000882:	2364      	movs	r3, #100	@ 0x64
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	2301      	movs	r3, #1
 8000888:	4803      	ldr	r0, [pc, #12]	@ (8000898 <SPI_RxByte+0x34>)
 800088a:	f007 fd68 	bl	800835e <HAL_SPI_TransmitReceive>

    return data;
 800088e:	79bb      	ldrb	r3, [r7, #6]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000e0 	.word	0x200000e0

0800089c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    *buff = SPI_RxByte();
 80008a4:	f7ff ffde 	bl	8000864 <SPI_RxByte>
 80008a8:	4603      	mov	r3, r0
 80008aa:	461a      	mov	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	701a      	strb	r2, [r3, #0]
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
    uint8_t res;

    /* timeout 500ms */
    Timer2 = 500;
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <SD_ReadyWait+0x30>)
 80008c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80008c4:	801a      	strh	r2, [r3, #0]

    /* if SD goes ready, receives 0xFF */
    do {
        res = SPI_RxByte();
 80008c6:	f7ff ffcd 	bl	8000864 <SPI_RxByte>
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
    } while ((res != 0xFF) && Timer2);
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2bff      	cmp	r3, #255	@ 0xff
 80008d2:	d004      	beq.n	80008de <SD_ReadyWait+0x26>
 80008d4:	4b04      	ldr	r3, [pc, #16]	@ (80008e8 <SD_ReadyWait+0x30>)
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b29b      	uxth	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f3      	bne.n	80008c6 <SD_ReadyWait+0xe>

    return res;
 80008de:	79fb      	ldrb	r3, [r7, #7]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000da 	.word	0x200000da

080008ec <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b084      	sub	sp, #16
 80008f0:	af00      	add	r7, sp, #0
    uint8_t args[6];
    uint32_t cnt = 0x1FFF;
 80008f2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80008f6:	60fb      	str	r3, [r7, #12]

    /* transmit bytes to wake up */
    DESELECT();
 80008f8:	f7ff ff72 	bl	80007e0 <DESELECT>
    for(int i = 0; i < 10; i++)
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	e005      	b.n	800090e <SD_PowerOn+0x22>
    {
        SPI_TxByte(0xFF);
 8000902:	20ff      	movs	r0, #255	@ 0xff
 8000904:	f7ff ff7a 	bl	80007fc <SPI_TxByte>
    for(int i = 0; i < 10; i++)
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	3301      	adds	r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	2b09      	cmp	r3, #9
 8000912:	ddf6      	ble.n	8000902 <SD_PowerOn+0x16>
    }

    /* slave select */
    SELECT();
 8000914:	f7ff ff56 	bl	80007c4 <SELECT>

    /* make idle state */
    args[0] = CMD0;     /* CMD0:GO_IDLE_STATE */
 8000918:	2340      	movs	r3, #64	@ 0x40
 800091a:	703b      	strb	r3, [r7, #0]
    args[1] = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	707b      	strb	r3, [r7, #1]
    args[2] = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	70bb      	strb	r3, [r7, #2]
    args[3] = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	70fb      	strb	r3, [r7, #3]
    args[4] = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	713b      	strb	r3, [r7, #4]
    args[5] = 0x95;     /* CRC */
 800092c:	2395      	movs	r3, #149	@ 0x95
 800092e:	717b      	strb	r3, [r7, #5]

    SPI_TxBuffer(args, sizeof(args));
 8000930:	463b      	mov	r3, r7
 8000932:	2106      	movs	r1, #6
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff7b 	bl	8000830 <SPI_TxBuffer>

    /* wait response */
    while ((SPI_RxByte() != 0x01) && cnt)
 800093a:	e002      	b.n	8000942 <SD_PowerOn+0x56>
    {
        cnt--;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3b01      	subs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
    while ((SPI_RxByte() != 0x01) && cnt)
 8000942:	f7ff ff8f 	bl	8000864 <SPI_RxByte>
 8000946:	4603      	mov	r3, r0
 8000948:	2b01      	cmp	r3, #1
 800094a:	d002      	beq.n	8000952 <SD_PowerOn+0x66>
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d1f4      	bne.n	800093c <SD_PowerOn+0x50>
    }

    DESELECT();
 8000952:	f7ff ff45 	bl	80007e0 <DESELECT>
    SPI_TxByte(0XFF);
 8000956:	20ff      	movs	r0, #255	@ 0xff
 8000958:	f7ff ff50 	bl	80007fc <SPI_TxByte>

    PowerFlag = 1;
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <SD_PowerOn+0x80>)
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000dd 	.word	0x200000dd

08000970 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
    PowerFlag = 0;
 8000974:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <SD_PowerOff+0x14>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	200000dd 	.word	0x200000dd

08000988 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
    return PowerFlag;
 800098c:	4b03      	ldr	r3, [pc, #12]	@ (800099c <SD_CheckPower+0x14>)
 800098e:	781b      	ldrb	r3, [r3, #0]
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	200000dd 	.word	0x200000dd

080009a0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
    uint8_t token;

    /* timeout 200ms */
    Timer1 = 200;
 80009aa:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <SD_RxDataBlock+0x5c>)
 80009ac:	22c8      	movs	r2, #200	@ 0xc8
 80009ae:	801a      	strh	r2, [r3, #0]

    /* loop until receive a response or timeout */
    do {
        token = SPI_RxByte();
 80009b0:	f7ff ff58 	bl	8000864 <SPI_RxByte>
 80009b4:	4603      	mov	r3, r0
 80009b6:	73fb      	strb	r3, [r7, #15]
    } while((token == 0xFF) && Timer1);
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	2bff      	cmp	r3, #255	@ 0xff
 80009bc:	d104      	bne.n	80009c8 <SD_RxDataBlock+0x28>
 80009be:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <SD_RxDataBlock+0x5c>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d1f3      	bne.n	80009b0 <SD_RxDataBlock+0x10>

    /* invalid response */
    if(token != 0xFE) return FALSE;
 80009c8:	7bfb      	ldrb	r3, [r7, #15]
 80009ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80009cc:	d007      	beq.n	80009de <SD_RxDataBlock+0x3e>
 80009ce:	2300      	movs	r3, #0
 80009d0:	e00f      	b.n	80009f2 <SD_RxDataBlock+0x52>
    /* receive data */
    // FIX 2: do-while(len--) 루프 수정
    // 기존 코드는 len+1 만큼 실행되어 버퍼 오버플로우를 유발할 수 있습니다.
    // while(len--) 형태로 변경하여 정확히 len 만큼만 실행되도록 합니다.
    while(len--) {
        SPI_RxBytePtr(buff++);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5f 	bl	800089c <SPI_RxBytePtr>
    while(len--) {
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	1e5a      	subs	r2, r3, #1
 80009e2:	603a      	str	r2, [r7, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f4      	bne.n	80009d2 <SD_RxDataBlock+0x32>
    }

    /* discard CRC */
    SPI_RxByte();
 80009e8:	f7ff ff3c 	bl	8000864 <SPI_RxByte>
    SPI_RxByte();
 80009ec:	f7ff ff3a 	bl	8000864 <SPI_RxByte>

    return TRUE;
 80009f0:	2301      	movs	r3, #1
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	200000d8 	.word	0x200000d8

08000a00 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	70fb      	strb	r3, [r7, #3]
    uint8_t resp = 0xFF; // 초기화
 8000a0c:	23ff      	movs	r3, #255	@ 0xff
 8000a0e:	73fb      	strb	r3, [r7, #15]
    uint8_t i = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	73bb      	strb	r3, [r7, #14]

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return FALSE;
 8000a14:	f7ff ff50 	bl	80008b8 <SD_ReadyWait>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2bff      	cmp	r3, #255	@ 0xff
 8000a1c:	d001      	beq.n	8000a22 <SD_TxDataBlock+0x22>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	e037      	b.n	8000a92 <SD_TxDataBlock+0x92>

    /* transmit token */
    SPI_TxByte(token);
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fee9 	bl	80007fc <SPI_TxByte>

    /* if it's not STOP token, transmit data */
    if (token != 0xFD)
 8000a2a:	78fb      	ldrb	r3, [r7, #3]
 8000a2c:	2bfd      	cmp	r3, #253	@ 0xfd
 8000a2e:	d028      	beq.n	8000a82 <SD_TxDataBlock+0x82>
    {
        SPI_TxBuffer((uint8_t*)buff, 512);
 8000a30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff fefb 	bl	8000830 <SPI_TxBuffer>

        /* discard CRC */
        SPI_RxByte();
 8000a3a:	f7ff ff13 	bl	8000864 <SPI_RxByte>
        SPI_RxByte();
 8000a3e:	f7ff ff11 	bl	8000864 <SPI_RxByte>

        /* receive response */
        while (i <= 64)
 8000a42:	e00b      	b.n	8000a5c <SD_TxDataBlock+0x5c>
        {
            resp = SPI_RxByte();
 8000a44:	f7ff ff0e 	bl	8000864 <SPI_RxByte>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	73fb      	strb	r3, [r7, #15]

            /* transmit 0x05 accepted */
            if ((resp & 0x1F) == 0x05) break;
 8000a4c:	7bfb      	ldrb	r3, [r7, #15]
 8000a4e:	f003 031f 	and.w	r3, r3, #31
 8000a52:	2b05      	cmp	r3, #5
 8000a54:	d006      	beq.n	8000a64 <SD_TxDataBlock+0x64>
            i++;
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	73bb      	strb	r3, [r7, #14]
        while (i <= 64)
 8000a5c:	7bbb      	ldrb	r3, [r7, #14]
 8000a5e:	2b40      	cmp	r3, #64	@ 0x40
 8000a60:	d9f0      	bls.n	8000a44 <SD_TxDataBlock+0x44>
 8000a62:	e000      	b.n	8000a66 <SD_TxDataBlock+0x66>
            if ((resp & 0x1F) == 0x05) break;
 8000a64:	bf00      	nop
        }

        // FIX 3: 타임아웃 없는 무한 루프 수정
        // 카드가 계속 busy(0x00) 상태일 경우 시스템이 멈추는 것을 방지하기 위해 타임아웃을 추가합니다.
        Timer1 = 200; // 200ms 타임아웃
 8000a66:	4b0d      	ldr	r3, [pc, #52]	@ (8000a9c <SD_TxDataBlock+0x9c>)
 8000a68:	22c8      	movs	r2, #200	@ 0xc8
 8000a6a:	801a      	strh	r2, [r3, #0]
        while ((SPI_RxByte() == 0) && Timer1);
 8000a6c:	bf00      	nop
 8000a6e:	f7ff fef9 	bl	8000864 <SPI_RxByte>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d104      	bne.n	8000a82 <SD_TxDataBlock+0x82>
 8000a78:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <SD_TxDataBlock+0x9c>)
 8000a7a:	881b      	ldrh	r3, [r3, #0]
 8000a7c:	b29b      	uxth	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f5      	bne.n	8000a6e <SD_TxDataBlock+0x6e>
    }

    // resp가 초기화되지 않은 상태로 사용될 수 있어 수정
    if ((resp & 0x1F) == 0x05) return TRUE;
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	f003 031f 	and.w	r3, r3, #31
 8000a88:	2b05      	cmp	r3, #5
 8000a8a:	d101      	bne.n	8000a90 <SD_TxDataBlock+0x90>
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e000      	b.n	8000a92 <SD_TxDataBlock+0x92>

    return FALSE;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000d8 	.word	0x200000d8

08000aa0 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	6039      	str	r1, [r7, #0]
 8000aaa:	71fb      	strb	r3, [r7, #7]
    uint8_t crc, res;

    /* wait SD ready */
    if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000aac:	f7ff ff04 	bl	80008b8 <SD_ReadyWait>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2bff      	cmp	r3, #255	@ 0xff
 8000ab4:	d001      	beq.n	8000aba <SD_SendCmd+0x1a>
 8000ab6:	23ff      	movs	r3, #255	@ 0xff
 8000ab8:	e042      	b.n	8000b40 <SD_SendCmd+0xa0>

    /* transmit command */
    SPI_TxByte(cmd);                    /* Command */
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe9d 	bl	80007fc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	0e1b      	lsrs	r3, r3, #24
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff fe97 	bl	80007fc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	0c1b      	lsrs	r3, r3, #16
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff fe91 	bl	80007fc <SPI_TxByte>
    SPI_TxByte((uint8_t)(arg >> 8));    /* Argument[15..8] */
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	0a1b      	lsrs	r3, r3, #8
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fe8b 	bl	80007fc <SPI_TxByte>
    SPI_TxByte((uint8_t)arg);           /* Argument[7..0] */
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fe86 	bl	80007fc <SPI_TxByte>

    /* prepare CRC */
    if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	2b40      	cmp	r3, #64	@ 0x40
 8000af4:	d102      	bne.n	8000afc <SD_SendCmd+0x5c>
 8000af6:	2395      	movs	r3, #149	@ 0x95
 8000af8:	73fb      	strb	r3, [r7, #15]
 8000afa:	e007      	b.n	8000b0c <SD_SendCmd+0x6c>
    else if(cmd == CMD8) crc = 0x87;    /* CRC for CMD8(0x1AA) */
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b48      	cmp	r3, #72	@ 0x48
 8000b00:	d102      	bne.n	8000b08 <SD_SendCmd+0x68>
 8000b02:	2387      	movs	r3, #135	@ 0x87
 8000b04:	73fb      	strb	r3, [r7, #15]
 8000b06:	e001      	b.n	8000b0c <SD_SendCmd+0x6c>
    else crc = 1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	73fb      	strb	r3, [r7, #15]

    /* transmit CRC */
    SPI_TxByte(crc);
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fe74 	bl	80007fc <SPI_TxByte>

    /* Skip a stuff byte when STOP_TRANSMISSION */
    if (cmd == CMD12) SPI_RxByte();
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	2b4c      	cmp	r3, #76	@ 0x4c
 8000b18:	d101      	bne.n	8000b1e <SD_SendCmd+0x7e>
 8000b1a:	f7ff fea3 	bl	8000864 <SPI_RxByte>

    /* receive response */
    uint8_t n = 10;
 8000b1e:	230a      	movs	r3, #10
 8000b20:	73bb      	strb	r3, [r7, #14]
    do {
        res = SPI_RxByte();
 8000b22:	f7ff fe9f 	bl	8000864 <SPI_RxByte>
 8000b26:	4603      	mov	r3, r0
 8000b28:	737b      	strb	r3, [r7, #13]
    } while ((res & 0x80) && --n);
 8000b2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	da05      	bge.n	8000b3e <SD_SendCmd+0x9e>
 8000b32:	7bbb      	ldrb	r3, [r7, #14]
 8000b34:	3b01      	subs	r3, #1
 8000b36:	73bb      	strb	r3, [r7, #14]
 8000b38:	7bbb      	ldrb	r3, [r7, #14]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d1f1      	bne.n	8000b22 <SD_SendCmd+0x82>

    return res;
 8000b3e:	7b7b      	ldrb	r3, [r7, #13]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
    uint8_t n, type, ocr[4];

    /* single drive, drv should be 0 */
    if(drv) return STA_NOINIT;
 8000b52:	79fb      	ldrb	r3, [r7, #7]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SD_disk_initialize+0x14>
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e0d6      	b.n	8000d0a <SD_disk_initialize+0x1c2>

    /* no disk */
    if(Stat & STA_NODISK) return Stat;
 8000b5c:	4b6d      	ldr	r3, [pc, #436]	@ (8000d14 <SD_disk_initialize+0x1cc>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f003 0302 	and.w	r3, r3, #2
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <SD_disk_initialize+0x2a>
 8000b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8000d14 <SD_disk_initialize+0x1cc>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	e0cb      	b.n	8000d0a <SD_disk_initialize+0x1c2>

    /* power on */
    SD_PowerOn();
 8000b72:	f7ff febb 	bl	80008ec <SD_PowerOn>

    /* slave select */
    SELECT();
 8000b76:	f7ff fe25 	bl	80007c4 <SELECT>

    /* check disk type */
    type = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73bb      	strb	r3, [r7, #14]

    /* send GO_IDLE_STATE command */
    if (SD_SendCmd(CMD0, 0) == 1)
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2040      	movs	r0, #64	@ 0x40
 8000b82:	f7ff ff8d 	bl	8000aa0 <SD_SendCmd>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	f040 80a6 	bne.w	8000cda <SD_disk_initialize+0x192>
    {
        /* timeout 1 sec */
        Timer1 = 1000;
 8000b8e:	4b62      	ldr	r3, [pc, #392]	@ (8000d18 <SD_disk_initialize+0x1d0>)
 8000b90:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b94:	801a      	strh	r2, [r3, #0]

        /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
        if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000b96:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000b9a:	2048      	movs	r0, #72	@ 0x48
 8000b9c:	f7ff ff80 	bl	8000aa0 <SD_SendCmd>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d158      	bne.n	8000c58 <SD_disk_initialize+0x110>
        {
            /* operation condition register */
            for (n = 0; n < 4; n++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	73fb      	strb	r3, [r7, #15]
 8000baa:	e00c      	b.n	8000bc6 <SD_disk_initialize+0x7e>
            {
                ocr[n] = SPI_RxByte();
 8000bac:	7bfc      	ldrb	r4, [r7, #15]
 8000bae:	f7ff fe59 	bl	8000864 <SPI_RxByte>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	f104 0310 	add.w	r3, r4, #16
 8000bba:	443b      	add	r3, r7
 8000bbc:	f803 2c08 	strb.w	r2, [r3, #-8]
            for (n = 0; n < 4; n++)
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	73fb      	strb	r3, [r7, #15]
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	d9ef      	bls.n	8000bac <SD_disk_initialize+0x64>
            }

            /* voltage range 2.7-3.6V */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000bcc:	7abb      	ldrb	r3, [r7, #10]
 8000bce:	2b01      	cmp	r3, #1
 8000bd0:	f040 8083 	bne.w	8000cda <SD_disk_initialize+0x192>
 8000bd4:	7afb      	ldrb	r3, [r7, #11]
 8000bd6:	2baa      	cmp	r3, #170	@ 0xaa
 8000bd8:	d17f      	bne.n	8000cda <SD_disk_initialize+0x192>
            {
                /* ACMD41 with HCS bit */
                do {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000bda:	2100      	movs	r1, #0
 8000bdc:	2077      	movs	r0, #119	@ 0x77
 8000bde:	f7ff ff5f 	bl	8000aa0 <SD_SendCmd>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d807      	bhi.n	8000bf8 <SD_disk_initialize+0xb0>
 8000be8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000bec:	2069      	movs	r0, #105	@ 0x69
 8000bee:	f7ff ff57 	bl	8000aa0 <SD_SendCmd>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d005      	beq.n	8000c04 <SD_disk_initialize+0xbc>
                } while (Timer1);
 8000bf8:	4b47      	ldr	r3, [pc, #284]	@ (8000d18 <SD_disk_initialize+0x1d0>)
 8000bfa:	881b      	ldrh	r3, [r3, #0]
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d1eb      	bne.n	8000bda <SD_disk_initialize+0x92>
 8000c02:	e000      	b.n	8000c06 <SD_disk_initialize+0xbe>
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000c04:	bf00      	nop

                /* READ_OCR */
                if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000c06:	4b44      	ldr	r3, [pc, #272]	@ (8000d18 <SD_disk_initialize+0x1d0>)
 8000c08:	881b      	ldrh	r3, [r3, #0]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d064      	beq.n	8000cda <SD_disk_initialize+0x192>
 8000c10:	2100      	movs	r1, #0
 8000c12:	207a      	movs	r0, #122	@ 0x7a
 8000c14:	f7ff ff44 	bl	8000aa0 <SD_SendCmd>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d15d      	bne.n	8000cda <SD_disk_initialize+0x192>
                {
                    /* Check CCS bit */
                    for (n = 0; n < 4; n++)
 8000c1e:	2300      	movs	r3, #0
 8000c20:	73fb      	strb	r3, [r7, #15]
 8000c22:	e00c      	b.n	8000c3e <SD_disk_initialize+0xf6>
                    {
                        ocr[n] = SPI_RxByte();
 8000c24:	7bfc      	ldrb	r4, [r7, #15]
 8000c26:	f7ff fe1d 	bl	8000864 <SPI_RxByte>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	f104 0310 	add.w	r3, r4, #16
 8000c32:	443b      	add	r3, r7
 8000c34:	f803 2c08 	strb.w	r2, [r3, #-8]
                    for (n = 0; n < 4; n++)
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d9ef      	bls.n	8000c24 <SD_disk_initialize+0xdc>
                    }

                    /* SDv2 (HC or SC) */
                    type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000c44:	7a3b      	ldrb	r3, [r7, #8]
 8000c46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SD_disk_initialize+0x10a>
 8000c4e:	230c      	movs	r3, #12
 8000c50:	e000      	b.n	8000c54 <SD_disk_initialize+0x10c>
 8000c52:	2304      	movs	r3, #4
 8000c54:	73bb      	strb	r3, [r7, #14]
 8000c56:	e040      	b.n	8000cda <SD_disk_initialize+0x192>
            }
        }
        else
        {
            /* SDC V1 or MMC */
            type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2077      	movs	r0, #119	@ 0x77
 8000c5c:	f7ff ff20 	bl	8000aa0 <SD_SendCmd>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d808      	bhi.n	8000c78 <SD_disk_initialize+0x130>
 8000c66:	2100      	movs	r1, #0
 8000c68:	2069      	movs	r0, #105	@ 0x69
 8000c6a:	f7ff ff19 	bl	8000aa0 <SD_SendCmd>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d801      	bhi.n	8000c78 <SD_disk_initialize+0x130>
 8000c74:	2302      	movs	r3, #2
 8000c76:	e000      	b.n	8000c7a <SD_disk_initialize+0x132>
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73bb      	strb	r3, [r7, #14]

            do
            {
                if (type == CT_SD1)
 8000c7c:	7bbb      	ldrb	r3, [r7, #14]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d10e      	bne.n	8000ca0 <SD_disk_initialize+0x158>
                {
                    if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000c82:	2100      	movs	r1, #0
 8000c84:	2077      	movs	r0, #119	@ 0x77
 8000c86:	f7ff ff0b 	bl	8000aa0 <SD_SendCmd>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d80e      	bhi.n	8000cae <SD_disk_initialize+0x166>
 8000c90:	2100      	movs	r1, #0
 8000c92:	2069      	movs	r0, #105	@ 0x69
 8000c94:	f7ff ff04 	bl	8000aa0 <SD_SendCmd>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d107      	bne.n	8000cae <SD_disk_initialize+0x166>
 8000c9e:	e00d      	b.n	8000cbc <SD_disk_initialize+0x174>
                }
                else
                {
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2041      	movs	r0, #65	@ 0x41
 8000ca4:	f7ff fefc 	bl	8000aa0 <SD_SendCmd>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d005      	beq.n	8000cba <SD_disk_initialize+0x172>
                }

            } while (Timer1);
 8000cae:	4b1a      	ldr	r3, [pc, #104]	@ (8000d18 <SD_disk_initialize+0x1d0>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1e1      	bne.n	8000c7c <SD_disk_initialize+0x134>
 8000cb8:	e000      	b.n	8000cbc <SD_disk_initialize+0x174>
                    if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000cba:	bf00      	nop

            /* SET_BLOCKLEN */
            if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <SD_disk_initialize+0x1d0>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d007      	beq.n	8000cd6 <SD_disk_initialize+0x18e>
 8000cc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cca:	2050      	movs	r0, #80	@ 0x50
 8000ccc:	f7ff fee8 	bl	8000aa0 <SD_SendCmd>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SD_disk_initialize+0x192>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73bb      	strb	r3, [r7, #14]
        }
    }

    CardType = type;
 8000cda:	4a10      	ldr	r2, [pc, #64]	@ (8000d1c <SD_disk_initialize+0x1d4>)
 8000cdc:	7bbb      	ldrb	r3, [r7, #14]
 8000cde:	7013      	strb	r3, [r2, #0]

    /* Idle */
    DESELECT();
 8000ce0:	f7ff fd7e 	bl	80007e0 <DESELECT>
    SPI_RxByte();
 8000ce4:	f7ff fdbe 	bl	8000864 <SPI_RxByte>

    /* Clear STA_NOINIT */
    if (type)
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d008      	beq.n	8000d00 <SD_disk_initialize+0x1b8>
    {
        Stat &= ~STA_NOINIT;
 8000cee:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <SD_disk_initialize+0x1cc>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b2db      	uxtb	r3, r3
 8000cf4:	f023 0301 	bic.w	r3, r3, #1
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <SD_disk_initialize+0x1cc>)
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e001      	b.n	8000d04 <SD_disk_initialize+0x1bc>
    }
    else
    {
        /* Initialization failed */
        SD_PowerOff();
 8000d00:	f7ff fe36 	bl	8000970 <SD_PowerOff>
    }

    return Stat;
 8000d04:	4b03      	ldr	r3, [pc, #12]	@ (8000d14 <SD_disk_initialize+0x1cc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000000 	.word	0x20000000
 8000d18:	200000d8 	.word	0x200000d8
 8000d1c:	200000dc 	.word	0x200000dc

08000d20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SD_disk_status+0x14>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e002      	b.n	8000d3a <SD_disk_status+0x1a>
    return Stat;
 8000d34:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <SD_disk_status+0x28>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	b2db      	uxtb	r3, r3
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000000 	.word	0x20000000

08000d4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60b9      	str	r1, [r7, #8]
 8000d54:	607a      	str	r2, [r7, #4]
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	4603      	mov	r3, r0
 8000d5a:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d102      	bne.n	8000d68 <SD_disk_read+0x1c>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <SD_disk_read+0x20>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	e051      	b.n	8000e10 <SD_disk_read+0xc4>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e18 <SD_disk_read+0xcc>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <SD_disk_read+0x32>
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e048      	b.n	8000e10 <SD_disk_read+0xc4>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 8000d7e:	4b27      	ldr	r3, [pc, #156]	@ (8000e1c <SD_disk_read+0xd0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <SD_disk_read+0x44>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	025b      	lsls	r3, r3, #9
 8000d8e:	607b      	str	r3, [r7, #4]

    SELECT();
 8000d90:	f7ff fd18 	bl	80007c4 <SELECT>

    if (count == 1)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d111      	bne.n	8000dbe <SD_disk_read+0x72>
    {
        /* READ_SINGLE_BLOCK */
        if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000d9a:	6879      	ldr	r1, [r7, #4]
 8000d9c:	2051      	movs	r0, #81	@ 0x51
 8000d9e:	f7ff fe7f 	bl	8000aa0 <SD_SendCmd>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d129      	bne.n	8000dfc <SD_disk_read+0xb0>
 8000da8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dac:	68b8      	ldr	r0, [r7, #8]
 8000dae:	f7ff fdf7 	bl	80009a0 <SD_RxDataBlock>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d021      	beq.n	8000dfc <SD_disk_read+0xb0>
 8000db8:	2300      	movs	r3, #0
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	e01e      	b.n	8000dfc <SD_disk_read+0xb0>
    }
    else
    {
        /* READ_MULTIPLE_BLOCK */
        if (SD_SendCmd(CMD18, sector) == 0)
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	2052      	movs	r0, #82	@ 0x52
 8000dc2:	f7ff fe6d 	bl	8000aa0 <SD_SendCmd>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d117      	bne.n	8000dfc <SD_disk_read+0xb0>
        {
            do {
                if (!SD_RxDataBlock(buff, 512)) break;
 8000dcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd0:	68b8      	ldr	r0, [r7, #8]
 8000dd2:	f7ff fde5 	bl	80009a0 <SD_RxDataBlock>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00a      	beq.n	8000df2 <SD_disk_read+0xa6>
                buff += 512;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000de2:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d1ed      	bne.n	8000dcc <SD_disk_read+0x80>
 8000df0:	e000      	b.n	8000df4 <SD_disk_read+0xa8>
                if (!SD_RxDataBlock(buff, 512)) break;
 8000df2:	bf00      	nop

            /* STOP_TRANSMISSION */
            SD_SendCmd(CMD12, 0);
 8000df4:	2100      	movs	r1, #0
 8000df6:	204c      	movs	r0, #76	@ 0x4c
 8000df8:	f7ff fe52 	bl	8000aa0 <SD_SendCmd>
        }
    }

    /* Idle */
    DESELECT();
 8000dfc:	f7ff fcf0 	bl	80007e0 <DESELECT>
    SPI_RxByte();
 8000e00:	f7ff fd30 	bl	8000864 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	bf14      	ite	ne
 8000e0a:	2301      	movne	r3, #1
 8000e0c:	2300      	moveq	r3, #0
 8000e0e:	b2db      	uxtb	r3, r3
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3710      	adds	r7, #16
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	200000dc 	.word	0x200000dc

08000e20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	73fb      	strb	r3, [r7, #15]
    /* pdrv should be 0 */
    if (pdrv || !count) return RES_PARERR;
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d102      	bne.n	8000e3c <SD_disk_write+0x1c>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <SD_disk_write+0x20>
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	e06b      	b.n	8000f18 <SD_disk_write+0xf8>

    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e40:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <SD_disk_write+0x100>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SD_disk_write+0x32>
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e062      	b.n	8000f18 <SD_disk_write+0xf8>

    /* write protection */
    if (Stat & STA_PROTECT) return RES_WRPRT;
 8000e52:	4b33      	ldr	r3, [pc, #204]	@ (8000f20 <SD_disk_write+0x100>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f003 0304 	and.w	r3, r3, #4
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SD_disk_write+0x44>
 8000e60:	2302      	movs	r3, #2
 8000e62:	e059      	b.n	8000f18 <SD_disk_write+0xf8>

    /* convert to byte address */
    if (!(CardType & CT_BLOCK)) sector *= 512;
 8000e64:	4b2f      	ldr	r3, [pc, #188]	@ (8000f24 <SD_disk_write+0x104>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d102      	bne.n	8000e76 <SD_disk_write+0x56>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	025b      	lsls	r3, r3, #9
 8000e74:	607b      	str	r3, [r7, #4]

    SELECT();
 8000e76:	f7ff fca5 	bl	80007c4 <SELECT>

    if (count == 1)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d110      	bne.n	8000ea2 <SD_disk_write+0x82>
    {
        /* WRITE_BLOCK */
        if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000e80:	6879      	ldr	r1, [r7, #4]
 8000e82:	2058      	movs	r0, #88	@ 0x58
 8000e84:	f7ff fe0c 	bl	8000aa0 <SD_SendCmd>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d13a      	bne.n	8000f04 <SD_disk_write+0xe4>
 8000e8e:	21fe      	movs	r1, #254	@ 0xfe
 8000e90:	68b8      	ldr	r0, [r7, #8]
 8000e92:	f7ff fdb5 	bl	8000a00 <SD_TxDataBlock>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d033      	beq.n	8000f04 <SD_disk_write+0xe4>
            count = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	603b      	str	r3, [r7, #0]
 8000ea0:	e030      	b.n	8000f04 <SD_disk_write+0xe4>
    }
    else
    {
        /* WRITE_MULTIPLE_BLOCK */
        if (CardType & CT_SD1)
 8000ea2:	4b20      	ldr	r3, [pc, #128]	@ (8000f24 <SD_disk_write+0x104>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d007      	beq.n	8000ebe <SD_disk_write+0x9e>
        {
            SD_SendCmd(CMD55, 0);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2077      	movs	r0, #119	@ 0x77
 8000eb2:	f7ff fdf5 	bl	8000aa0 <SD_SendCmd>
            SD_SendCmd(CMD23, count); /* ACMD23 */
 8000eb6:	6839      	ldr	r1, [r7, #0]
 8000eb8:	2057      	movs	r0, #87	@ 0x57
 8000eba:	f7ff fdf1 	bl	8000aa0 <SD_SendCmd>
        }

        if (SD_SendCmd(CMD25, sector) == 0)
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	2059      	movs	r0, #89	@ 0x59
 8000ec2:	f7ff fded 	bl	8000aa0 <SD_SendCmd>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d11b      	bne.n	8000f04 <SD_disk_write+0xe4>
        {
            do {
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ecc:	21fc      	movs	r1, #252	@ 0xfc
 8000ece:	68b8      	ldr	r0, [r7, #8]
 8000ed0:	f7ff fd96 	bl	8000a00 <SD_TxDataBlock>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00a      	beq.n	8000ef0 <SD_disk_write+0xd0>
                buff += 512;
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ee0:	60bb      	str	r3, [r7, #8]
            } while (--count);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1ee      	bne.n	8000ecc <SD_disk_write+0xac>
 8000eee:	e000      	b.n	8000ef2 <SD_disk_write+0xd2>
                if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ef0:	bf00      	nop

            /* STOP_TRAN token */
            if(!SD_TxDataBlock(0, 0xFD))
 8000ef2:	21fd      	movs	r1, #253	@ 0xfd
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fd83 	bl	8000a00 <SD_TxDataBlock>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <SD_disk_write+0xe4>
            {
                count = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	603b      	str	r3, [r7, #0]
            }
        }
    }

    /* Idle */
    DESELECT();
 8000f04:	f7ff fc6c 	bl	80007e0 <DESELECT>
    SPI_RxByte();
 8000f08:	f7ff fcac 	bl	8000864 <SPI_RxByte>

    return count ? RES_ERROR : RES_OK;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bf14      	ite	ne
 8000f12:	2301      	movne	r3, #1
 8000f14:	2300      	moveq	r3, #0
 8000f16:	b2db      	uxtb	r3, r3
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000000 	.word	0x20000000
 8000f24:	200000dc 	.word	0x200000dc

08000f28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000f28:	b590      	push	{r4, r7, lr}
 8000f2a:	b08b      	sub	sp, #44	@ 0x2c
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	603a      	str	r2, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
 8000f34:	460b      	mov	r3, r1
 8000f36:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    uint8_t n, csd[16], *ptr = buff;
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	623b      	str	r3, [r7, #32]

    /* pdrv should be 0 */
    if (drv) return RES_PARERR;
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SD_disk_ioctl+0x1e>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e118      	b.n	8001178 <SD_disk_ioctl+0x250>
    res = RES_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (ctrl == CTRL_POWER)
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	d124      	bne.n	8000f9c <SD_disk_ioctl+0x74>
    {
        switch (*ptr)
 8000f52:	6a3b      	ldr	r3, [r7, #32]
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d012      	beq.n	8000f80 <SD_disk_ioctl+0x58>
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	dc1a      	bgt.n	8000f94 <SD_disk_ioctl+0x6c>
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d002      	beq.n	8000f68 <SD_disk_ioctl+0x40>
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d006      	beq.n	8000f74 <SD_disk_ioctl+0x4c>
 8000f66:	e015      	b.n	8000f94 <SD_disk_ioctl+0x6c>
        {
        case 0:
            SD_PowerOff();      /* Power Off */
 8000f68:	f7ff fd02 	bl	8000970 <SD_PowerOff>
            res = RES_OK;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000f72:	e0ff      	b.n	8001174 <SD_disk_ioctl+0x24c>
        case 1:
            SD_PowerOn();       /* Power On */
 8000f74:	f7ff fcba 	bl	80008ec <SD_PowerOn>
            res = RES_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000f7e:	e0f9      	b.n	8001174 <SD_disk_ioctl+0x24c>
        case 2:
            *(ptr + 1) = SD_CheckPower();
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	1c5c      	adds	r4, r3, #1
 8000f84:	f7ff fd00 	bl	8000988 <SD_CheckPower>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	7023      	strb	r3, [r4, #0]
            res = RES_OK;       /* Power Check */
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8000f92:	e0ef      	b.n	8001174 <SD_disk_ioctl+0x24c>
        default:
            res = RES_PARERR;
 8000f94:	2304      	movs	r3, #4
 8000f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f9a:	e0eb      	b.n	8001174 <SD_disk_ioctl+0x24c>
        }
    }
    else
    {
        /* no disk */
        if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f9c:	4b78      	ldr	r3, [pc, #480]	@ (8001180 <SD_disk_ioctl+0x258>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SD_disk_ioctl+0x86>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e0e4      	b.n	8001178 <SD_disk_ioctl+0x250>

        SELECT();
 8000fae:	f7ff fc09 	bl	80007c4 <SELECT>

        switch (ctrl)
 8000fb2:	79bb      	ldrb	r3, [r7, #6]
 8000fb4:	2b0d      	cmp	r3, #13
 8000fb6:	f200 80cc 	bhi.w	8001152 <SD_disk_ioctl+0x22a>
 8000fba:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc0 <SD_disk_ioctl+0x98>)
 8000fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc0:	080010bb 	.word	0x080010bb
 8000fc4:	08000ff9 	.word	0x08000ff9
 8000fc8:	080010ab 	.word	0x080010ab
 8000fcc:	08001153 	.word	0x08001153
 8000fd0:	08001153 	.word	0x08001153
 8000fd4:	08001153 	.word	0x08001153
 8000fd8:	08001153 	.word	0x08001153
 8000fdc:	08001153 	.word	0x08001153
 8000fe0:	08001153 	.word	0x08001153
 8000fe4:	08001153 	.word	0x08001153
 8000fe8:	08001153 	.word	0x08001153
 8000fec:	080010cd 	.word	0x080010cd
 8000ff0:	080010f1 	.word	0x080010f1
 8000ff4:	08001115 	.word	0x08001115
        {
        case GET_SECTOR_COUNT:
            /* SEND_CSD */
            if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2049      	movs	r0, #73	@ 0x49
 8000ffc:	f7ff fd50 	bl	8000aa0 <SD_SendCmd>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	f040 80a9 	bne.w	800115a <SD_disk_ioctl+0x232>
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	2110      	movs	r1, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fcc6 	bl	80009a0 <SD_RxDataBlock>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 809f 	beq.w	800115a <SD_disk_ioctl+0x232>
            {
                if ((csd[0] >> 6) == 1) /* SDC V2 */
 800101c:	7a3b      	ldrb	r3, [r7, #8]
 800101e:	099b      	lsrs	r3, r3, #6
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b01      	cmp	r3, #1
 8001024:	d10f      	bne.n	8001046 <SD_disk_ioctl+0x11e>
                {
                    // FIX 5: SDv2 CSD 파싱 및 용량 계산 로직 수정
                    // 기존 로직은 C_SIZE 필드를 일부만 사용하여 대용량 카드에서 용량을 잘못 계산합니다.
                    DWORD c_size;
                    c_size = (DWORD)(csd[7] & 0x3F) << 16 | (WORD)csd[8] << 8 | csd[9];
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	041b      	lsls	r3, r3, #16
 800102a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800102e:	7c3b      	ldrb	r3, [r7, #16]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	4313      	orrs	r3, r2
 8001034:	7c7a      	ldrb	r2, [r7, #17]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
                    *(DWORD*)buff = (c_size + 1) << 10;
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	3301      	adds	r3, #1
 800103e:	029a      	lsls	r2, r3, #10
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	e02d      	b.n	80010a2 <SD_disk_ioctl+0x17a>
                }
                else /* MMC or SDC V1 */
                {
                    WORD csize;
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001046:	7b7b      	ldrb	r3, [r7, #13]
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	b2da      	uxtb	r2, r3
 800104e:	7cbb      	ldrb	r3, [r7, #18]
 8001050:	09db      	lsrs	r3, r3, #7
 8001052:	b2db      	uxtb	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	b2da      	uxtb	r2, r3
 8001058:	7c7b      	ldrb	r3, [r7, #17]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 0306 	and.w	r3, r3, #6
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4413      	add	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3302      	adds	r3, #2
 800106a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                    csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800106e:	7c3b      	ldrb	r3, [r7, #16]
 8001070:	099b      	lsrs	r3, r3, #6
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	b29b      	uxth	r3, r3
 800107c:	4413      	add	r3, r2
 800107e:	b29a      	uxth	r2, r3
 8001080:	7bbb      	ldrb	r3, [r7, #14]
 8001082:	029b      	lsls	r3, r3, #10
 8001084:	b29b      	uxth	r3, r3
 8001086:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800108a:	b29b      	uxth	r3, r3
 800108c:	4413      	add	r3, r2
 800108e:	b29b      	uxth	r3, r3
 8001090:	3301      	adds	r3, #1
 8001092:	83fb      	strh	r3, [r7, #30]
                    *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001094:	8bfa      	ldrh	r2, [r7, #30]
 8001096:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800109a:	3b09      	subs	r3, #9
 800109c:	409a      	lsls	r2, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	601a      	str	r2, [r3, #0]
                }
                res = RES_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80010a8:	e057      	b.n	800115a <SD_disk_ioctl+0x232>
        case GET_SECTOR_SIZE:
            *(WORD*) buff = 512;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b0:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 80010b2:	2300      	movs	r3, #0
 80010b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80010b8:	e058      	b.n	800116c <SD_disk_ioctl+0x244>
        case CTRL_SYNC:
            if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80010ba:	f7ff fbfd 	bl	80008b8 <SD_ReadyWait>
 80010be:	4603      	mov	r3, r0
 80010c0:	2bff      	cmp	r3, #255	@ 0xff
 80010c2:	d14c      	bne.n	800115e <SD_disk_ioctl+0x236>
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80010ca:	e048      	b.n	800115e <SD_disk_ioctl+0x236>
        case MMC_GET_CSD:
            /* SEND_CSD */
            if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80010cc:	2100      	movs	r1, #0
 80010ce:	2049      	movs	r0, #73	@ 0x49
 80010d0:	f7ff fce6 	bl	8000aa0 <SD_SendCmd>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d143      	bne.n	8001162 <SD_disk_ioctl+0x23a>
 80010da:	2110      	movs	r1, #16
 80010dc:	6a38      	ldr	r0, [r7, #32]
 80010de:	f7ff fc5f 	bl	80009a0 <SD_RxDataBlock>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d03c      	beq.n	8001162 <SD_disk_ioctl+0x23a>
 80010e8:	2300      	movs	r3, #0
 80010ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 80010ee:	e038      	b.n	8001162 <SD_disk_ioctl+0x23a>
        case MMC_GET_CID:
            /* SEND_CID */
            if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80010f0:	2100      	movs	r1, #0
 80010f2:	204a      	movs	r0, #74	@ 0x4a
 80010f4:	f7ff fcd4 	bl	8000aa0 <SD_SendCmd>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d133      	bne.n	8001166 <SD_disk_ioctl+0x23e>
 80010fe:	2110      	movs	r1, #16
 8001100:	6a38      	ldr	r0, [r7, #32]
 8001102:	f7ff fc4d 	bl	80009a0 <SD_RxDataBlock>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d02c      	beq.n	8001166 <SD_disk_ioctl+0x23e>
 800110c:	2300      	movs	r3, #0
 800110e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8001112:	e028      	b.n	8001166 <SD_disk_ioctl+0x23e>
        case MMC_GET_OCR:
            /* READ_OCR */
            if (SD_SendCmd(CMD58, 0) == 0)
 8001114:	2100      	movs	r1, #0
 8001116:	207a      	movs	r0, #122	@ 0x7a
 8001118:	f7ff fcc2 	bl	8000aa0 <SD_SendCmd>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d123      	bne.n	800116a <SD_disk_ioctl+0x242>
            {
                for (n = 0; n < 4; n++)
 8001122:	2300      	movs	r3, #0
 8001124:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001128:	e00b      	b.n	8001142 <SD_disk_ioctl+0x21a>
                {
                    *ptr++ = SPI_RxByte();
 800112a:	6a3c      	ldr	r4, [r7, #32]
 800112c:	1c63      	adds	r3, r4, #1
 800112e:	623b      	str	r3, [r7, #32]
 8001130:	f7ff fb98 	bl	8000864 <SPI_RxByte>
 8001134:	4603      	mov	r3, r0
 8001136:	7023      	strb	r3, [r4, #0]
                for (n = 0; n < 4; n++)
 8001138:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800113c:	3301      	adds	r3, #1
 800113e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001142:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001146:	2b03      	cmp	r3, #3
 8001148:	d9ef      	bls.n	800112a <SD_disk_ioctl+0x202>
                }
                res = RES_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            // FIX 4: 누락된 break 추가
            // break가 없어 default case로 넘어가 res값이 RES_PARERR로 덮어쓰이는 문제를 수정합니다.
            break;
 8001150:	e00b      	b.n	800116a <SD_disk_ioctl+0x242>
        default:
            res = RES_PARERR;
 8001152:	2304      	movs	r3, #4
 8001154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001158:	e008      	b.n	800116c <SD_disk_ioctl+0x244>
            break;
 800115a:	bf00      	nop
 800115c:	e006      	b.n	800116c <SD_disk_ioctl+0x244>
            break;
 800115e:	bf00      	nop
 8001160:	e004      	b.n	800116c <SD_disk_ioctl+0x244>
            break;
 8001162:	bf00      	nop
 8001164:	e002      	b.n	800116c <SD_disk_ioctl+0x244>
            break;
 8001166:	bf00      	nop
 8001168:	e000      	b.n	800116c <SD_disk_ioctl+0x244>
            break;
 800116a:	bf00      	nop
        }

        DESELECT();
 800116c:	f7ff fb38 	bl	80007e0 <DESELECT>
        SPI_RxByte();
 8001170:	f7ff fb78 	bl	8000864 <SPI_RxByte>
    }

    return res;
 8001174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001178:	4618      	mov	r0, r3
 800117a:	372c      	adds	r7, #44	@ 0x2c
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	20000000 	.word	0x20000000

08001184 <LCD_Init>:
extern const uint16_t bigFont[1520];

//***************************************************************************************************************************************
// Función para inicializar LCD
//***************************************************************************************************************************************
void LCD_Init(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

	//****************************************
	// Secuencia de Inicialización
	//****************************************
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8001188:	2201      	movs	r2, #1
 800118a:	2101      	movs	r1, #1
 800118c:	4878      	ldr	r0, [pc, #480]	@ (8001370 <LCD_Init+0x1ec>)
 800118e:	f006 f99d 	bl	80074cc <HAL_GPIO_WritePin>
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin,
 8001192:	2201      	movs	r2, #1
 8001194:	2113      	movs	r1, #19
 8001196:	4877      	ldr	r0, [pc, #476]	@ (8001374 <LCD_Init+0x1f0>)
 8001198:	f006 f998 	bl	80074cc <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2102      	movs	r1, #2
 80011a0:	4875      	ldr	r0, [pc, #468]	@ (8001378 <LCD_Init+0x1f4>)
 80011a2:	f006 f993 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80011a6:	2005      	movs	r0, #5
 80011a8:	f005 fe28 	bl	8006dfc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2102      	movs	r1, #2
 80011b0:	4871      	ldr	r0, [pc, #452]	@ (8001378 <LCD_Init+0x1f4>)
 80011b2:	f006 f98b 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80011b6:	2014      	movs	r0, #20
 80011b8:	f005 fe20 	bl	8006dfc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2102      	movs	r1, #2
 80011c0:	486d      	ldr	r0, [pc, #436]	@ (8001378 <LCD_Init+0x1f4>)
 80011c2:	f006 f983 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80011c6:	2096      	movs	r0, #150	@ 0x96
 80011c8:	f005 fe18 	bl	8006dfc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2101      	movs	r1, #1
 80011d0:	4867      	ldr	r0, [pc, #412]	@ (8001370 <LCD_Init+0x1ec>)
 80011d2:	f006 f97b 	bl	80074cc <HAL_GPIO_WritePin>

	//****************************************
	LCD_CMD(0xE9);  // SETPANELRELATED
 80011d6:	20e9      	movs	r0, #233	@ 0xe9
 80011d8:	f000 f8d0 	bl	800137c <LCD_CMD>
	LCD_DATA(0x20);
 80011dc:	2020      	movs	r0, #32
 80011de:	f000 f973 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x11); // Exit Sleep SLEEP OUT (SLPOUT)
 80011e2:	2011      	movs	r0, #17
 80011e4:	f000 f8ca 	bl	800137c <LCD_CMD>
	HAL_Delay(100);
 80011e8:	2064      	movs	r0, #100	@ 0x64
 80011ea:	f005 fe07 	bl	8006dfc <HAL_Delay>
	//****************************************
	LCD_CMD(0xD1);    // (SETVCOM)
 80011ee:	20d1      	movs	r0, #209	@ 0xd1
 80011f0:	f000 f8c4 	bl	800137c <LCD_CMD>
	LCD_DATA(0x00);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f967 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x71);
 80011fa:	2071      	movs	r0, #113	@ 0x71
 80011fc:	f000 f964 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x19);
 8001200:	2019      	movs	r0, #25
 8001202:	f000 f961 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD0);   // (SETPOWER)
 8001206:	20d0      	movs	r0, #208	@ 0xd0
 8001208:	f000 f8b8 	bl	800137c <LCD_CMD>
	LCD_DATA(0x07);
 800120c:	2007      	movs	r0, #7
 800120e:	f000 f95b 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x01);
 8001212:	2001      	movs	r0, #1
 8001214:	f000 f958 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x08);
 8001218:	2008      	movs	r0, #8
 800121a:	f000 f955 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x36);  // (MEMORYACCESS)
 800121e:	2036      	movs	r0, #54	@ 0x36
 8001220:	f000 f8ac 	bl	800137c <LCD_CMD>
	LCD_DATA(0x40 | 0x80 | 0x20 | 0x08); // LCD_DATA(0x19);
 8001224:	20e8      	movs	r0, #232	@ 0xe8
 8001226:	f000 f94f 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x3A); // Set_pixel_format (PIXELFORMAT)
 800122a:	203a      	movs	r0, #58	@ 0x3a
 800122c:	f000 f8a6 	bl	800137c <LCD_CMD>
	LCD_DATA(0x05); // color setings, 05h - 16bit pixel, 11h - 3bit pixel
 8001230:	2005      	movs	r0, #5
 8001232:	f000 f949 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC1);    // (POWERCONTROL2)
 8001236:	20c1      	movs	r0, #193	@ 0xc1
 8001238:	f000 f8a0 	bl	800137c <LCD_CMD>
	LCD_DATA(0x10);
 800123c:	2010      	movs	r0, #16
 800123e:	f000 f943 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x10);
 8001242:	2010      	movs	r0, #16
 8001244:	f000 f940 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x02);
 8001248:	2002      	movs	r0, #2
 800124a:	f000 f93d 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x02);
 800124e:	2002      	movs	r0, #2
 8001250:	f000 f93a 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC0); // Set Default Gamma (POWERCONTROL1)
 8001254:	20c0      	movs	r0, #192	@ 0xc0
 8001256:	f000 f891 	bl	800137c <LCD_CMD>
	LCD_DATA(0x00);
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f934 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x35);
 8001260:	2035      	movs	r0, #53	@ 0x35
 8001262:	f000 f931 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x00);
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f92e 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x00);
 800126c:	2000      	movs	r0, #0
 800126e:	f000 f92b 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x01);
 8001272:	2001      	movs	r0, #1
 8001274:	f000 f928 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x02);
 8001278:	2002      	movs	r0, #2
 800127a:	f000 f925 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC5); // Set Frame Rate (VCOMCONTROL1)
 800127e:	20c5      	movs	r0, #197	@ 0xc5
 8001280:	f000 f87c 	bl	800137c <LCD_CMD>
	LCD_DATA(0x04); // 72Hz
 8001284:	2004      	movs	r0, #4
 8001286:	f000 f91f 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xD2); // Power Settings  (SETPWRNORMAL)
 800128a:	20d2      	movs	r0, #210	@ 0xd2
 800128c:	f000 f876 	bl	800137c <LCD_CMD>
	LCD_DATA(0x01);
 8001290:	2001      	movs	r0, #1
 8001292:	f000 f919 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x44);
 8001296:	2044      	movs	r0, #68	@ 0x44
 8001298:	f000 f916 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0xC8); //Set Gamma  (GAMMASET)
 800129c:	20c8      	movs	r0, #200	@ 0xc8
 800129e:	f000 f86d 	bl	800137c <LCD_CMD>
	LCD_DATA(0x04);
 80012a2:	2004      	movs	r0, #4
 80012a4:	f000 f910 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x67);
 80012a8:	2067      	movs	r0, #103	@ 0x67
 80012aa:	f000 f90d 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x35);
 80012ae:	2035      	movs	r0, #53	@ 0x35
 80012b0:	f000 f90a 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x04);
 80012b4:	2004      	movs	r0, #4
 80012b6:	f000 f907 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x08);
 80012ba:	2008      	movs	r0, #8
 80012bc:	f000 f904 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x06);
 80012c0:	2006      	movs	r0, #6
 80012c2:	f000 f901 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x24);
 80012c6:	2024      	movs	r0, #36	@ 0x24
 80012c8:	f000 f8fe 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x01);
 80012cc:	2001      	movs	r0, #1
 80012ce:	f000 f8fb 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x37);
 80012d2:	2037      	movs	r0, #55	@ 0x37
 80012d4:	f000 f8f8 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x40);
 80012d8:	2040      	movs	r0, #64	@ 0x40
 80012da:	f000 f8f5 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x03);
 80012de:	2003      	movs	r0, #3
 80012e0:	f000 f8f2 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x10);
 80012e4:	2010      	movs	r0, #16
 80012e6:	f000 f8ef 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x08);
 80012ea:	2008      	movs	r0, #8
 80012ec:	f000 f8ec 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x80);
 80012f0:	2080      	movs	r0, #128	@ 0x80
 80012f2:	f000 f8e9 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x00);
 80012f6:	2000      	movs	r0, #0
 80012f8:	f000 f8e6 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2A); // Set_column_address 320px (CASET)
 80012fc:	202a      	movs	r0, #42	@ 0x2a
 80012fe:	f000 f83d 	bl	800137c <LCD_CMD>
	LCD_DATA(0x00);
 8001302:	2000      	movs	r0, #0
 8001304:	f000 f8e0 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x00);
 8001308:	2000      	movs	r0, #0
 800130a:	f000 f8dd 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x01);
 800130e:	2001      	movs	r0, #1
 8001310:	f000 f8da 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x3F);
 8001314:	203f      	movs	r0, #63	@ 0x3f
 8001316:	f000 f8d7 	bl	80014c8 <LCD_DATA>
	//****************************************
	LCD_CMD(0x2B); // Set_page_address 480px (PASET)
 800131a:	202b      	movs	r0, #43	@ 0x2b
 800131c:	f000 f82e 	bl	800137c <LCD_CMD>
	LCD_DATA(0x00);
 8001320:	2000      	movs	r0, #0
 8001322:	f000 f8d1 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x00);
 8001326:	2000      	movs	r0, #0
 8001328:	f000 f8ce 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0x01);
 800132c:	2001      	movs	r0, #1
 800132e:	f000 f8cb 	bl	80014c8 <LCD_DATA>
	LCD_DATA(0xE0);
 8001332:	20e0      	movs	r0, #224	@ 0xe0
 8001334:	f000 f8c8 	bl	80014c8 <LCD_DATA>
	//  LCD_DATA(0x8F);
	LCD_CMD(0x29); //display on
 8001338:	2029      	movs	r0, #41	@ 0x29
 800133a:	f000 f81f 	bl	800137c <LCD_CMD>
	LCD_CMD(0x2C); //display on
 800133e:	202c      	movs	r0, #44	@ 0x2c
 8001340:	f000 f81c 	bl	800137c <LCD_CMD>

	LCD_CMD(ILI9341_INVOFF); //Invert Off
 8001344:	2020      	movs	r0, #32
 8001346:	f000 f819 	bl	800137c <LCD_CMD>
	HAL_Delay(120);
 800134a:	2078      	movs	r0, #120	@ 0x78
 800134c:	f005 fd56 	bl	8006dfc <HAL_Delay>
	LCD_CMD(ILI9341_SLPOUT);    //Exit Sleep
 8001350:	2011      	movs	r0, #17
 8001352:	f000 f813 	bl	800137c <LCD_CMD>
	HAL_Delay(120);
 8001356:	2078      	movs	r0, #120	@ 0x78
 8001358:	f005 fd50 	bl	8006dfc <HAL_Delay>
	LCD_CMD(ILI9341_DISPON);    //Display on
 800135c:	2029      	movs	r0, #41	@ 0x29
 800135e:	f000 f80d 	bl	800137c <LCD_CMD>
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin, GPIO_PIN_SET);
 8001362:	2201      	movs	r2, #1
 8001364:	2101      	movs	r1, #1
 8001366:	4802      	ldr	r0, [pc, #8]	@ (8001370 <LCD_Init+0x1ec>)
 8001368:	f006 f8b0 	bl	80074cc <HAL_GPIO_WritePin>
}
 800136c:	bf00      	nop
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40020400 	.word	0x40020400
 8001374:	40020000 	.word	0x40020000
 8001378:	40020800 	.word	0x40020800

0800137c <LCD_CMD>:
//***************************************************************************************************************************************
// Función para enviar comandos a la LCD - parámetro (comando)
//***************************************************************************************************************************************
void LCD_CMD(uint8_t cmd) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2110      	movs	r1, #16
 800138a:	484c      	ldr	r0, [pc, #304]	@ (80014bc <LCD_CMD+0x140>)
 800138c:	f006 f89e 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	2102      	movs	r1, #2
 8001394:	4849      	ldr	r0, [pc, #292]	@ (80014bc <LCD_CMD+0x140>)
 8001396:	f006 f899 	bl	80074cc <HAL_GPIO_WritePin>

	if ((cmd & (1 << 0)) == 1) {
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <LCD_CMD+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013aa:	4844      	ldr	r0, [pc, #272]	@ (80014bc <LCD_CMD+0x140>)
 80013ac:	f006 f88e 	bl	80074cc <HAL_GPIO_WritePin>
 80013b0:	e005      	b.n	80013be <LCD_CMD+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013b8:	4840      	ldr	r0, [pc, #256]	@ (80014bc <LCD_CMD+0x140>)
 80013ba:	f006 f887 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 1)) == 0x02) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <LCD_CMD+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	2180      	movs	r1, #128	@ 0x80
 80013cc:	483c      	ldr	r0, [pc, #240]	@ (80014c0 <LCD_CMD+0x144>)
 80013ce:	f006 f87d 	bl	80074cc <HAL_GPIO_WritePin>
 80013d2:	e004      	b.n	80013de <LCD_CMD+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	@ 0x80
 80013d8:	4839      	ldr	r0, [pc, #228]	@ (80014c0 <LCD_CMD+0x144>)
 80013da:	f006 f877 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 2)) == 0x04) {
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <LCD_CMD+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 80013e8:	2201      	movs	r2, #1
 80013ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ee:	4833      	ldr	r0, [pc, #204]	@ (80014bc <LCD_CMD+0x140>)
 80013f0:	f006 f86c 	bl	80074cc <HAL_GPIO_WritePin>
 80013f4:	e005      	b.n	8001402 <LCD_CMD+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013fc:	482f      	ldr	r0, [pc, #188]	@ (80014bc <LCD_CMD+0x140>)
 80013fe:	f006 f865 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 3)) == 0x08) {
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <LCD_CMD+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	2108      	movs	r1, #8
 8001410:	482c      	ldr	r0, [pc, #176]	@ (80014c4 <LCD_CMD+0x148>)
 8001412:	f006 f85b 	bl	80074cc <HAL_GPIO_WritePin>
 8001416:	e004      	b.n	8001422 <LCD_CMD+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2108      	movs	r1, #8
 800141c:	4829      	ldr	r0, [pc, #164]	@ (80014c4 <LCD_CMD+0x148>)
 800141e:	f006 f855 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 4)) == 0x10) {
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 0310 	and.w	r3, r3, #16
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <LCD_CMD+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2120      	movs	r1, #32
 8001430:	4824      	ldr	r0, [pc, #144]	@ (80014c4 <LCD_CMD+0x148>)
 8001432:	f006 f84b 	bl	80074cc <HAL_GPIO_WritePin>
 8001436:	e004      	b.n	8001442 <LCD_CMD+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001438:	2200      	movs	r2, #0
 800143a:	2120      	movs	r1, #32
 800143c:	4821      	ldr	r0, [pc, #132]	@ (80014c4 <LCD_CMD+0x148>)
 800143e:	f006 f845 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 5)) == 0x20) {
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <LCD_CMD+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 800144c:	2201      	movs	r2, #1
 800144e:	2110      	movs	r1, #16
 8001450:	481c      	ldr	r0, [pc, #112]	@ (80014c4 <LCD_CMD+0x148>)
 8001452:	f006 f83b 	bl	80074cc <HAL_GPIO_WritePin>
 8001456:	e004      	b.n	8001462 <LCD_CMD+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2110      	movs	r1, #16
 800145c:	4819      	ldr	r0, [pc, #100]	@ (80014c4 <LCD_CMD+0x148>)
 800145e:	f006 f835 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 6)) == 0x40) {
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001468:	2b00      	cmp	r3, #0
 800146a:	d006      	beq.n	800147a <LCD_CMD+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001472:	4814      	ldr	r0, [pc, #80]	@ (80014c4 <LCD_CMD+0x148>)
 8001474:	f006 f82a 	bl	80074cc <HAL_GPIO_WritePin>
 8001478:	e005      	b.n	8001486 <LCD_CMD+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001480:	4810      	ldr	r0, [pc, #64]	@ (80014c4 <LCD_CMD+0x148>)
 8001482:	f006 f823 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((cmd & (1 << 7)) == 0x80) {
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	2b00      	cmp	r3, #0
 800148c:	da06      	bge.n	800149c <LCD_CMD+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001494:	4809      	ldr	r0, [pc, #36]	@ (80014bc <LCD_CMD+0x140>)
 8001496:	f006 f819 	bl	80074cc <HAL_GPIO_WritePin>
 800149a:	e005      	b.n	80014a8 <LCD_CMD+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <LCD_CMD+0x140>)
 80014a4:	f006 f812 	bl	80074cc <HAL_GPIO_WritePin>
	}
	//GPIO_PortB_DATA_R = cmd;
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2102      	movs	r1, #2
 80014ac:	4803      	ldr	r0, [pc, #12]	@ (80014bc <LCD_CMD+0x140>)
 80014ae:	f006 f80d 	bl	80074cc <HAL_GPIO_WritePin>

}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020400 	.word	0x40020400

080014c8 <LCD_DATA>:
//***************************************************************************************************************************************
// Función para enviar datos a la LCD - parámetro (dato)
//***************************************************************************************************************************************
void LCD_DATA(uint8_t data) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
	//HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2110      	movs	r1, #16
 80014d6:	484c      	ldr	r0, [pc, #304]	@ (8001608 <LCD_DATA+0x140>)
 80014d8:	f005 fff8 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2102      	movs	r1, #2
 80014e0:	4849      	ldr	r0, [pc, #292]	@ (8001608 <LCD_DATA+0x140>)
 80014e2:	f005 fff3 	bl	80074cc <HAL_GPIO_WritePin>
	if ((data & (1 << 0)) == 1) {
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <LCD_DATA+0x36>
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f6:	4844      	ldr	r0, [pc, #272]	@ (8001608 <LCD_DATA+0x140>)
 80014f8:	f005 ffe8 	bl	80074cc <HAL_GPIO_WritePin>
 80014fc:	e005      	b.n	800150a <LCD_DATA+0x42>
	} else {
		HAL_GPIO_WritePin(LCD_D0_GPIO_Port, LCD_D0_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001504:	4840      	ldr	r0, [pc, #256]	@ (8001608 <LCD_DATA+0x140>)
 8001506:	f005 ffe1 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 1)) == 0x02) {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <LCD_DATA+0x58>
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_SET);
 8001514:	2201      	movs	r2, #1
 8001516:	2180      	movs	r1, #128	@ 0x80
 8001518:	483c      	ldr	r0, [pc, #240]	@ (800160c <LCD_DATA+0x144>)
 800151a:	f005 ffd7 	bl	80074cc <HAL_GPIO_WritePin>
 800151e:	e004      	b.n	800152a <LCD_DATA+0x62>
	} else {
		HAL_GPIO_WritePin(LCD_D1_GPIO_Port, LCD_D1_Pin, GPIO_PIN_RESET);
 8001520:	2200      	movs	r2, #0
 8001522:	2180      	movs	r1, #128	@ 0x80
 8001524:	4839      	ldr	r0, [pc, #228]	@ (800160c <LCD_DATA+0x144>)
 8001526:	f005 ffd1 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 2)) == 0x04) {
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <LCD_DATA+0x7a>
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_SET);
 8001534:	2201      	movs	r2, #1
 8001536:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800153a:	4833      	ldr	r0, [pc, #204]	@ (8001608 <LCD_DATA+0x140>)
 800153c:	f005 ffc6 	bl	80074cc <HAL_GPIO_WritePin>
 8001540:	e005      	b.n	800154e <LCD_DATA+0x86>
	} else {
		HAL_GPIO_WritePin(LCD_D2_GPIO_Port, LCD_D2_Pin, GPIO_PIN_RESET);
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001548:	482f      	ldr	r0, [pc, #188]	@ (8001608 <LCD_DATA+0x140>)
 800154a:	f005 ffbf 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 3)) == 0x08) {
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	f003 0308 	and.w	r3, r3, #8
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <LCD_DATA+0x9c>
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2108      	movs	r1, #8
 800155c:	482c      	ldr	r0, [pc, #176]	@ (8001610 <LCD_DATA+0x148>)
 800155e:	f005 ffb5 	bl	80074cc <HAL_GPIO_WritePin>
 8001562:	e004      	b.n	800156e <LCD_DATA+0xa6>
	} else {
		HAL_GPIO_WritePin(LCD_D3_GPIO_Port, LCD_D3_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2108      	movs	r1, #8
 8001568:	4829      	ldr	r0, [pc, #164]	@ (8001610 <LCD_DATA+0x148>)
 800156a:	f005 ffaf 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 4)) == 0x10) {
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	f003 0310 	and.w	r3, r3, #16
 8001574:	2b00      	cmp	r3, #0
 8001576:	d005      	beq.n	8001584 <LCD_DATA+0xbc>
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2120      	movs	r1, #32
 800157c:	4824      	ldr	r0, [pc, #144]	@ (8001610 <LCD_DATA+0x148>)
 800157e:	f005 ffa5 	bl	80074cc <HAL_GPIO_WritePin>
 8001582:	e004      	b.n	800158e <LCD_DATA+0xc6>
	} else {
		HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2120      	movs	r1, #32
 8001588:	4821      	ldr	r0, [pc, #132]	@ (8001610 <LCD_DATA+0x148>)
 800158a:	f005 ff9f 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 5)) == 0x20) {
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <LCD_DATA+0xdc>
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	2110      	movs	r1, #16
 800159c:	481c      	ldr	r0, [pc, #112]	@ (8001610 <LCD_DATA+0x148>)
 800159e:	f005 ff95 	bl	80074cc <HAL_GPIO_WritePin>
 80015a2:	e004      	b.n	80015ae <LCD_DATA+0xe6>
	} else {
		HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2110      	movs	r1, #16
 80015a8:	4819      	ldr	r0, [pc, #100]	@ (8001610 <LCD_DATA+0x148>)
 80015aa:	f005 ff8f 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 6)) == 0x40) {
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <LCD_DATA+0xfe>
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015be:	4814      	ldr	r0, [pc, #80]	@ (8001610 <LCD_DATA+0x148>)
 80015c0:	f005 ff84 	bl	80074cc <HAL_GPIO_WritePin>
 80015c4:	e005      	b.n	80015d2 <LCD_DATA+0x10a>
	} else {
		HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015cc:	4810      	ldr	r0, [pc, #64]	@ (8001610 <LCD_DATA+0x148>)
 80015ce:	f005 ff7d 	bl	80074cc <HAL_GPIO_WritePin>
	}
	if ((data & (1 << 7)) == 0x80) {
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	da06      	bge.n	80015e8 <LCD_DATA+0x120>
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015e0:	4809      	ldr	r0, [pc, #36]	@ (8001608 <LCD_DATA+0x140>)
 80015e2:	f005 ff73 	bl	80074cc <HAL_GPIO_WritePin>
 80015e6:	e005      	b.n	80015f4 <LCD_DATA+0x12c>
	} else {
		HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015ee:	4806      	ldr	r0, [pc, #24]	@ (8001608 <LCD_DATA+0x140>)
 80015f0:	f005 ff6c 	bl	80074cc <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_WR_GPIO_Port, LCD_WR_Pin, GPIO_PIN_SET);
 80015f4:	2201      	movs	r2, #1
 80015f6:	2102      	movs	r1, #2
 80015f8:	4803      	ldr	r0, [pc, #12]	@ (8001608 <LCD_DATA+0x140>)
 80015fa:	f005 ff67 	bl	80074cc <HAL_GPIO_WritePin>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40020000 	.word	0x40020000
 800160c:	40020800 	.word	0x40020800
 8001610:	40020400 	.word	0x40020400

08001614 <SetWindows>:
//***************************************************************************************************************************************
// Función para definir rango de direcciones de memoria con las cuales se trabajara (se define una ventana)
//***************************************************************************************************************************************
void SetWindows(unsigned int x1, unsigned int y1, unsigned int x2,
		unsigned int y2) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
 8001620:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x2a); // Set_column_address 4 parameters
 8001622:	202a      	movs	r0, #42	@ 0x2a
 8001624:	f7ff feaa 	bl	800137c <LCD_CMD>
	LCD_DATA(x1 >> 8);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	0a1b      	lsrs	r3, r3, #8
 800162c:	b2db      	uxtb	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff ff4a 	bl	80014c8 <LCD_DATA>
	LCD_DATA(x1);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	b2db      	uxtb	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff45 	bl	80014c8 <LCD_DATA>
	LCD_DATA(x2 >> 8);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	b2db      	uxtb	r3, r3
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff ff3f 	bl	80014c8 <LCD_DATA>
	LCD_DATA(x2);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	b2db      	uxtb	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff3a 	bl	80014c8 <LCD_DATA>
	LCD_CMD(0x2b); // Set_page_address 4 parameters
 8001654:	202b      	movs	r0, #43	@ 0x2b
 8001656:	f7ff fe91 	bl	800137c <LCD_CMD>
	LCD_DATA(y1 >> 8);
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	b2db      	uxtb	r3, r3
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff31 	bl	80014c8 <LCD_DATA>
	LCD_DATA(y1);
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ff2c 	bl	80014c8 <LCD_DATA>
	LCD_DATA(y2 >> 8);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	0a1b      	lsrs	r3, r3, #8
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff26 	bl	80014c8 <LCD_DATA>
	LCD_DATA(y2);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff21 	bl	80014c8 <LCD_DATA>
	LCD_CMD(0x2c); // Write_memory_start
 8001686:	202c      	movs	r0, #44	@ 0x2c
 8001688:	f7ff fe78 	bl	800137c <LCD_CMD>
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <LCD_Clear>:
//***************************************************************************************************************************************
// Función para borrar la pantalla - parámetros (color)
//***************************************************************************************************************************************
void LCD_Clear(unsigned int c) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	unsigned int x, y;
	LCD_CMD(0x02c); // write_memory_start
 800169c:	202c      	movs	r0, #44	@ 0x2c
 800169e:	f7ff fe6d 	bl	800137c <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2110      	movs	r1, #16
 80016a6:	481b      	ldr	r0, [pc, #108]	@ (8001714 <LCD_Clear+0x80>)
 80016a8:	f005 ff10 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2101      	movs	r1, #1
 80016b0:	4819      	ldr	r0, [pc, #100]	@ (8001718 <LCD_Clear+0x84>)
 80016b2:	f005 ff0b 	bl	80074cc <HAL_GPIO_WritePin>
	SetWindows(0, 0, 319, 239); // 479, 319);
 80016b6:	23ef      	movs	r3, #239	@ 0xef
 80016b8:	f240 123f 	movw	r2, #319	@ 0x13f
 80016bc:	2100      	movs	r1, #0
 80016be:	2000      	movs	r0, #0
 80016c0:	f7ff ffa8 	bl	8001614 <SetWindows>
	for (x = 0; x < 320; x++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e016      	b.n	80016f8 <LCD_Clear+0x64>
		for (y = 0; y < 240; y++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	e00d      	b.n	80016ec <LCD_Clear+0x58>
			LCD_DATA(c >> 8);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fef6 	bl	80014c8 <LCD_DATA>
			LCD_DATA(c);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fef1 	bl	80014c8 <LCD_DATA>
		for (y = 0; y < 240; y++) {
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	3301      	adds	r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	2bef      	cmp	r3, #239	@ 0xef
 80016f0:	d9ee      	bls.n	80016d0 <LCD_Clear+0x3c>
	for (x = 0; x < 320; x++)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3301      	adds	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80016fe:	d3e4      	bcc.n	80016ca <LCD_Clear+0x36>
		}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2101      	movs	r1, #1
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <LCD_Clear+0x84>)
 8001706:	f005 fee1 	bl	80074cc <HAL_GPIO_WritePin>
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400

0800171c <LCD_Print>:
}
//***************************************************************************************************************************************
// Función para dibujar texto - parámetros ( texto, coordenada x, cordenada y, color, background)
//***************************************************************************************************************************************
void LCD_Print(char *text, int x, int y, int fontSize, int color,
		int background) {
 800171c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001720:	b093      	sub	sp, #76	@ 0x4c
 8001722:	af00      	add	r7, sp, #0
 8001724:	60f8      	str	r0, [r7, #12]
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	466b      	mov	r3, sp
 800172e:	461e      	mov	r6, r3

	int fontXSize;
	int fontYSize;

	if (fontSize == 1) {
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d103      	bne.n	800173e <LCD_Print+0x22>
		fontXSize = fontXSizeSmal;
 8001736:	2308      	movs	r3, #8
 8001738:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeSmal;
 800173a:	230c      	movs	r3, #12
 800173c:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 2) {
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d103      	bne.n	800174c <LCD_Print+0x30>
		fontXSize = fontXSizeBig;
 8001744:	2310      	movs	r3, #16
 8001746:	647b      	str	r3, [r7, #68]	@ 0x44
		fontYSize = fontYSizeBig;
 8001748:	2310      	movs	r3, #16
 800174a:	643b      	str	r3, [r7, #64]	@ 0x40
	}
	if (fontSize == 3) {
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d103      	bne.n	800175a <LCD_Print+0x3e>
			fontXSize = fontXSizeNum;
 8001752:	2320      	movs	r3, #32
 8001754:	647b      	str	r3, [r7, #68]	@ 0x44
			fontYSize = fontYSizeNum;
 8001756:	2332      	movs	r3, #50	@ 0x32
 8001758:	643b      	str	r3, [r7, #64]	@ 0x40
		}

	char charInput;
	int cLength = strlen(text);
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7fe fd58 	bl	8000210 <strlen>
 8001760:	4603      	mov	r3, r0
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
	//Serial.println(cLength, DEC);
	int charDec;
	int c;
	//int charHex;
	char char_array[cLength + 1];
 8001764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	1e4b      	subs	r3, r1, #1
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	460a      	mov	r2, r1
 800176e:	2300      	movs	r3, #0
 8001770:	4690      	mov	r8, r2
 8001772:	4699      	mov	r9, r3
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	f04f 0300 	mov.w	r3, #0
 800177c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001780:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001784:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001788:	460a      	mov	r2, r1
 800178a:	2300      	movs	r3, #0
 800178c:	4614      	mov	r4, r2
 800178e:	461d      	mov	r5, r3
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	00eb      	lsls	r3, r5, #3
 800179a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800179e:	00e2      	lsls	r2, r4, #3
 80017a0:	460b      	mov	r3, r1
 80017a2:	3307      	adds	r3, #7
 80017a4:	08db      	lsrs	r3, r3, #3
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	ebad 0d03 	sub.w	sp, sp, r3
 80017ac:	466b      	mov	r3, sp
 80017ae:	3300      	adds	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
	for(int i = 0; text[i] != '\0'; i++){
 80017b2:	2300      	movs	r3, #0
 80017b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017b6:	e00b      	b.n	80017d0 <LCD_Print+0xb4>
		char_array[i]=text[i];
 80017b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ba:	68fa      	ldr	r2, [r7, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	7819      	ldrb	r1, [r3, #0]
 80017c0:	69fa      	ldr	r2, [r7, #28]
 80017c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c4:	4413      	add	r3, r2
 80017c6:	460a      	mov	r2, r1
 80017c8:	701a      	strb	r2, [r3, #0]
	for(int i = 0; text[i] != '\0'; i++){
 80017ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017cc:	3301      	adds	r3, #1
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ed      	bne.n	80017b8 <LCD_Print+0x9c>
	}

	//text.toCharArray(char_array, cLength + 1);

	for (int i = 0; i < cLength; i++) {
 80017dc:	2300      	movs	r3, #0
 80017de:	637b      	str	r3, [r7, #52]	@ 0x34
 80017e0:	e077      	b.n	80018d2 <LCD_Print+0x1b6>
		charInput = char_array[i];
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017e6:	4413      	add	r3, r2
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	76fb      	strb	r3, [r7, #27]
		//Serial.println(char_array[i]);
		charDec = (int) charInput;
 80017ec:	7efb      	ldrb	r3, [r7, #27]
 80017ee:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80017f0:	2200      	movs	r2, #0
 80017f2:	2101      	movs	r1, #1
 80017f4:	483c      	ldr	r0, [pc, #240]	@ (80018e8 <LCD_Print+0x1cc>)
 80017f6:	f005 fe69 	bl	80074cc <HAL_GPIO_WritePin>
		SetWindows(x + (i * fontXSize), y, x + (i * fontXSize) + fontXSize - 1, y + fontYSize);
 80017fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80017fe:	fb03 f202 	mul.w	r2, r3, r2
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	4413      	add	r3, r2
 8001806:	4618      	mov	r0, r3
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800180c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800180e:	fb03 f202 	mul.w	r2, r3, r2
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	441a      	add	r2, r3
 8001816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001818:	4413      	add	r3, r2
 800181a:	3b01      	subs	r3, #1
 800181c:	461c      	mov	r4, r3
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001822:	4413      	add	r3, r2
 8001824:	4622      	mov	r2, r4
 8001826:	f7ff fef5 	bl	8001614 <SetWindows>
		long charHex1;
		for (int n = 0; n < fontYSize; n++) {
 800182a:	2300      	movs	r3, #0
 800182c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800182e:	e044      	b.n	80018ba <LCD_Print+0x19e>
			if (fontSize == 1) {
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d10b      	bne.n	800184e <LCD_Print+0x132>
				charHex1 = pgm_read_word_near(
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3b20      	subs	r3, #32
 800183a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800183c:	fb02 f303 	mul.w	r3, r2, r3
 8001840:	461a      	mov	r2, r3
 8001842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001844:	4413      	add	r3, r2
 8001846:	4a29      	ldr	r2, [pc, #164]	@ (80018ec <LCD_Print+0x1d0>)
 8001848:	4413      	add	r3, r2
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	633b      	str	r3, [r7, #48]	@ 0x30
						smallFont + ((charDec - 32) * fontYSize) + n);
			}
			if (fontSize == 2) {
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d10c      	bne.n	800186e <LCD_Print+0x152>
				charHex1 = pgm_read_word_near(
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3b20      	subs	r3, #32
 8001858:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	461a      	mov	r2, r3
 8001860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001862:	4413      	add	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <LCD_Print+0x1d4>)
 8001868:	4413      	add	r3, r2
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	633b      	str	r3, [r7, #48]	@ 0x30
						bigFont + ((charDec - 32) * fontYSize) + n);
			}
			for (int t = 1; t < fontXSize + 1; t++) {
 800186e:	2301      	movs	r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001872:	e01b      	b.n	80018ac <LCD_Print+0x190>
				if ((charHex1 & (1 << (fontXSize - t))) > 0) {
 8001874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2201      	movs	r2, #1
 800187c:	409a      	lsls	r2, r3
 800187e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	dd02      	ble.n	800188c <LCD_Print+0x170>
					c = color;
 8001886:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001888:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800188a:	e001      	b.n	8001890 <LCD_Print+0x174>
				} else {
					c = background;
 800188c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800188e:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				LCD_DATA(c >> 8);
 8001890:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001892:	121b      	asrs	r3, r3, #8
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fe16 	bl	80014c8 <LCD_DATA>
				LCD_DATA(c);
 800189c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe11 	bl	80014c8 <LCD_DATA>
			for (int t = 1; t < fontXSize + 1; t++) {
 80018a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a8:	3301      	adds	r3, #1
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80018ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b0:	429a      	cmp	r2, r3
 80018b2:	dadf      	bge.n	8001874 <LCD_Print+0x158>
		for (int n = 0; n < fontYSize; n++) {
 80018b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018b6:	3301      	adds	r3, #1
 80018b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80018ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018be:	429a      	cmp	r2, r3
 80018c0:	dbb6      	blt.n	8001830 <LCD_Print+0x114>
			}
		}
		HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80018c2:	2201      	movs	r2, #1
 80018c4:	2101      	movs	r1, #1
 80018c6:	4808      	ldr	r0, [pc, #32]	@ (80018e8 <LCD_Print+0x1cc>)
 80018c8:	f005 fe00 	bl	80074cc <HAL_GPIO_WritePin>
	for (int i = 0; i < cLength; i++) {
 80018cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018ce:	3301      	adds	r3, #1
 80018d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80018d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d6:	429a      	cmp	r2, r3
 80018d8:	db83      	blt.n	80017e2 <LCD_Print+0xc6>
 80018da:	46b5      	mov	sp, r6
	}
}
 80018dc:	bf00      	nop
 80018de:	374c      	adds	r7, #76	@ 0x4c
 80018e0:	46bd      	mov	sp, r7
 80018e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018e6:	bf00      	nop
 80018e8:	40020400 	.word	0x40020400
 80018ec:	08049454 	.word	0x08049454
 80018f0:	080498c8 	.word	0x080498c8

080018f4 <LCD_Bitmap>:
//***************************************************************************************************************************************
// Función para dibujar una imagen a partir de un arreglo de colores (Bitmap) Formato (Color 16bit R 5bits G 6bits B 5bits)
//***************************************************************************************************************************************
void LCD_Bitmap(unsigned int x, unsigned int y, unsigned int width,
		unsigned int height, unsigned char bitmap[]) {
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
 8001900:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 8001902:	202c      	movs	r0, #44	@ 0x2c
 8001904:	f7ff fd3a 	bl	800137c <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 8001908:	2201      	movs	r2, #1
 800190a:	2110      	movs	r1, #16
 800190c:	4824      	ldr	r0, [pc, #144]	@ (80019a0 <LCD_Bitmap+0xac>)
 800190e:	f005 fddd 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	2101      	movs	r1, #1
 8001916:	4823      	ldr	r0, [pc, #140]	@ (80019a4 <LCD_Bitmap+0xb0>)
 8001918:	f005 fdd8 	bl	80074cc <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	4413      	add	r3, r2
 800192a:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	1e5a      	subs	r2, r3, #1
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	3b01      	subs	r3, #1
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7ff fe6c 	bl	8001614 <SetWindows>
	unsigned int k = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24

	for (int i = 0; i < width; i++) {
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	e01e      	b.n	8001984 <LCD_Bitmap+0x90>
		for (int j = 0; j < height; j++) {
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
 800194a:	e014      	b.n	8001976 <LCD_Bitmap+0x82>
			LCD_DATA(bitmap[k]);
 800194c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800194e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001950:	4413      	add	r3, r2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fdb7 	bl	80014c8 <LCD_DATA>
			LCD_DATA(bitmap[k + 1]);
 800195a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195c:	3301      	adds	r3, #1
 800195e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fdaf 	bl	80014c8 <LCD_DATA>
			//LCD_DATA(bitmap[k]);
			k = k + 2;
 800196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196c:	3302      	adds	r3, #2
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
		for (int j = 0; j < height; j++) {
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d8e6      	bhi.n	800194c <LCD_Bitmap+0x58>
	for (int i = 0; i < width; i++) {
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	3301      	adds	r3, #1
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	6a3b      	ldr	r3, [r7, #32]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	d8dc      	bhi.n	8001946 <LCD_Bitmap+0x52>
		}
	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2101      	movs	r1, #1
 8001990:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <LCD_Bitmap+0xb0>)
 8001992:	f005 fd9b 	bl	80074cc <HAL_GPIO_WritePin>
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	@ 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400

080019a8 <LCD_Sprite>:
//***************************************************************************************************************************************
// Función para dibujar una imagen sprite - los parámetros columns = número de imagenes en el sprite, index = cual desplegar, flip = darle vuelta
//***************************************************************************************************************************************
void LCD_Sprite(int x, int y, int width, int height, unsigned char bitmap[],
		int columns, int index, char flip, char offset) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	@ 0x30
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
	LCD_CMD(0x02c); // write_memory_start
 80019b6:	202c      	movs	r0, #44	@ 0x2c
 80019b8:	f7ff fce0 	bl	800137c <LCD_CMD>
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2110      	movs	r1, #16
 80019c0:	484d      	ldr	r0, [pc, #308]	@ (8001af8 <LCD_Sprite+0x150>)
 80019c2:	f005 fd83 	bl	80074cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	2101      	movs	r1, #1
 80019ca:	484c      	ldr	r0, [pc, #304]	@ (8001afc <LCD_Sprite+0x154>)
 80019cc:	f005 fd7e 	bl	80074cc <HAL_GPIO_WritePin>

	unsigned int x2, y2;
	x2 = x + width;
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
	y2 = y + height;
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
	SetWindows(x, y, x2 - 1, y2 - 1);
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	1e5a      	subs	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f7ff fe12 	bl	8001614 <SetWindows>
	int k = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int ancho = ((width * columns));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	613b      	str	r3, [r7, #16]
	if (flip) {
 80019fe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03a      	beq.n	8001a7c <LCD_Sprite+0xd4>
		for (int j = 0; j < height; j++) {
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a0a:	e032      	b.n	8001a72 <LCD_Sprite+0xca>
			k = (j * (ancho) + index * width - 1 - offset) * 2;
 8001a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	fb03 f202 	mul.w	r2, r3, r2
 8001a14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	fb01 f303 	mul.w	r3, r1, r3
 8001a1c:	4413      	add	r3, r2
 8001a1e:	1e5a      	subs	r2, r3, #1
 8001a20:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			k = k + width * 2;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a30:	4413      	add	r3, r2
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a38:	e014      	b.n	8001a64 <LCD_Sprite+0xbc>
				LCD_DATA(bitmap[k]);
 8001a3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fd40 	bl	80014c8 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a4e:	4413      	add	r3, r2
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fd38 	bl	80014c8 <LCD_DATA>
				k = k - 2;
 8001a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a5a:	3b02      	subs	r3, #2
 8001a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	3301      	adds	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbe6      	blt.n	8001a3a <LCD_Sprite+0x92>
		for (int j = 0; j < height; j++) {
 8001a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6e:	3301      	adds	r3, #1
 8001a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	dbc8      	blt.n	8001a0c <LCD_Sprite+0x64>
 8001a7a:	e034      	b.n	8001ae6 <LCD_Sprite+0x13e>
			}
		}
	} else {
		for (int j = 0; j < height; j++) {
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	623b      	str	r3, [r7, #32]
 8001a80:	e02d      	b.n	8001ade <LCD_Sprite+0x136>
			k = (j * (ancho) + index * width + 1 + offset) * 2;
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	fb03 f202 	mul.w	r2, r3, r2
 8001a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001a8c:	6879      	ldr	r1, [r7, #4]
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
 8001aa4:	e014      	b.n	8001ad0 <LCD_Sprite+0x128>
				LCD_DATA(bitmap[k]);
 8001aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aa8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fd0a 	bl	80014c8 <LCD_DATA>
				LCD_DATA(bitmap[k + 1]);
 8001ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001aba:	4413      	add	r3, r2
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fd02 	bl	80014c8 <LCD_DATA>
				k = k + 2;
 8001ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			for (int i = 0; i < width; i++) {
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3301      	adds	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	69fa      	ldr	r2, [r7, #28]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbe6      	blt.n	8001aa6 <LCD_Sprite+0xfe>
		for (int j = 0; j < height; j++) {
 8001ad8:	6a3b      	ldr	r3, [r7, #32]
 8001ada:	3301      	adds	r3, #1
 8001adc:	623b      	str	r3, [r7, #32]
 8001ade:	6a3a      	ldr	r2, [r7, #32]
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	dbcd      	blt.n	8001a82 <LCD_Sprite+0xda>
			}
		}

	}
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4804      	ldr	r0, [pc, #16]	@ (8001afc <LCD_Sprite+0x154>)
 8001aec:	f005 fcee 	bl	80074cc <HAL_GPIO_WritePin>
}
 8001af0:	bf00      	nop
 8001af2:	3730      	adds	r7, #48	@ 0x30
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400

08001b00 <RectIntersects>:
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define CLAMP(v,a,b) ( ((v) < (a)) ? (a) : ( ((v) > (b)) ? (b) : (v) ) )
static inline bool RectIntersects(int x1,int y1,int w1,int h1,int x2,int y2,int w2,int h2){
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	603b      	str	r3, [r7, #0]
  return !(x1+w1<=x2 || x2+w2<=x1 || y1+h1<=y2 || y2+h2<=y1);
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	da13      	bge.n	8001b42 <RectIntersects+0x42>
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	4413      	add	r3, r2
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	da0d      	bge.n	8001b42 <RectIntersects+0x42>
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	69fa      	ldr	r2, [r7, #28]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	da07      	bge.n	8001b42 <RectIntersects+0x42>
 8001b32:	69fa      	ldr	r2, [r7, #28]
 8001b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b36:	4413      	add	r3, r2
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	da01      	bge.n	8001b42 <RectIntersects+0x42>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <RectIntersects+0x44>
 8001b42:	2300      	movs	r3, #0
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <DrawTextC>:

/* === Texto reducido (1/3 del tamaño previo) ===
   Firma de tu LCD_Print:
   void LCD_Print(char *text, int x, int y, int fontSize, int color, int background)
   Usamos fontSize = 1 (small). */
static inline void DrawTextC(const char* s, int x, int y, uint16_t fg, uint16_t bg){
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af02      	add	r7, sp, #8
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	807b      	strh	r3, [r7, #2]
  LCD_Print((char*)s, x, y, 1, fg, bg);
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	8b3a      	ldrh	r2, [r7, #24]
 8001b68:	9201      	str	r2, [sp, #4]
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f7ff fdd2 	bl	800171c <LCD_Print>
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <UI_FillRect>:

/* Helper local renombrado para no chocar con la lib: */
static inline void UI_FillRect(int x,int y,int w,int h,uint16_t c){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
 8001b8c:	603b      	str	r3, [r7, #0]
  static uint16_t line[320];
  if (w > 320) w = 320;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001b94:	dd02      	ble.n	8001b9c <UI_FillRect+0x1c>
 8001b96:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001b9a:	607b      	str	r3, [r7, #4]
  for (int i = 0; i < w; i++) line[i] = c;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	e007      	b.n	8001bb2 <UI_FillRect+0x32>
 8001ba2:	4913      	ldr	r1, [pc, #76]	@ (8001bf0 <UI_FillRect+0x70>)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	8c3a      	ldrh	r2, [r7, #32]
 8001ba8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf3      	blt.n	8001ba2 <UI_FillRect+0x22>
  for (int r = 0; r < h; r++) LCD_Bitmap(x, y + r, w, 1, (uint8_t*)line);
 8001bba:	2300      	movs	r3, #0
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	e00d      	b.n	8001bdc <UI_FillRect+0x5c>
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <UI_FillRect+0x70>)
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f7ff fe8f 	bl	80018f4 <LCD_Bitmap>
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	dbed      	blt.n	8001bc0 <UI_FillRect+0x40>
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200042dc 	.word	0x200042dc

08001bf4 <GoToPlay>:
static bool Wait_B_ToGoMenu(void);
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
static void GoToPlay(void)
{
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	b08b      	sub	sp, #44	@ 0x2c
 8001bf8:	af06      	add	r7, sp, #24
  SongLoop_Stop();
 8001bfa:	f004 f949 	bl	8005e90 <SongLoop_Stop>
  f_mount(&s_fs, "", 1);
 8001bfe:	2201      	movs	r2, #1
 8001c00:	4988      	ldr	r1, [pc, #544]	@ (8001e24 <GoToPlay+0x230>)
 8001c02:	4889      	ldr	r0, [pc, #548]	@ (8001e28 <GoToPlay+0x234>)
 8001c04:	f00a fe84 	bl	800c910 <f_mount>
  SongLoop_Start(SONG_PATH_PLAY);
 8001c08:	4888      	ldr	r0, [pc, #544]	@ (8001e2c <GoToPlay+0x238>)
 8001c0a:	f004 f8e9 	bl	8005de0 <SongLoop_Start>

  LCD_Clear(COLOR_BLACK);
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fd40 	bl	8001694 <LCD_Clear>
  Map_Generate();
 8001c14:	f000 fbc8 	bl	80023a8 <Map_Generate>
  Map_Draw();
 8001c18:	f000 fcc8 	bl	80025ac <Map_Draw>

  LifeIcon_ResizeTo(TILE_W, TILE_H);
 8001c1c:	210e      	movs	r1, #14
 8001c1e:	200a      	movs	r0, #10
 8001c20:	f000 ff9e 	bl	8002b60 <LifeIcon_ResizeTo>
  HUD_Draw();
 8001c24:	f000 fe3e 	bl	80028a4 <HUD_Draw>

  Banana_ResizeTo(TILE_W, TILE_H);
 8001c28:	210e      	movs	r1, #14
 8001c2a:	200a      	movs	r0, #10
 8001c2c:	f000 fee0 	bl	80029f0 <Banana_ResizeTo>
  Bananas_Init();
 8001c30:	f001 f8bc 	bl	8002dac <Bananas_Init>
  Bananas_DrawAll();
 8001c34:	f001 f910 	bl	8002e58 <Bananas_DrawAll>

  p1_score = p2_score = 0;
 8001c38:	4b7d      	ldr	r3, [pc, #500]	@ (8001e30 <GoToPlay+0x23c>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e30 <GoToPlay+0x23c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a7c      	ldr	r2, [pc, #496]	@ (8001e34 <GoToPlay+0x240>)
 8001c44:	6013      	str	r3, [r2, #0]
  p1_alive = p2_alive = 1;
 8001c46:	4b7c      	ldr	r3, [pc, #496]	@ (8001e38 <GoToPlay+0x244>)
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8001e38 <GoToPlay+0x244>)
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	4b7a      	ldr	r3, [pc, #488]	@ (8001e3c <GoToPlay+0x248>)
 8001c52:	701a      	strb	r2, [r3, #0]
  memset(&p1_act,0,sizeof(p1_act)); memset(&p2_act,0,sizeof(p2_act));
 8001c54:	2214      	movs	r2, #20
 8001c56:	2100      	movs	r1, #0
 8001c58:	4879      	ldr	r0, [pc, #484]	@ (8001e40 <GoToPlay+0x24c>)
 8001c5a:	f00b ffeb 	bl	800dc34 <memset>
 8001c5e:	2214      	movs	r2, #20
 8001c60:	2100      	movs	r1, #0
 8001c62:	4878      	ldr	r0, [pc, #480]	@ (8001e44 <GoToPlay+0x250>)
 8001c64:	f00b ffe6 	bl	800dc34 <memset>
  p1_A_prev=p1_B_prev=0; p2_A_prev=p2_B_prev=0;
 8001c68:	4b77      	ldr	r3, [pc, #476]	@ (8001e48 <GoToPlay+0x254>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	4b76      	ldr	r3, [pc, #472]	@ (8001e48 <GoToPlay+0x254>)
 8001c70:	781a      	ldrb	r2, [r3, #0]
 8001c72:	4b76      	ldr	r3, [pc, #472]	@ (8001e4c <GoToPlay+0x258>)
 8001c74:	701a      	strb	r2, [r3, #0]
 8001c76:	4b76      	ldr	r3, [pc, #472]	@ (8001e50 <GoToPlay+0x25c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	4b74      	ldr	r3, [pc, #464]	@ (8001e50 <GoToPlay+0x25c>)
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	4b74      	ldr	r3, [pc, #464]	@ (8001e54 <GoToPlay+0x260>)
 8001c82:	701a      	strb	r2, [r3, #0]
  p1_dir = D_DOWN; p2_dir = D_DOWN;
 8001c84:	4b74      	ldr	r3, [pc, #464]	@ (8001e58 <GoToPlay+0x264>)
 8001c86:	2202      	movs	r2, #2
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	4b74      	ldr	r3, [pc, #464]	@ (8001e5c <GoToPlay+0x268>)
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	701a      	strb	r2, [r3, #0]

  p1_sh = &P1_S_F; p1_fr=0; p1_tanim=HAL_GetTick();
 8001c90:	4b73      	ldr	r3, [pc, #460]	@ (8001e60 <GoToPlay+0x26c>)
 8001c92:	4a74      	ldr	r2, [pc, #464]	@ (8001e64 <GoToPlay+0x270>)
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	4b74      	ldr	r3, [pc, #464]	@ (8001e68 <GoToPlay+0x274>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	f005 f8a2 	bl	8006de4 <HAL_GetTick>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a72      	ldr	r2, [pc, #456]	@ (8001e6c <GoToPlay+0x278>)
 8001ca4:	6013      	str	r3, [r2, #0]
  p2_sh = &P2_S_F; p2_fr=0; p2_tanim=HAL_GetTick();
 8001ca6:	4b72      	ldr	r3, [pc, #456]	@ (8001e70 <GoToPlay+0x27c>)
 8001ca8:	4a72      	ldr	r2, [pc, #456]	@ (8001e74 <GoToPlay+0x280>)
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	4b72      	ldr	r3, [pc, #456]	@ (8001e78 <GoToPlay+0x284>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	f005 f897 	bl	8006de4 <HAL_GetTick>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4a70      	ldr	r2, [pc, #448]	@ (8001e7c <GoToPlay+0x288>)
 8001cba:	6013      	str	r3, [r2, #0]

  int midx = LCD_W/2, midy = LCD_H/2;
 8001cbc:	23a0      	movs	r3, #160	@ 0xa0
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	2378      	movs	r3, #120	@ 0x78
 8001cc2:	60bb      	str	r3, [r7, #8]
  p1_x = midx - p1_sh->w - 4; p1_y = midy - p1_sh->h/2;
 8001cc4:	4b66      	ldr	r3, [pc, #408]	@ (8001e60 <GoToPlay+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	3b04      	subs	r3, #4
 8001cd0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e80 <GoToPlay+0x28c>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b62      	ldr	r3, [pc, #392]	@ (8001e60 <GoToPlay+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0fda      	lsrs	r2, r3, #31
 8001cdc:	4413      	add	r3, r2
 8001cde:	105b      	asrs	r3, r3, #1
 8001ce0:	425b      	negs	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a66      	ldr	r2, [pc, #408]	@ (8001e84 <GoToPlay+0x290>)
 8001cea:	6013      	str	r3, [r2, #0]
  p2_x = midx + 4;            p2_y = midy - p2_sh->h/2;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	3304      	adds	r3, #4
 8001cf0:	4a65      	ldr	r2, [pc, #404]	@ (8001e88 <GoToPlay+0x294>)
 8001cf2:	6013      	str	r3, [r2, #0]
 8001cf4:	4b5e      	ldr	r3, [pc, #376]	@ (8001e70 <GoToPlay+0x27c>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0fda      	lsrs	r2, r3, #31
 8001cfc:	4413      	add	r3, r2
 8001cfe:	105b      	asrs	r3, r3, #1
 8001d00:	425b      	negs	r3, r3
 8001d02:	461a      	mov	r2, r3
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	4413      	add	r3, r2
 8001d08:	4a60      	ldr	r2, [pc, #384]	@ (8001e8c <GoToPlay+0x298>)
 8001d0a:	6013      	str	r3, [r2, #0]

  if (RectCollidesMap(p1_x,p1_y,p1_sh->w,p1_sh->h)) { p1_x = CLAMP(p1_x-10,0,LCD_W-p1_sh->w); }
 8001d0c:	4b5c      	ldr	r3, [pc, #368]	@ (8001e80 <GoToPlay+0x28c>)
 8001d0e:	6818      	ldr	r0, [r3, #0]
 8001d10:	4b5c      	ldr	r3, [pc, #368]	@ (8001e84 <GoToPlay+0x290>)
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	4b52      	ldr	r3, [pc, #328]	@ (8001e60 <GoToPlay+0x26c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4b51      	ldr	r3, [pc, #324]	@ (8001e60 <GoToPlay+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f000 fd52 	bl	80027c8 <RectCollidesMap>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d013      	beq.n	8001d52 <GoToPlay+0x15e>
 8001d2a:	4b55      	ldr	r3, [pc, #340]	@ (8001e80 <GoToPlay+0x28c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2b09      	cmp	r3, #9
 8001d30:	dd0c      	ble.n	8001d4c <GoToPlay+0x158>
 8001d32:	4b53      	ldr	r3, [pc, #332]	@ (8001e80 <GoToPlay+0x28c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f1a3 020a 	sub.w	r2, r3, #10
 8001d3a:	4b49      	ldr	r3, [pc, #292]	@ (8001e60 <GoToPlay+0x26c>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001d44:	4293      	cmp	r3, r2
 8001d46:	bfa8      	it	ge
 8001d48:	4613      	movge	r3, r2
 8001d4a:	e000      	b.n	8001d4e <GoToPlay+0x15a>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8001e80 <GoToPlay+0x28c>)
 8001d50:	6013      	str	r3, [r2, #0]
  if (RectCollidesMap(p2_x,p2_y,p2_sh->w,p2_sh->h)) { p2_x = CLAMP(p2_x+10,0,LCD_W-p2_sh->w); }
 8001d52:	4b4d      	ldr	r3, [pc, #308]	@ (8001e88 <GoToPlay+0x294>)
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	4b4d      	ldr	r3, [pc, #308]	@ (8001e8c <GoToPlay+0x298>)
 8001d58:	6819      	ldr	r1, [r3, #0]
 8001d5a:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <GoToPlay+0x27c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <GoToPlay+0x27c>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f000 fd2f 	bl	80027c8 <RectCollidesMap>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d01c      	beq.n	8001daa <GoToPlay+0x1b6>
 8001d70:	4b45      	ldr	r3, [pc, #276]	@ (8001e88 <GoToPlay+0x294>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f113 0f0a 	cmn.w	r3, #10
 8001d78:	db14      	blt.n	8001da4 <GoToPlay+0x1b0>
 8001d7a:	4b43      	ldr	r3, [pc, #268]	@ (8001e88 <GoToPlay+0x294>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f103 0209 	add.w	r2, r3, #9
 8001d82:	4b3b      	ldr	r3, [pc, #236]	@ (8001e70 <GoToPlay+0x27c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	db05      	blt.n	8001d9c <GoToPlay+0x1a8>
 8001d90:	4b37      	ldr	r3, [pc, #220]	@ (8001e70 <GoToPlay+0x27c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001d9a:	e004      	b.n	8001da6 <GoToPlay+0x1b2>
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <GoToPlay+0x294>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	330a      	adds	r3, #10
 8001da2:	e000      	b.n	8001da6 <GoToPlay+0x1b2>
 8001da4:	2300      	movs	r3, #0
 8001da6:	4a38      	ldr	r2, [pc, #224]	@ (8001e88 <GoToPlay+0x294>)
 8001da8:	6013      	str	r3, [r2, #0]
  if (RectIntersects(p1_x,p1_y,p1_sh->w,p1_sh->h,p2_x,p2_y,p2_sh->w,p2_sh->h)) { p2_x = CLAMP(p2_x+12,0,LCD_W-p2_sh->w); }
 8001daa:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <GoToPlay+0x28c>)
 8001dac:	681c      	ldr	r4, [r3, #0]
 8001dae:	4b35      	ldr	r3, [pc, #212]	@ (8001e84 <GoToPlay+0x290>)
 8001db0:	681d      	ldr	r5, [r3, #0]
 8001db2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e60 <GoToPlay+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685e      	ldr	r6, [r3, #4]
 8001db8:	4b29      	ldr	r3, [pc, #164]	@ (8001e60 <GoToPlay+0x26c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	607b      	str	r3, [r7, #4]
 8001dc0:	4b31      	ldr	r3, [pc, #196]	@ (8001e88 <GoToPlay+0x294>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a31      	ldr	r2, [pc, #196]	@ (8001e8c <GoToPlay+0x298>)
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	4929      	ldr	r1, [pc, #164]	@ (8001e70 <GoToPlay+0x27c>)
 8001dca:	6809      	ldr	r1, [r1, #0]
 8001dcc:	6849      	ldr	r1, [r1, #4]
 8001dce:	4828      	ldr	r0, [pc, #160]	@ (8001e70 <GoToPlay+0x27c>)
 8001dd0:	6800      	ldr	r0, [r0, #0]
 8001dd2:	6880      	ldr	r0, [r0, #8]
 8001dd4:	9003      	str	r0, [sp, #12]
 8001dd6:	9102      	str	r1, [sp, #8]
 8001dd8:	9201      	str	r2, [sp, #4]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4632      	mov	r2, r6
 8001de0:	4629      	mov	r1, r5
 8001de2:	4620      	mov	r0, r4
 8001de4:	f7ff fe8c 	bl	8001b00 <RectIntersects>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d053      	beq.n	8001e96 <GoToPlay+0x2a2>
 8001dee:	4b26      	ldr	r3, [pc, #152]	@ (8001e88 <GoToPlay+0x294>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f113 0f0c 	cmn.w	r3, #12
 8001df6:	db4b      	blt.n	8001e90 <GoToPlay+0x29c>
 8001df8:	4b23      	ldr	r3, [pc, #140]	@ (8001e88 <GoToPlay+0x294>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f103 020b 	add.w	r2, r3, #11
 8001e00:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <GoToPlay+0x27c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	db05      	blt.n	8001e1a <GoToPlay+0x226>
 8001e0e:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <GoToPlay+0x27c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001e18:	e03b      	b.n	8001e92 <GoToPlay+0x29e>
 8001e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <GoToPlay+0x294>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	330c      	adds	r3, #12
 8001e20:	e037      	b.n	8001e92 <GoToPlay+0x29e>
 8001e22:	bf00      	nop
 8001e24:	0800f614 	.word	0x0800f614
 8001e28:	20000258 	.word	0x20000258
 8001e2c:	0800f618 	.word	0x0800f618
 8001e30:	20001718 	.word	0x20001718
 8001e34:	200016e8 	.word	0x200016e8
 8001e38:	20000003 	.word	0x20000003
 8001e3c:	20000001 	.word	0x20000001
 8001e40:	200016ec 	.word	0x200016ec
 8001e44:	2000171c 	.word	0x2000171c
 8001e48:	20001701 	.word	0x20001701
 8001e4c:	20001700 	.word	0x20001700
 8001e50:	20001731 	.word	0x20001731
 8001e54:	20001730 	.word	0x20001730
 8001e58:	20000002 	.word	0x20000002
 8001e5c:	20000004 	.word	0x20000004
 8001e60:	200016dc 	.word	0x200016dc
 8001e64:	0804a4a8 	.word	0x0804a4a8
 8001e68:	200016e0 	.word	0x200016e0
 8001e6c:	200016e4 	.word	0x200016e4
 8001e70:	2000170c 	.word	0x2000170c
 8001e74:	0804a508 	.word	0x0804a508
 8001e78:	20001710 	.word	0x20001710
 8001e7c:	20001714 	.word	0x20001714
 8001e80:	200016d4 	.word	0x200016d4
 8001e84:	200016d8 	.word	0x200016d8
 8001e88:	20001704 	.word	0x20001704
 8001e8c:	20001708 	.word	0x20001708
 8001e90:	2300      	movs	r3, #0
 8001e92:	4a3d      	ldr	r2, [pc, #244]	@ (8001f88 <GoToPlay+0x394>)
 8001e94:	6013      	str	r3, [r2, #0]

  if (p1_alive) LCD_Sprite(p1_x,p1_y, p1_sh->w,p1_sh->h, (uint8_t*)p1_sh->data, p1_sh->columns, 0, 0, 0);
 8001e96:	4b3d      	ldr	r3, [pc, #244]	@ (8001f8c <GoToPlay+0x398>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d01b      	beq.n	8001ed6 <GoToPlay+0x2e2>
 8001e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8001f90 <GoToPlay+0x39c>)
 8001ea0:	6818      	ldr	r0, [r3, #0]
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <GoToPlay+0x3a0>)
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8001f98 <GoToPlay+0x3a4>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685c      	ldr	r4, [r3, #4]
 8001eac:	4b3a      	ldr	r3, [pc, #232]	@ (8001f98 <GoToPlay+0x3a4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689d      	ldr	r5, [r3, #8]
 8001eb2:	4b39      	ldr	r3, [pc, #228]	@ (8001f98 <GoToPlay+0x3a4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a37      	ldr	r2, [pc, #220]	@ (8001f98 <GoToPlay+0x3a4>)
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	68d2      	ldr	r2, [r2, #12]
 8001ebe:	2600      	movs	r6, #0
 8001ec0:	9604      	str	r6, [sp, #16]
 8001ec2:	2600      	movs	r6, #0
 8001ec4:	9603      	str	r6, [sp, #12]
 8001ec6:	2600      	movs	r6, #0
 8001ec8:	9602      	str	r6, [sp, #8]
 8001eca:	9201      	str	r2, [sp, #4]
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	462b      	mov	r3, r5
 8001ed0:	4622      	mov	r2, r4
 8001ed2:	f7ff fd69 	bl	80019a8 <LCD_Sprite>
  if (p2_alive) LCD_Sprite(p2_x,p2_y, p2_sh->w,p2_sh->h, (uint8_t*)p2_sh->data, p2_sh->columns, 0, 0, 0);
 8001ed6:	4b31      	ldr	r3, [pc, #196]	@ (8001f9c <GoToPlay+0x3a8>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01b      	beq.n	8001f16 <GoToPlay+0x322>
 8001ede:	4b2a      	ldr	r3, [pc, #168]	@ (8001f88 <GoToPlay+0x394>)
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <GoToPlay+0x3ac>)
 8001ee4:	6819      	ldr	r1, [r3, #0]
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa4 <GoToPlay+0x3b0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685c      	ldr	r4, [r3, #4]
 8001eec:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa4 <GoToPlay+0x3b0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689d      	ldr	r5, [r3, #8]
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <GoToPlay+0x3b0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa4 <GoToPlay+0x3b0>)
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	68d2      	ldr	r2, [r2, #12]
 8001efe:	2600      	movs	r6, #0
 8001f00:	9604      	str	r6, [sp, #16]
 8001f02:	2600      	movs	r6, #0
 8001f04:	9603      	str	r6, [sp, #12]
 8001f06:	2600      	movs	r6, #0
 8001f08:	9602      	str	r6, [sp, #8]
 8001f0a:	9201      	str	r2, [sp, #4]
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	462b      	mov	r3, r5
 8001f10:	4622      	mov	r2, r4
 8001f12:	f7ff fd49 	bl	80019a8 <LCD_Sprite>

  en_dir = D_RIGHT;
 8001f16:	4b24      	ldr	r3, [pc, #144]	@ (8001fa8 <GoToPlay+0x3b4>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	701a      	strb	r2, [r3, #0]
  en_sh=&EN_S_R; en_fr=0; en_tanim=HAL_GetTick();
 8001f1c:	4b23      	ldr	r3, [pc, #140]	@ (8001fac <GoToPlay+0x3b8>)
 8001f1e:	4a24      	ldr	r2, [pc, #144]	@ (8001fb0 <GoToPlay+0x3bc>)
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	4b24      	ldr	r3, [pc, #144]	@ (8001fb4 <GoToPlay+0x3c0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f004 ff5c 	bl	8006de4 <HAL_GetTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a22      	ldr	r2, [pc, #136]	@ (8001fb8 <GoToPlay+0x3c4>)
 8001f30:	6013      	str	r3, [r2, #0]
  Enemy_InitPatrol();
 8001f32:	f002 f859 	bl	8003fe8 <Enemy_InitPatrol>
  LCD_Sprite(en_x,en_y, en_sh->w,en_sh->h, (uint8_t*)en_sh->data, en_sh->columns, 0, 0, 0);
 8001f36:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <GoToPlay+0x3c8>)
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <GoToPlay+0x3cc>)
 8001f3c:	6819      	ldr	r1, [r3, #0]
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <GoToPlay+0x3b8>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685c      	ldr	r4, [r3, #4]
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <GoToPlay+0x3b8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689d      	ldr	r5, [r3, #8]
 8001f4a:	4b18      	ldr	r3, [pc, #96]	@ (8001fac <GoToPlay+0x3b8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a16      	ldr	r2, [pc, #88]	@ (8001fac <GoToPlay+0x3b8>)
 8001f52:	6812      	ldr	r2, [r2, #0]
 8001f54:	68d2      	ldr	r2, [r2, #12]
 8001f56:	2600      	movs	r6, #0
 8001f58:	9604      	str	r6, [sp, #16]
 8001f5a:	2600      	movs	r6, #0
 8001f5c:	9603      	str	r6, [sp, #12]
 8001f5e:	2600      	movs	r6, #0
 8001f60:	9602      	str	r6, [sp, #8]
 8001f62:	9201      	str	r2, [sp, #4]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	462b      	mov	r3, r5
 8001f68:	4622      	mov	r2, r4
 8001f6a:	f7ff fd1d 	bl	80019a8 <LCD_Sprite>

  g_game_over = 0;
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <GoToPlay+0x3d0>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]
  g_score_saved = 0;
 8001f74:	4b14      	ldr	r3, [pc, #80]	@ (8001fc8 <GoToPlay+0x3d4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
  app_state = ST_PLAY;
 8001f7a:	4b14      	ldr	r3, [pc, #80]	@ (8001fcc <GoToPlay+0x3d8>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f88:	20001704 	.word	0x20001704
 8001f8c:	20000001 	.word	0x20000001
 8001f90:	200016d4 	.word	0x200016d4
 8001f94:	200016d8 	.word	0x200016d8
 8001f98:	200016dc 	.word	0x200016dc
 8001f9c:	20000003 	.word	0x20000003
 8001fa0:	20001708 	.word	0x20001708
 8001fa4:	2000170c 	.word	0x2000170c
 8001fa8:	20000005 	.word	0x20000005
 8001fac:	2000173c 	.word	0x2000173c
 8001fb0:	0804a598 	.word	0x0804a598
 8001fb4:	20001740 	.word	0x20001740
 8001fb8:	20001744 	.word	0x20001744
 8001fbc:	20001734 	.word	0x20001734
 8001fc0:	20001738 	.word	0x20001738
 8001fc4:	2000371c 	.word	0x2000371c
 8001fc8:	2000371d 	.word	0x2000371d
 8001fcc:	20001290 	.word	0x20001290

08001fd0 <main>:
/* USER CODE END 0 */

/* Entry --------------------------------------------------------------------*/
int main(void)
{
 8001fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd2:	b091      	sub	sp, #68	@ 0x44
 8001fd4:	af06      	add	r7, sp, #24
  HAL_Init();
 8001fd6:	f004 fe9f 	bl	8006d18 <HAL_Init>
  SystemClock_Config();
 8001fda:	f003 faf7 	bl	80055cc <SystemClock_Config>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fde:	2003      	movs	r0, #3
 8001fe0:	f005 f800 	bl	8006fe4 <HAL_NVIC_SetPriorityGrouping>

  MX_GPIO_Init();
 8001fe4:	f003 fc52 	bl	800588c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001fe8:	f003 fb58 	bl	800569c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001fec:	f003 fb8c 	bl	8005708 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001ff0:	f003 fbbc 	bl	800576c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8001ff4:	f008 fa42 	bl	800a47c <MX_FATFS_Init>
  MX_TIM11_Init();
 8001ff8:	f003 fbea 	bl	80057d0 <MX_TIM11_Init>

  LCD_Init();
 8001ffc:	f7ff f8c2 	bl	8001184 <LCD_Init>
  AudioPWM_Init(&htim11);
 8002000:	485a      	ldr	r0, [pc, #360]	@ (800216c <main+0x19c>)
 8002002:	f7fe fb43 	bl	800068c <AudioPWM_Init>
  Gamepad_Init(&huart3);
 8002006:	485a      	ldr	r0, [pc, #360]	@ (8002170 <main+0x1a0>)
 8002008:	f004 fbde 	bl	80067c8 <Gamepad_Init>
  Menu_Init();
 800200c:	f004 fd86 	bl	8006b1c <Menu_Init>

  SongLoop_Init(&htim10, SONG_SPEED_X);
 8002010:	2103      	movs	r1, #3
 8002012:	4858      	ldr	r0, [pc, #352]	@ (8002174 <main+0x1a4>)
 8002014:	f003 fe7e 	bl	8005d14 <SongLoop_Init>
  if (f_mount(&s_fs, "", 1) == FR_OK) {
 8002018:	2201      	movs	r2, #1
 800201a:	4957      	ldr	r1, [pc, #348]	@ (8002178 <main+0x1a8>)
 800201c:	4857      	ldr	r0, [pc, #348]	@ (800217c <main+0x1ac>)
 800201e:	f00a fc77 	bl	800c910 <f_mount>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <main+0x5e>
    SongLoop_Start(SONG_PATH_MENU);
 8002028:	4855      	ldr	r0, [pc, #340]	@ (8002180 <main+0x1b0>)
 800202a:	f003 fed9 	bl	8005de0 <SongLoop_Start>
  }

  while (1)
  {
    if (app_state == ST_MENU) {
 800202e:	4b55      	ldr	r3, [pc, #340]	@ (8002184 <main+0x1b4>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d12c      	bne.n	8002090 <main+0xc0>
      Menu_Tick();
 8002036:	f004 fd93 	bl	8006b60 <Menu_Tick>
      if (Menu_ActionPressed()) {
 800203a:	f004 fe15 	bl	8006c68 <Menu_ActionPressed>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8186 	beq.w	8002352 <main+0x382>
        int idx = Menu_GetIndex();
 8002046:	f004 fe03 	bl	8006c50 <Menu_GetIndex>
 800204a:	61f8      	str	r0, [r7, #28]
        if (idx == 0) {
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <main+0x88>
          GoToPlay();
 8002052:	f7ff fdcf 	bl	8001bf4 <GoToPlay>
 8002056:	e17c      	b.n	8002352 <main+0x382>
        } else if (idx == 1) {
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <main+0x9a>
          Scores_ShowScreen();
 800205e:	f002 ffe7 	bl	8005030 <Scores_ShowScreen>
          app_state = ST_MENU_SCORES;
 8002062:	4b48      	ldr	r3, [pc, #288]	@ (8002184 <main+0x1b4>)
 8002064:	2203      	movs	r2, #3
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e173      	b.n	8002352 <main+0x382>
        } else if (idx == 2) {
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	2b02      	cmp	r3, #2
 800206e:	d105      	bne.n	800207c <main+0xac>
          Help_ShowScreen();
 8002070:	f003 fa0c 	bl	800548c <Help_ShowScreen>
          app_state = ST_MENU_HELP;
 8002074:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <main+0x1b4>)
 8002076:	2204      	movs	r2, #4
 8002078:	701a      	strb	r2, [r3, #0]
 800207a:	e16a      	b.n	8002352 <main+0x382>
        } else if (idx == 3) {
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	2b03      	cmp	r3, #3
 8002080:	f040 8167 	bne.w	8002352 <main+0x382>
          Credits_ShowScreen();
 8002084:	f003 fa40 	bl	8005508 <Credits_ShowScreen>
          app_state = ST_MENU_CREDITS;
 8002088:	4b3e      	ldr	r3, [pc, #248]	@ (8002184 <main+0x1b4>)
 800208a:	2205      	movs	r2, #5
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e160      	b.n	8002352 <main+0x382>
        }
      }
    }
    else if (app_state == ST_MENU_SCORES) {
 8002090:	4b3c      	ldr	r3, [pc, #240]	@ (8002184 <main+0x1b4>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b03      	cmp	r3, #3
 8002096:	d10b      	bne.n	80020b0 <main+0xe0>
      if (Wait_B_ToGoMenu()) { Menu_Init(); app_state = ST_MENU; }
 8002098:	f003 fa74 	bl	8005584 <Wait_B_ToGoMenu>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 8157 	beq.w	8002352 <main+0x382>
 80020a4:	f004 fd3a 	bl	8006b1c <Menu_Init>
 80020a8:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <main+0x1b4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
 80020ae:	e150      	b.n	8002352 <main+0x382>
    }
    else if (app_state == ST_MENU_HELP) {
 80020b0:	4b34      	ldr	r3, [pc, #208]	@ (8002184 <main+0x1b4>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d10b      	bne.n	80020d0 <main+0x100>
      if (Wait_B_ToGoMenu()) { Menu_Init(); app_state = ST_MENU; }
 80020b8:	f003 fa64 	bl	8005584 <Wait_B_ToGoMenu>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 8147 	beq.w	8002352 <main+0x382>
 80020c4:	f004 fd2a 	bl	8006b1c <Menu_Init>
 80020c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002184 <main+0x1b4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	701a      	strb	r2, [r3, #0]
 80020ce:	e140      	b.n	8002352 <main+0x382>
    }
    else if (app_state == ST_MENU_CREDITS) {
 80020d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002184 <main+0x1b4>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b05      	cmp	r3, #5
 80020d6:	d10b      	bne.n	80020f0 <main+0x120>
      if (Wait_B_ToGoMenu()) { Menu_Init(); app_state = ST_MENU; }
 80020d8:	f003 fa54 	bl	8005584 <Wait_B_ToGoMenu>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8137 	beq.w	8002352 <main+0x382>
 80020e4:	f004 fd1a 	bl	8006b1c <Menu_Init>
 80020e8:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <main+0x1b4>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
 80020ee:	e130      	b.n	8002352 <main+0x382>
    }
    else if (app_state == ST_PLAY) {
 80020f0:	4b24      	ldr	r3, [pc, #144]	@ (8002184 <main+0x1b4>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	f040 8101 	bne.w	80022fc <main+0x32c>
      Players_HandleInput();
 80020fa:	f001 fcdb 	bl	8003ab4 <Players_HandleInput>
      Enemy_Tick();
 80020fe:	f002 fd25 	bl	8004b4c <Enemy_Tick>

      if (!g_game_over) {
 8002102:	4b21      	ldr	r3, [pc, #132]	@ (8002188 <main+0x1b8>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d14a      	bne.n	80021a0 <main+0x1d0>
        int bananas_left = Bananas_Left();
 800210a:	f000 ffbf 	bl	800308c <Bananas_Left>
 800210e:	6278      	str	r0, [r7, #36]	@ 0x24
        if (bananas_left == 0) { g_game_over = 1; }
 8002110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002112:	2b00      	cmp	r3, #0
 8002114:	d102      	bne.n	800211c <main+0x14c>
 8002116:	4b1c      	ldr	r3, [pc, #112]	@ (8002188 <main+0x1b8>)
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
        if (!p1_alive && !p2_alive) { g_game_over = 2; }
 800211c:	4b1b      	ldr	r3, [pc, #108]	@ (800218c <main+0x1bc>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d106      	bne.n	8002132 <main+0x162>
 8002124:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <main+0x1c0>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <main+0x162>
 800212c:	4b16      	ldr	r3, [pc, #88]	@ (8002188 <main+0x1b8>)
 800212e:	2202      	movs	r2, #2
 8002130:	701a      	strb	r2, [r3, #0]
        if (g_game_over) {
 8002132:	4b15      	ldr	r3, [pc, #84]	@ (8002188 <main+0x1b8>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d032      	beq.n	80021a0 <main+0x1d0>
          if (!g_score_saved) { Scores_Append(p1_score, p2_score); g_score_saved = 1; }
 800213a:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <main+0x1c4>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10a      	bne.n	8002158 <main+0x188>
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <main+0x1c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a15      	ldr	r2, [pc, #84]	@ (800219c <main+0x1cc>)
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4611      	mov	r1, r2
 800214c:	4618      	mov	r0, r3
 800214e:	f002 fef7 	bl	8004f40 <Scores_Append>
 8002152:	4b10      	ldr	r3, [pc, #64]	@ (8002194 <main+0x1c4>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
          ShowEndScreen();
 8002158:	f002 fe94 	bl	8004e84 <ShowEndScreen>
          app_state = ST_END;
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <main+0x1b4>)
 800215e:	2202      	movs	r2, #2
 8002160:	701a      	strb	r2, [r3, #0]
          HAL_Delay(1);
 8002162:	2001      	movs	r0, #1
 8002164:	f004 fe4a 	bl	8006dfc <HAL_Delay>
          continue;
 8002168:	e0f6      	b.n	8002358 <main+0x388>
 800216a:	bf00      	nop
 800216c:	20000138 	.word	0x20000138
 8002170:	20000210 	.word	0x20000210
 8002174:	20000180 	.word	0x20000180
 8002178:	0800f614 	.word	0x0800f614
 800217c:	20000258 	.word	0x20000258
 8002180:	0800f63c 	.word	0x0800f63c
 8002184:	20001290 	.word	0x20001290
 8002188:	2000371c 	.word	0x2000371c
 800218c:	20000001 	.word	0x20000001
 8002190:	20000003 	.word	0x20000003
 8002194:	2000371d 	.word	0x2000371d
 8002198:	200016e8 	.word	0x200016e8
 800219c:	20001718 	.word	0x20001718
        }
      }

      uint32_t now = HAL_GetTick();
 80021a0:	f004 fe20 	bl	8006de4 <HAL_GetTick>
 80021a4:	6238      	str	r0, [r7, #32]
      if (p1_alive && (now - p1_tanim >= ANIM_MS)) { p1_tanim=now; p1_fr=(p1_fr+1)%p1_sh->columns; LCD_Sprite(p1_x,p1_y,p1_sh->w,p1_sh->h,(uint8_t*)p1_sh->data,p1_sh->columns,p1_fr,0,0); }
 80021a6:	4b6d      	ldr	r3, [pc, #436]	@ (800235c <main+0x38c>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d035      	beq.n	800221a <main+0x24a>
 80021ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002360 <main+0x390>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6a3a      	ldr	r2, [r7, #32]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b77      	cmp	r3, #119	@ 0x77
 80021b8:	d92f      	bls.n	800221a <main+0x24a>
 80021ba:	4a69      	ldr	r2, [pc, #420]	@ (8002360 <main+0x390>)
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b68      	ldr	r3, [pc, #416]	@ (8002364 <main+0x394>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	3301      	adds	r3, #1
 80021c6:	4a68      	ldr	r2, [pc, #416]	@ (8002368 <main+0x398>)
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	68d2      	ldr	r2, [r2, #12]
 80021cc:	fb93 f1f2 	sdiv	r1, r3, r2
 80021d0:	fb01 f202 	mul.w	r2, r1, r2
 80021d4:	1a9b      	subs	r3, r3, r2
 80021d6:	4a63      	ldr	r2, [pc, #396]	@ (8002364 <main+0x394>)
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b64      	ldr	r3, [pc, #400]	@ (800236c <main+0x39c>)
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	4b64      	ldr	r3, [pc, #400]	@ (8002370 <main+0x3a0>)
 80021e0:	681c      	ldr	r4, [r3, #0]
 80021e2:	4b61      	ldr	r3, [pc, #388]	@ (8002368 <main+0x398>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685d      	ldr	r5, [r3, #4]
 80021e8:	4b5f      	ldr	r3, [pc, #380]	@ (8002368 <main+0x398>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	689e      	ldr	r6, [r3, #8]
 80021ee:	4b5e      	ldr	r3, [pc, #376]	@ (8002368 <main+0x398>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002368 <main+0x398>)
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	68d2      	ldr	r2, [r2, #12]
 80021fc:	4959      	ldr	r1, [pc, #356]	@ (8002364 <main+0x394>)
 80021fe:	6809      	ldr	r1, [r1, #0]
 8002200:	2300      	movs	r3, #0
 8002202:	9304      	str	r3, [sp, #16]
 8002204:	2300      	movs	r3, #0
 8002206:	9303      	str	r3, [sp, #12]
 8002208:	9102      	str	r1, [sp, #8]
 800220a:	9201      	str	r2, [sp, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	4633      	mov	r3, r6
 8002212:	462a      	mov	r2, r5
 8002214:	4621      	mov	r1, r4
 8002216:	f7ff fbc7 	bl	80019a8 <LCD_Sprite>
      if (p2_alive && (now - p2_tanim >= ANIM_MS)) { p2_tanim=now; p2_fr=(p2_fr+1)%p2_sh->columns; LCD_Sprite(p2_x,p2_y,p2_sh->w,p2_sh->h,(uint8_t*)p2_sh->data,p2_sh->columns,p2_fr,0,0); }
 800221a:	4b56      	ldr	r3, [pc, #344]	@ (8002374 <main+0x3a4>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d035      	beq.n	800228e <main+0x2be>
 8002222:	4b55      	ldr	r3, [pc, #340]	@ (8002378 <main+0x3a8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6a3a      	ldr	r2, [r7, #32]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b77      	cmp	r3, #119	@ 0x77
 800222c:	d92f      	bls.n	800228e <main+0x2be>
 800222e:	4a52      	ldr	r2, [pc, #328]	@ (8002378 <main+0x3a8>)
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	4b51      	ldr	r3, [pc, #324]	@ (800237c <main+0x3ac>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	4a51      	ldr	r2, [pc, #324]	@ (8002380 <main+0x3b0>)
 800223c:	6812      	ldr	r2, [r2, #0]
 800223e:	68d2      	ldr	r2, [r2, #12]
 8002240:	fb93 f1f2 	sdiv	r1, r3, r2
 8002244:	fb01 f202 	mul.w	r2, r1, r2
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	4a4c      	ldr	r2, [pc, #304]	@ (800237c <main+0x3ac>)
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b4d      	ldr	r3, [pc, #308]	@ (8002384 <main+0x3b4>)
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	4b4d      	ldr	r3, [pc, #308]	@ (8002388 <main+0x3b8>)
 8002254:	681c      	ldr	r4, [r3, #0]
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <main+0x3b0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685d      	ldr	r5, [r3, #4]
 800225c:	4b48      	ldr	r3, [pc, #288]	@ (8002380 <main+0x3b0>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689e      	ldr	r6, [r3, #8]
 8002262:	4b47      	ldr	r3, [pc, #284]	@ (8002380 <main+0x3b0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	607b      	str	r3, [r7, #4]
 800226a:	4a45      	ldr	r2, [pc, #276]	@ (8002380 <main+0x3b0>)
 800226c:	6812      	ldr	r2, [r2, #0]
 800226e:	68d2      	ldr	r2, [r2, #12]
 8002270:	4942      	ldr	r1, [pc, #264]	@ (800237c <main+0x3ac>)
 8002272:	6809      	ldr	r1, [r1, #0]
 8002274:	2300      	movs	r3, #0
 8002276:	9304      	str	r3, [sp, #16]
 8002278:	2300      	movs	r3, #0
 800227a:	9303      	str	r3, [sp, #12]
 800227c:	9102      	str	r1, [sp, #8]
 800227e:	9201      	str	r2, [sp, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	4633      	mov	r3, r6
 8002286:	462a      	mov	r2, r5
 8002288:	4621      	mov	r1, r4
 800228a:	f7ff fb8d 	bl	80019a8 <LCD_Sprite>
      if (now - en_tanim >= ANIM_MS) { en_tanim=now; en_fr=(en_fr+1)%en_sh->columns; LCD_Sprite(en_x,en_y,en_sh->w,en_sh->h,(uint8_t*)en_sh->data,en_sh->columns,en_fr,0,0); }
 800228e:	4b3f      	ldr	r3, [pc, #252]	@ (800238c <main+0x3bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b77      	cmp	r3, #119	@ 0x77
 8002298:	d95b      	bls.n	8002352 <main+0x382>
 800229a:	4a3c      	ldr	r2, [pc, #240]	@ (800238c <main+0x3bc>)
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002390 <main+0x3c0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	4a3b      	ldr	r2, [pc, #236]	@ (8002394 <main+0x3c4>)
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	68d2      	ldr	r2, [r2, #12]
 80022ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80022b0:	fb01 f202 	mul.w	r2, r1, r2
 80022b4:	1a9b      	subs	r3, r3, r2
 80022b6:	4a36      	ldr	r2, [pc, #216]	@ (8002390 <main+0x3c0>)
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b37      	ldr	r3, [pc, #220]	@ (8002398 <main+0x3c8>)
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	4b37      	ldr	r3, [pc, #220]	@ (800239c <main+0x3cc>)
 80022c0:	681c      	ldr	r4, [r3, #0]
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <main+0x3c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685d      	ldr	r5, [r3, #4]
 80022c8:	4b32      	ldr	r3, [pc, #200]	@ (8002394 <main+0x3c4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689e      	ldr	r6, [r3, #8]
 80022ce:	4b31      	ldr	r3, [pc, #196]	@ (8002394 <main+0x3c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	607b      	str	r3, [r7, #4]
 80022d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002394 <main+0x3c4>)
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	68d2      	ldr	r2, [r2, #12]
 80022dc:	492c      	ldr	r1, [pc, #176]	@ (8002390 <main+0x3c0>)
 80022de:	6809      	ldr	r1, [r1, #0]
 80022e0:	2300      	movs	r3, #0
 80022e2:	9304      	str	r3, [sp, #16]
 80022e4:	2300      	movs	r3, #0
 80022e6:	9303      	str	r3, [sp, #12]
 80022e8:	9102      	str	r1, [sp, #8]
 80022ea:	9201      	str	r2, [sp, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	4633      	mov	r3, r6
 80022f2:	462a      	mov	r2, r5
 80022f4:	4621      	mov	r1, r4
 80022f6:	f7ff fb57 	bl	80019a8 <LCD_Sprite>
 80022fa:	e02a      	b.n	8002352 <main+0x382>
    }
    else if (app_state == ST_END) {
 80022fc:	4b28      	ldr	r3, [pc, #160]	@ (80023a0 <main+0x3d0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d126      	bne.n	8002352 <main+0x382>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002304:	b672      	cpsid	i
}
 8002306:	bf00      	nop
      PlayerInput i1, i2; __disable_irq(); Gamepad_GetP1(&i1); Gamepad_GetP2(&i2); __enable_irq();
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4618      	mov	r0, r3
 800230e:	f004 fa9b 	bl	8006848 <Gamepad_GetP1>
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	4618      	mov	r0, r3
 8002318:	f004 faac 	bl	8006874 <Gamepad_GetP2>
  __ASM volatile ("cpsie i" : : : "memory");
 800231c:	b662      	cpsie	i
}
 800231e:	bf00      	nop
      if (i1.A || i2.A) {
 8002320:	7e3b      	ldrb	r3, [r7, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <main+0x35c>
 8002326:	7c3b      	ldrb	r3, [r7, #16]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <main+0x362>
        GoToPlay();
 800232c:	f7ff fc62 	bl	8001bf4 <GoToPlay>
 8002330:	e00f      	b.n	8002352 <main+0x382>
      } else if (i1.B || i2.B) {
 8002332:	7e7b      	ldrb	r3, [r7, #25]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <main+0x36e>
 8002338:	7c7b      	ldrb	r3, [r7, #17]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <main+0x382>
        SongLoop_Stop();
 800233e:	f003 fda7 	bl	8005e90 <SongLoop_Stop>
        Menu_Init();
 8002342:	f004 fbeb 	bl	8006b1c <Menu_Init>
        SongLoop_Start(SONG_PATH_MENU);
 8002346:	4817      	ldr	r0, [pc, #92]	@ (80023a4 <main+0x3d4>)
 8002348:	f003 fd4a 	bl	8005de0 <SongLoop_Start>
        app_state = ST_MENU;
 800234c:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <main+0x3d0>)
 800234e:	2200      	movs	r2, #0
 8002350:	701a      	strb	r2, [r3, #0]
      }
    }

    HAL_Delay(1);
 8002352:	2001      	movs	r0, #1
 8002354:	f004 fd52 	bl	8006dfc <HAL_Delay>
    if (app_state == ST_MENU) {
 8002358:	e669      	b.n	800202e <main+0x5e>
 800235a:	bf00      	nop
 800235c:	20000001 	.word	0x20000001
 8002360:	200016e4 	.word	0x200016e4
 8002364:	200016e0 	.word	0x200016e0
 8002368:	200016dc 	.word	0x200016dc
 800236c:	200016d4 	.word	0x200016d4
 8002370:	200016d8 	.word	0x200016d8
 8002374:	20000003 	.word	0x20000003
 8002378:	20001714 	.word	0x20001714
 800237c:	20001710 	.word	0x20001710
 8002380:	2000170c 	.word	0x2000170c
 8002384:	20001704 	.word	0x20001704
 8002388:	20001708 	.word	0x20001708
 800238c:	20001744 	.word	0x20001744
 8002390:	20001740 	.word	0x20001740
 8002394:	2000173c 	.word	0x2000173c
 8002398:	20001734 	.word	0x20001734
 800239c:	20001738 	.word	0x20001738
 80023a0:	20001290 	.word	0x20001290
 80023a4:	0800f63c 	.word	0x0800f63c

080023a8 <Map_Generate>:
  }
}

/* ===================== MAPA ===================== */
static void Map_Generate(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	@ 0x30
 80023ac:	af00      	add	r7, sp, #0
  memset(g_map,   0, sizeof(g_map));
 80023ae:	f44f 7208 	mov.w	r2, #544	@ 0x220
 80023b2:	2100      	movs	r1, #0
 80023b4:	487b      	ldr	r0, [pc, #492]	@ (80025a4 <Map_Generate+0x1fc>)
 80023b6:	f00b fc3d 	bl	800dc34 <memset>
  memset(g_fixed, 0, sizeof(g_fixed));
 80023ba:	f44f 7208 	mov.w	r2, #544	@ 0x220
 80023be:	2100      	movs	r1, #0
 80023c0:	4879      	ldr	r0, [pc, #484]	@ (80025a8 <Map_Generate+0x200>)
 80023c2:	f00b fc37 	bl	800dc34 <memset>

  for (int c=0;c<MAP_COLS;c++){ g_map[0][c]=1; g_map[MAP_ROWS-1][c]=1; g_fixed[0][c]=g_fixed[MAP_ROWS-1][c]=1; }
 80023c6:	2300      	movs	r3, #0
 80023c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023ca:	e020      	b.n	800240e <Map_Generate+0x66>
 80023cc:	4a75      	ldr	r2, [pc, #468]	@ (80025a4 <Map_Generate+0x1fc>)
 80023ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d0:	4413      	add	r3, r2
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	4a73      	ldr	r2, [pc, #460]	@ (80025a4 <Map_Generate+0x1fc>)
 80023d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023da:	4413      	add	r3, r2
 80023dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	4a70      	ldr	r2, [pc, #448]	@ (80025a8 <Map_Generate+0x200>)
 80023e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80023ee:	2201      	movs	r2, #1
 80023f0:	701a      	strb	r2, [r3, #0]
 80023f2:	4a6d      	ldr	r2, [pc, #436]	@ (80025a8 <Map_Generate+0x200>)
 80023f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80023fc:	7819      	ldrb	r1, [r3, #0]
 80023fe:	4a6a      	ldr	r2, [pc, #424]	@ (80025a8 <Map_Generate+0x200>)
 8002400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002402:	4413      	add	r3, r2
 8002404:	460a      	mov	r2, r1
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240a:	3301      	adds	r3, #1
 800240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800240e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002410:	2b1f      	cmp	r3, #31
 8002412:	dddb      	ble.n	80023cc <Map_Generate+0x24>
  for (int r=0;r<MAP_ROWS;r++){ g_map[r][0]=1; g_map[r][MAP_COLS-1]=1; g_fixed[r][0]=g_fixed[r][MAP_COLS-1]=1; }
 8002414:	2300      	movs	r3, #0
 8002416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002418:	e022      	b.n	8002460 <Map_Generate+0xb8>
 800241a:	4a62      	ldr	r2, [pc, #392]	@ (80025a4 <Map_Generate+0x1fc>)
 800241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800241e:	015b      	lsls	r3, r3, #5
 8002420:	4413      	add	r3, r2
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
 8002426:	4a5f      	ldr	r2, [pc, #380]	@ (80025a4 <Map_Generate+0x1fc>)
 8002428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242a:	015b      	lsls	r3, r3, #5
 800242c:	4413      	add	r3, r2
 800242e:	331f      	adds	r3, #31
 8002430:	2201      	movs	r2, #1
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	4a5c      	ldr	r2, [pc, #368]	@ (80025a8 <Map_Generate+0x200>)
 8002436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002438:	015b      	lsls	r3, r3, #5
 800243a:	4413      	add	r3, r2
 800243c:	331f      	adds	r3, #31
 800243e:	2201      	movs	r2, #1
 8002440:	701a      	strb	r2, [r3, #0]
 8002442:	4a59      	ldr	r2, [pc, #356]	@ (80025a8 <Map_Generate+0x200>)
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	015b      	lsls	r3, r3, #5
 8002448:	4413      	add	r3, r2
 800244a:	331f      	adds	r3, #31
 800244c:	7819      	ldrb	r1, [r3, #0]
 800244e:	4a56      	ldr	r2, [pc, #344]	@ (80025a8 <Map_Generate+0x200>)
 8002450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002452:	015b      	lsls	r3, r3, #5
 8002454:	4413      	add	r3, r2
 8002456:	460a      	mov	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	3301      	adds	r3, #1
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002462:	2b10      	cmp	r3, #16
 8002464:	ddd9      	ble.n	800241a <Map_Generate+0x72>

  const int L=6, R=MAP_COLS-1-6;
 8002466:	2306      	movs	r3, #6
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	2319      	movs	r3, #25
 800246c:	60fb      	str	r3, [r7, #12]
  for (int r=3;r<MAP_ROWS-3;r++){ g_map[r][L]=1; g_map[r][R]=1; }
 800246e:	2303      	movs	r3, #3
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
 8002472:	e012      	b.n	800249a <Map_Generate+0xf2>
 8002474:	4a4b      	ldr	r2, [pc, #300]	@ (80025a4 <Map_Generate+0x1fc>)
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	015b      	lsls	r3, r3, #5
 800247a:	441a      	add	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4413      	add	r3, r2
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
 8002484:	4a47      	ldr	r2, [pc, #284]	@ (80025a4 <Map_Generate+0x1fc>)
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	015b      	lsls	r3, r3, #5
 800248a:	441a      	add	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002496:	3301      	adds	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	2b0d      	cmp	r3, #13
 800249e:	dde9      	ble.n	8002474 <Map_Generate+0xcc>

  g_map[3][L]=0; g_map[MAP_ROWS-4][L]=0;
 80024a0:	4a40      	ldr	r2, [pc, #256]	@ (80025a4 <Map_Generate+0x1fc>)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4413      	add	r3, r2
 80024a6:	3360      	adds	r3, #96	@ 0x60
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	4a3d      	ldr	r2, [pc, #244]	@ (80025a4 <Map_Generate+0x1fc>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]
  g_map[3][R]=0; g_map[MAP_ROWS-4][R]=0;
 80024ba:	4a3a      	ldr	r2, [pc, #232]	@ (80025a4 <Map_Generate+0x1fc>)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	4413      	add	r3, r2
 80024c0:	3360      	adds	r3, #96	@ 0x60
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
 80024c6:	4a37      	ldr	r2, [pc, #220]	@ (80025a4 <Map_Generate+0x1fc>)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 73d0 	add.w	r3, r3, #416	@ 0x1a0
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]

  int top=4, bot=MAP_ROWS-5;
 80024d4:	2304      	movs	r3, #4
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	230c      	movs	r3, #12
 80024da:	607b      	str	r3, [r7, #4]
  for (int c=L;c<=L+2;c++){ g_map[top][c]=g_map[bot][c]=1; }
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	623b      	str	r3, [r7, #32]
 80024e0:	e019      	b.n	8002516 <Map_Generate+0x16e>
 80024e2:	4a30      	ldr	r2, [pc, #192]	@ (80025a4 <Map_Generate+0x1fc>)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	015b      	lsls	r3, r3, #5
 80024e8:	441a      	add	r2, r3
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	4413      	add	r3, r2
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	4a2c      	ldr	r2, [pc, #176]	@ (80025a4 <Map_Generate+0x1fc>)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	015b      	lsls	r3, r3, #5
 80024f8:	441a      	add	r2, r3
 80024fa:	6a3b      	ldr	r3, [r7, #32]
 80024fc:	4413      	add	r3, r2
 80024fe:	7819      	ldrb	r1, [r3, #0]
 8002500:	4a28      	ldr	r2, [pc, #160]	@ (80025a4 <Map_Generate+0x1fc>)
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	015b      	lsls	r3, r3, #5
 8002506:	441a      	add	r2, r3
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	4413      	add	r3, r2
 800250c:	460a      	mov	r2, r1
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	3301      	adds	r3, #1
 8002514:	623b      	str	r3, [r7, #32]
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	3302      	adds	r3, #2
 800251a:	6a3a      	ldr	r2, [r7, #32]
 800251c:	429a      	cmp	r2, r3
 800251e:	dde0      	ble.n	80024e2 <Map_Generate+0x13a>
  for (int c=R-2;c<=R;c++){ g_map[top][c]=g_map[bot][c]=1; }
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3b02      	subs	r3, #2
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e019      	b.n	800255c <Map_Generate+0x1b4>
 8002528:	4a1e      	ldr	r2, [pc, #120]	@ (80025a4 <Map_Generate+0x1fc>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	015b      	lsls	r3, r3, #5
 800252e:	441a      	add	r2, r3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	4a1a      	ldr	r2, [pc, #104]	@ (80025a4 <Map_Generate+0x1fc>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	015b      	lsls	r3, r3, #5
 800253e:	441a      	add	r2, r3
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	4413      	add	r3, r2
 8002544:	7819      	ldrb	r1, [r3, #0]
 8002546:	4a17      	ldr	r2, [pc, #92]	@ (80025a4 <Map_Generate+0x1fc>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	015b      	lsls	r3, r3, #5
 800254c:	441a      	add	r2, r3
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	4413      	add	r3, r2
 8002552:	460a      	mov	r2, r1
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	429a      	cmp	r2, r3
 8002562:	dde1      	ble.n	8002528 <Map_Generate+0x180>

  for (int r=C_TY0;r<=C_TY1;r++) for (int c=C_TX0;c<=C_TX1;c++) g_map[r][c]=0;
 8002564:	2306      	movs	r3, #6
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	e013      	b.n	8002592 <Map_Generate+0x1ea>
 800256a:	230c      	movs	r3, #12
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e00a      	b.n	8002586 <Map_Generate+0x1de>
 8002570:	4a0c      	ldr	r2, [pc, #48]	@ (80025a4 <Map_Generate+0x1fc>)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	015b      	lsls	r3, r3, #5
 8002576:	441a      	add	r2, r3
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	4413      	add	r3, r2
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3301      	adds	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b13      	cmp	r3, #19
 800258a:	ddf1      	ble.n	8002570 <Map_Generate+0x1c8>
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	3301      	adds	r3, #1
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2b0a      	cmp	r3, #10
 8002596:	dde8      	ble.n	800256a <Map_Generate+0x1c2>
}
 8002598:	bf00      	nop
 800259a:	bf00      	nop
 800259c:	3730      	adds	r7, #48	@ 0x30
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20001294 	.word	0x20001294
 80025a8:	200014b4 	.word	0x200014b4

080025ac <Map_Draw>:

static void Map_Draw(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af02      	add	r7, sp, #8
  for (int r=0; r<MAP_ROWS; r++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
 80025b6:	e026      	b.n	8002606 <Map_Draw+0x5a>
    for (int c=0; c<MAP_COLS; c++)
 80025b8:	2300      	movs	r3, #0
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	e01d      	b.n	80025fa <Map_Draw+0x4e>
      if (g_map[r][c]) LCD_Bitmap(c*TILE_W, r*TILE_H, TILE_W, TILE_H, bloque);
 80025be:	4a16      	ldr	r2, [pc, #88]	@ (8002618 <Map_Draw+0x6c>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	015b      	lsls	r3, r3, #5
 80025c4:	441a      	add	r2, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	4413      	add	r3, r2
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d011      	beq.n	80025f4 <Map_Draw+0x48>
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4618      	mov	r0, r3
 80025dc:	687a      	ldr	r2, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	4619      	mov	r1, r3
 80025e8:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <Map_Draw+0x70>)
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	230e      	movs	r3, #14
 80025ee:	220a      	movs	r2, #10
 80025f0:	f7ff f980 	bl	80018f4 <LCD_Bitmap>
    for (int c=0; c<MAP_COLS; c++)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	603b      	str	r3, [r7, #0]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b1f      	cmp	r3, #31
 80025fe:	ddde      	ble.n	80025be <Map_Draw+0x12>
  for (int r=0; r<MAP_ROWS; r++)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3301      	adds	r3, #1
 8002604:	607b      	str	r3, [r7, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b10      	cmp	r3, #16
 800260a:	ddd5      	ble.n	80025b8 <Map_Draw+0xc>
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20001294 	.word	0x20001294
 800261c:	08035068 	.word	0x08035068

08002620 <DrawBlackTile>:

static void DrawBlackTile(int tx, int ty)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af02      	add	r7, sp, #8
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  static uint16_t black[TILE_W*TILE_H];
  static int inited=0; if (!inited){ for(int i=0;i<TILE_W*TILE_H;i++) black[i]=COLOR_BLACK; inited=1; }
 800262a:	4b15      	ldr	r3, [pc, #84]	@ (8002680 <DrawBlackTile+0x60>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d110      	bne.n	8002654 <DrawBlackTile+0x34>
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e007      	b.n	8002648 <DrawBlackTile+0x28>
 8002638:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <DrawBlackTile+0x64>)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2100      	movs	r1, #0
 800263e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	3301      	adds	r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2b8b      	cmp	r3, #139	@ 0x8b
 800264c:	ddf4      	ble.n	8002638 <DrawBlackTile+0x18>
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <DrawBlackTile+0x60>)
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]
  LCD_Bitmap(tx*TILE_W, ty*TILE_H, TILE_W, TILE_H, (uint8_t*)black);
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	4618      	mov	r0, r3
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	4613      	mov	r3, r2
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	4619      	mov	r1, r3
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <DrawBlackTile+0x64>)
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	230e      	movs	r3, #14
 8002672:	220a      	movs	r2, #10
 8002674:	f7ff f93e 	bl	80018f4 <LCD_Bitmap>
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20003720 	.word	0x20003720
 8002684:	20003724 	.word	0x20003724

08002688 <PatchFromMap>:

static void PatchFromMap(int x, int y, int w, int h)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08e      	sub	sp, #56	@ 0x38
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	603b      	str	r3, [r7, #0]
  x=CLAMP(x,0,LCD_W-1); y=CLAMP(y,0,LCD_H-1);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	db06      	blt.n	80026aa <PatchFromMap+0x22>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f240 123f 	movw	r2, #319	@ 0x13f
 80026a2:	4293      	cmp	r3, r2
 80026a4:	bfa8      	it	ge
 80026a6:	4613      	movge	r3, r2
 80026a8:	e000      	b.n	80026ac <PatchFromMap+0x24>
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	db04      	blt.n	80026be <PatchFromMap+0x36>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	2bef      	cmp	r3, #239	@ 0xef
 80026b8:	bfa8      	it	ge
 80026ba:	23ef      	movge	r3, #239	@ 0xef
 80026bc:	e000      	b.n	80026c0 <PatchFromMap+0x38>
 80026be:	2300      	movs	r3, #0
 80026c0:	60bb      	str	r3, [r7, #8]
  int x2=CLAMP(x+w-1,0,LCD_W-1), y2=CLAMP(y+h-1,0,LCD_H-1);
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4413      	add	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	dd09      	ble.n	80026e0 <PatchFromMap+0x58>
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80026d6:	bfa8      	it	ge
 80026d8:	f44f 73a0 	movge.w	r3, #320	@ 0x140
 80026dc:	3b01      	subs	r3, #1
 80026de:	e000      	b.n	80026e2 <PatchFromMap+0x5a>
 80026e0:	2300      	movs	r3, #0
 80026e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	dd07      	ble.n	80026fe <PatchFromMap+0x76>
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	2bf0      	cmp	r3, #240	@ 0xf0
 80026f6:	bfa8      	it	ge
 80026f8:	23f0      	movge	r3, #240	@ 0xf0
 80026fa:	3b01      	subs	r3, #1
 80026fc:	e000      	b.n	8002700 <PatchFromMap+0x78>
 80026fe:	2300      	movs	r3, #0
 8002700:	623b      	str	r3, [r7, #32]

  int tx0 = x / TILE_W, ty0 = y / TILE_H;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a2c      	ldr	r2, [pc, #176]	@ (80027b8 <PatchFromMap+0x130>)
 8002706:	fb82 1203 	smull	r1, r2, r2, r3
 800270a:	1092      	asrs	r2, r2, #2
 800270c:	17db      	asrs	r3, r3, #31
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4a29      	ldr	r2, [pc, #164]	@ (80027bc <PatchFromMap+0x134>)
 8002716:	fb82 1203 	smull	r1, r2, r2, r3
 800271a:	441a      	add	r2, r3
 800271c:	10d2      	asrs	r2, r2, #3
 800271e:	17db      	asrs	r3, r3, #31
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	61bb      	str	r3, [r7, #24]
  int tx1 = x2 / TILE_W, ty1 = y2 / TILE_H;
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	4a24      	ldr	r2, [pc, #144]	@ (80027b8 <PatchFromMap+0x130>)
 8002728:	fb82 1203 	smull	r1, r2, r2, r3
 800272c:	1092      	asrs	r2, r2, #2
 800272e:	17db      	asrs	r3, r3, #31
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	4a21      	ldr	r2, [pc, #132]	@ (80027bc <PatchFromMap+0x134>)
 8002738:	fb82 1203 	smull	r1, r2, r2, r3
 800273c:	441a      	add	r2, r3
 800273e:	10d2      	asrs	r2, r2, #3
 8002740:	17db      	asrs	r3, r3, #31
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	613b      	str	r3, [r7, #16]

  for (int ty=ty0; ty<=ty1; ++ty)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800274a:	e02c      	b.n	80027a6 <PatchFromMap+0x11e>
    for (int tx=tx0; tx<=tx1; ++tx)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002750:	e022      	b.n	8002798 <PatchFromMap+0x110>
      if (g_map[ty][tx]) LCD_Bitmap(tx*TILE_W, ty*TILE_H, TILE_W, TILE_H, bloque);
 8002752:	4a1b      	ldr	r2, [pc, #108]	@ (80027c0 <PatchFromMap+0x138>)
 8002754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	441a      	add	r2, r3
 800275a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275c:	4413      	add	r3, r2
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d012      	beq.n	800278a <PatchFromMap+0x102>
 8002764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002766:	4613      	mov	r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	4413      	add	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4618      	mov	r0, r3
 8002770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002772:	4613      	mov	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4619      	mov	r1, r3
 800277c:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <PatchFromMap+0x13c>)
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	230e      	movs	r3, #14
 8002782:	220a      	movs	r2, #10
 8002784:	f7ff f8b6 	bl	80018f4 <LCD_Bitmap>
 8002788:	e003      	b.n	8002792 <PatchFromMap+0x10a>
      else               DrawBlackTile(tx, ty);
 800278a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800278c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800278e:	f7ff ff47 	bl	8002620 <DrawBlackTile>
    for (int tx=tx0; tx<=tx1; ++tx)
 8002792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002794:	3301      	adds	r3, #1
 8002796:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002798:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	ddd8      	ble.n	8002752 <PatchFromMap+0xca>
  for (int ty=ty0; ty<=ty1; ++ty)
 80027a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a2:	3301      	adds	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	ddce      	ble.n	800274c <PatchFromMap+0xc4>
}
 80027ae:	bf00      	nop
 80027b0:	bf00      	nop
 80027b2:	3730      	adds	r7, #48	@ 0x30
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	66666667 	.word	0x66666667
 80027bc:	92492493 	.word	0x92492493
 80027c0:	20001294 	.word	0x20001294
 80027c4:	08035068 	.word	0x08035068

080027c8 <RectCollidesMap>:

static bool RectCollidesMap(int x, int y, int w, int h)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b08b      	sub	sp, #44	@ 0x2c
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  if (x<0 || y<0 || x+w>LCD_W || y+h>LCD_H) return true;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	db0d      	blt.n	80027f8 <RectCollidesMap+0x30>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	db0a      	blt.n	80027f8 <RectCollidesMap+0x30>
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027ec:	dc04      	bgt.n	80027f8 <RectCollidesMap+0x30>
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	2bf0      	cmp	r3, #240	@ 0xf0
 80027f6:	dd01      	ble.n	80027fc <RectCollidesMap+0x34>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e047      	b.n	800288c <RectCollidesMap+0xc4>
  int tx0 = x / TILE_W, ty0 = y / TILE_H;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4a26      	ldr	r2, [pc, #152]	@ (8002898 <RectCollidesMap+0xd0>)
 8002800:	fb82 1203 	smull	r1, r2, r2, r3
 8002804:	1092      	asrs	r2, r2, #2
 8002806:	17db      	asrs	r3, r3, #31
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4a23      	ldr	r2, [pc, #140]	@ (800289c <RectCollidesMap+0xd4>)
 8002810:	fb82 1203 	smull	r1, r2, r2, r3
 8002814:	441a      	add	r2, r3
 8002816:	10d2      	asrs	r2, r2, #3
 8002818:	17db      	asrs	r3, r3, #31
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	61bb      	str	r3, [r7, #24]
  int tx1 = (x + w - 1) / TILE_W;
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	3b01      	subs	r3, #1
 8002826:	4a1c      	ldr	r2, [pc, #112]	@ (8002898 <RectCollidesMap+0xd0>)
 8002828:	fb82 1203 	smull	r1, r2, r2, r3
 800282c:	1092      	asrs	r2, r2, #2
 800282e:	17db      	asrs	r3, r3, #31
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	617b      	str	r3, [r7, #20]
  int ty1 = (y + h - 1) / TILE_H;
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	4413      	add	r3, r2
 800283a:	3b01      	subs	r3, #1
 800283c:	4a17      	ldr	r2, [pc, #92]	@ (800289c <RectCollidesMap+0xd4>)
 800283e:	fb82 1203 	smull	r1, r2, r2, r3
 8002842:	441a      	add	r2, r3
 8002844:	10d2      	asrs	r2, r2, #3
 8002846:	17db      	asrs	r3, r3, #31
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	613b      	str	r3, [r7, #16]
  for (int ty=ty0; ty<=ty1; ++ty)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002850:	e017      	b.n	8002882 <RectCollidesMap+0xba>
    for (int tx=tx0; tx<=tx1; ++tx)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	623b      	str	r3, [r7, #32]
 8002856:	e00d      	b.n	8002874 <RectCollidesMap+0xac>
      if (g_map[ty][tx]) return true;
 8002858:	4a11      	ldr	r2, [pc, #68]	@ (80028a0 <RectCollidesMap+0xd8>)
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	015b      	lsls	r3, r3, #5
 800285e:	441a      	add	r2, r3
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	4413      	add	r3, r2
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <RectCollidesMap+0xa6>
 800286a:	2301      	movs	r3, #1
 800286c:	e00e      	b.n	800288c <RectCollidesMap+0xc4>
    for (int tx=tx0; tx<=tx1; ++tx)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	3301      	adds	r3, #1
 8002872:	623b      	str	r3, [r7, #32]
 8002874:	6a3a      	ldr	r2, [r7, #32]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	dded      	ble.n	8002858 <RectCollidesMap+0x90>
  for (int ty=ty0; ty<=ty1; ++ty)
 800287c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287e:	3301      	adds	r3, #1
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
 8002882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	dde3      	ble.n	8002852 <RectCollidesMap+0x8a>
  return false;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	372c      	adds	r7, #44	@ 0x2c
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	66666667 	.word	0x66666667
 800289c:	92492493 	.word	0x92492493
 80028a0:	20001294 	.word	0x20001294

080028a4 <HUD_Draw>:

/* ===================== HUD / TEXTO ===================== */
static void HUD_Draw(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af02      	add	r7, sp, #8
  int hx = (MAP_COLS-1) * TILE_W;
 80028aa:	f44f 739b 	mov.w	r3, #310	@ 0x136
 80028ae:	60fb      	str	r3, [r7, #12]
  int y_center = LCD_H/2;
 80028b0:	2378      	movs	r3, #120	@ 0x78
 80028b2:	60bb      	str	r3, [r7, #8]
  int y1 = y_center - (TILE_H + 2);
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	3b10      	subs	r3, #16
 80028b8:	607b      	str	r3, [r7, #4]
  int y2 = y_center + 2;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3302      	adds	r3, #2
 80028be:	603b      	str	r3, [r7, #0]

  PatchFromMap(hx, y1, TILE_W, TILE_H);
 80028c0:	230e      	movs	r3, #14
 80028c2:	220a      	movs	r2, #10
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff fede 	bl	8002688 <PatchFromMap>
  PatchFromMap(hx, y2, TILE_W, TILE_H);
 80028cc:	230e      	movs	r3, #14
 80028ce:	220a      	movs	r2, #10
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f7ff fed8 	bl	8002688 <PatchFromMap>

  if (p1_alive) LCD_Bitmap(hx, y1, TILE_W, TILE_H, (uint8_t*)vida1_draw);
 80028d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <HUD_Draw+0x70>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d008      	beq.n	80028f2 <HUD_Draw+0x4e>
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <HUD_Draw+0x74>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	230e      	movs	r3, #14
 80028ec:	220a      	movs	r2, #10
 80028ee:	f7ff f801 	bl	80018f4 <LCD_Bitmap>
  if (p2_alive) LCD_Bitmap(hx, y2, TILE_W, TILE_H, (uint8_t*)vida2_draw);
 80028f2:	4b0a      	ldr	r3, [pc, #40]	@ (800291c <HUD_Draw+0x78>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d008      	beq.n	800290c <HUD_Draw+0x68>
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	6839      	ldr	r1, [r7, #0]
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HUD_Draw+0x7c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	230e      	movs	r3, #14
 8002906:	220a      	movs	r2, #10
 8002908:	f7fe fff4 	bl	80018f4 <LCD_Bitmap>
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000001 	.word	0x20000001
 8002918:	20000020 	.word	0x20000020
 800291c:	20000003 	.word	0x20000003
 8002920:	20000024 	.word	0x20000024

08002924 <HUD_RedrawIfOverlapped>:

static void HUD_RedrawIfOverlapped(int x,int y,int w,int h)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	@ 0x30
 8002928:	af04      	add	r7, sp, #16
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  int hx = (MAP_COLS-1) * TILE_W;
 8002932:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8002936:	61fb      	str	r3, [r7, #28]
  int y_center = LCD_H/2;
 8002938:	2378      	movs	r3, #120	@ 0x78
 800293a:	61bb      	str	r3, [r7, #24]
  int hy1 = y_center - (TILE_H + 2);
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	3b10      	subs	r3, #16
 8002940:	617b      	str	r3, [r7, #20]
  int hy2 = y_center + 2;
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	3302      	adds	r3, #2
 8002946:	613b      	str	r3, [r7, #16]

  if (RectIntersects(x,y,w,h, hx,hy1,TILE_W,TILE_H)) {
 8002948:	230e      	movs	r3, #14
 800294a:	9303      	str	r3, [sp, #12]
 800294c:	230a      	movs	r3, #10
 800294e:	9302      	str	r3, [sp, #8]
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f7ff f8ce 	bl	8001b00 <RectIntersects>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d012      	beq.n	8002990 <HUD_RedrawIfOverlapped+0x6c>
    PatchFromMap(hx, hy1, TILE_W, TILE_H);
 800296a:	230e      	movs	r3, #14
 800296c:	220a      	movs	r2, #10
 800296e:	6979      	ldr	r1, [r7, #20]
 8002970:	69f8      	ldr	r0, [r7, #28]
 8002972:	f7ff fe89 	bl	8002688 <PatchFromMap>
    if (p1_alive) LCD_Bitmap(hx, hy1, TILE_W, TILE_H, (uint8_t*)vida1_draw);
 8002976:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <HUD_RedrawIfOverlapped+0xbc>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HUD_RedrawIfOverlapped+0x6c>
 800297e:	69f8      	ldr	r0, [r7, #28]
 8002980:	6979      	ldr	r1, [r7, #20]
 8002982:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <HUD_RedrawIfOverlapped+0xc0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	230e      	movs	r3, #14
 800298a:	220a      	movs	r2, #10
 800298c:	f7fe ffb2 	bl	80018f4 <LCD_Bitmap>
  }
  if (RectIntersects(x,y,w,h, hx,hy2,TILE_W,TILE_H)) {
 8002990:	230e      	movs	r3, #14
 8002992:	9303      	str	r3, [sp, #12]
 8002994:	230a      	movs	r3, #10
 8002996:	9302      	str	r3, [sp, #8]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f7ff f8aa 	bl	8001b00 <RectIntersects>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d012      	beq.n	80029d8 <HUD_RedrawIfOverlapped+0xb4>
    PatchFromMap(hx, hy2, TILE_W, TILE_H);
 80029b2:	230e      	movs	r3, #14
 80029b4:	220a      	movs	r2, #10
 80029b6:	6939      	ldr	r1, [r7, #16]
 80029b8:	69f8      	ldr	r0, [r7, #28]
 80029ba:	f7ff fe65 	bl	8002688 <PatchFromMap>
    if (p2_alive) LCD_Bitmap(hx, hy2, TILE_W, TILE_H, (uint8_t*)vida2_draw);
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HUD_RedrawIfOverlapped+0xc4>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HUD_RedrawIfOverlapped+0xb4>
 80029c6:	69f8      	ldr	r0, [r7, #28]
 80029c8:	6939      	ldr	r1, [r7, #16]
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <HUD_RedrawIfOverlapped+0xc8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	230e      	movs	r3, #14
 80029d2:	220a      	movs	r2, #10
 80029d4:	f7fe ff8e 	bl	80018f4 <LCD_Bitmap>
  }
}
 80029d8:	bf00      	nop
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	20000001 	.word	0x20000001
 80029e4:	20000020 	.word	0x20000020
 80029e8:	20000003 	.word	0x20000003
 80029ec:	20000024 	.word	0x20000024

080029f0 <Banana_ResizeTo>:

/* ===================== BANANO ===================== */
static void Banana_ResizeTo(int dw, int dh)
{
 80029f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f4:	b094      	sub	sp, #80	@ 0x50
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80029fa:	62b9      	str	r1, [r7, #40]	@ 0x28
  if (dw <= 0 || dh <= 0) return;
 80029fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f340 809a 	ble.w	8002b38 <Banana_ResizeTo+0x148>
 8002a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f340 8096 	ble.w	8002b38 <Banana_ResizeTo+0x148>
  int sw = g_ban_src_w, sh = g_ban_src_h;
 8002a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002b44 <Banana_ResizeTo+0x154>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a12:	4b4d      	ldr	r3, [pc, #308]	@ (8002b48 <Banana_ResizeTo+0x158>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	643b      	str	r3, [r7, #64]	@ 0x40
  if (dw > sw) dw = sw; if (dh > sh) dh = sh;
 8002a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	dd01      	ble.n	8002a24 <Banana_ResizeTo+0x34>
 8002a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	dd01      	ble.n	8002a30 <Banana_ResizeTo+0x40>
 8002a2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  const uint16_t* src = (const uint16_t*)g_banana_src;
 8002a30:	4b46      	ldr	r3, [pc, #280]	@ (8002b4c <Banana_ResizeTo+0x15c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t*       dst = g_banana_scaled;
 8002a36:	4b46      	ldr	r3, [pc, #280]	@ (8002b50 <Banana_ResizeTo+0x160>)
 8002a38:	63bb      	str	r3, [r7, #56]	@ 0x38

  for (int y = 0; y < dh; ++y) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a3e:	e06d      	b.n	8002b1c <Banana_ResizeTo+0x12c>
    int sy = (int)((long long)y * sh / dh);
 8002a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a42:	17da      	asrs	r2, r3, #31
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	617a      	str	r2, [r7, #20]
 8002a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a4a:	17da      	asrs	r2, r3, #31
 8002a4c:	4698      	mov	r8, r3
 8002a4e:	4691      	mov	r9, r2
 8002a50:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002a54:	460b      	mov	r3, r1
 8002a56:	fb08 f203 	mul.w	r2, r8, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	fb03 f309 	mul.w	r3, r3, r9
 8002a60:	4413      	add	r3, r2
 8002a62:	4602      	mov	r2, r0
 8002a64:	fba2 4508 	umull	r4, r5, r2, r8
 8002a68:	442b      	add	r3, r5
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a6e:	17da      	asrs	r2, r3, #31
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	60fa      	str	r2, [r7, #12]
 8002a74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a78:	4620      	mov	r0, r4
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	f7fd fc20 	bl	80002c0 <__aeabi_ldivmod>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4613      	mov	r3, r2
 8002a86:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int x = 0; x < dw; ++x) {
 8002a88:	2300      	movs	r3, #0
 8002a8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a8c:	e03f      	b.n	8002b0e <Banana_ResizeTo+0x11e>
      int sx = (int)((long long)x * sw / dw);
 8002a8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a90:	17da      	asrs	r2, r3, #31
 8002a92:	623b      	str	r3, [r7, #32]
 8002a94:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a98:	17da      	asrs	r2, r3, #31
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	61fa      	str	r2, [r7, #28]
 8002a9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	fb02 f203 	mul.w	r2, r2, r3
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002ab0:	4601      	mov	r1, r0
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	69b9      	ldr	r1, [r7, #24]
 8002abc:	fba2 ab01 	umull	sl, fp, r2, r1
 8002ac0:	445b      	add	r3, fp
 8002ac2:	469b      	mov	fp, r3
 8002ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac6:	17da      	asrs	r2, r3, #31
 8002ac8:	603b      	str	r3, [r7, #0]
 8002aca:	607a      	str	r2, [r7, #4]
 8002acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ad0:	4650      	mov	r0, sl
 8002ad2:	4659      	mov	r1, fp
 8002ad4:	f7fd fbf4 	bl	80002c0 <__aeabi_ldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	633b      	str	r3, [r7, #48]	@ 0x30
      dst[y*dw + x] = src[ sy*sw + sx ];
 8002ae0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ae4:	fb03 f202 	mul.w	r2, r3, r2
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	4413      	add	r3, r2
 8002aec:	005a      	lsls	r2, r3, #1
 8002aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af0:	1899      	adds	r1, r3, r2
 8002af2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002af6:	fb03 f202 	mul.w	r2, r3, r2
 8002afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002afc:	4413      	add	r3, r2
 8002afe:	005a      	lsls	r2, r3, #1
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	441a      	add	r2, r3
 8002b04:	880b      	ldrh	r3, [r1, #0]
 8002b06:	8013      	strh	r3, [r2, #0]
    for (int x = 0; x < dw; ++x) {
 8002b08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b12:	429a      	cmp	r2, r3
 8002b14:	dbbb      	blt.n	8002a8e <Banana_ResizeTo+0x9e>
  for (int y = 0; y < dh; ++y) {
 8002b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b18:	3301      	adds	r3, #1
 8002b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b20:	429a      	cmp	r2, r3
 8002b22:	db8d      	blt.n	8002a40 <Banana_ResizeTo+0x50>
    }
  }

  g_banana_draw = (const uint8_t*)dst;
 8002b24:	4a0b      	ldr	r2, [pc, #44]	@ (8002b54 <Banana_ResizeTo+0x164>)
 8002b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b28:	6013      	str	r3, [r2, #0]
  g_ban_draw_w  = dw;
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b58 <Banana_ResizeTo+0x168>)
 8002b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2e:	6013      	str	r3, [r2, #0]
  g_ban_draw_h  = dh;
 8002b30:	4a0a      	ldr	r2, [pc, #40]	@ (8002b5c <Banana_ResizeTo+0x16c>)
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e000      	b.n	8002b3a <Banana_ResizeTo+0x14a>
  if (dw <= 0 || dh <= 0) return;
 8002b38:	bf00      	nop
}
 8002b3a:	3750      	adds	r7, #80	@ 0x50
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b42:	bf00      	nop
 8002b44:	2000000c 	.word	0x2000000c
 8002b48:	20000010 	.word	0x20000010
 8002b4c:	20000008 	.word	0x20000008
 8002b50:	20001748 	.word	0x20001748
 8002b54:	20000014 	.word	0x20000014
 8002b58:	20000018 	.word	0x20000018
 8002b5c:	2000001c 	.word	0x2000001c

08002b60 <LifeIcon_ResizeTo>:

/* ===================== VIDA (resize) ===================== */
static void LifeIcon_ResizeTo(int dw, int dh)
{
 8002b60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b64:	b094      	sub	sp, #80	@ 0x50
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002b6a:	62b9      	str	r1, [r7, #40]	@ 0x28
  if (dw <= 0 || dh <= 0) return;
 8002b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f340 80ae 	ble.w	8002cd0 <LifeIcon_ResizeTo+0x170>
 8002b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f340 80aa 	ble.w	8002cd0 <LifeIcon_ResizeTo+0x170>
  const uint16_t* src1 = (const uint16_t*)contadorJ1;
 8002b7c:	4b57      	ldr	r3, [pc, #348]	@ (8002cdc <LifeIcon_ResizeTo+0x17c>)
 8002b7e:	647b      	str	r3, [r7, #68]	@ 0x44
  const uint16_t* src2 = (const uint16_t*)contadorJ2;
 8002b80:	4b57      	ldr	r3, [pc, #348]	@ (8002ce0 <LifeIcon_ResizeTo+0x180>)
 8002b82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint16_t*       dst1 = vida1_scaled;
 8002b84:	4b57      	ldr	r3, [pc, #348]	@ (8002ce4 <LifeIcon_ResizeTo+0x184>)
 8002b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint16_t*       dst2 = vida2_scaled;
 8002b88:	4b57      	ldr	r3, [pc, #348]	@ (8002ce8 <LifeIcon_ResizeTo+0x188>)
 8002b8a:	63bb      	str	r3, [r7, #56]	@ 0x38

  for (int y = 0; y < dh; ++y) {
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b90:	e08c      	b.n	8002cac <LifeIcon_ResizeTo+0x14c>
    int sy = (int)((long long)y * VIDA_SRC_H / dh);
 8002b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b94:	17da      	asrs	r2, r3, #31
 8002b96:	469a      	mov	sl, r3
 8002b98:	4693      	mov	fp, r2
 8002b9a:	4652      	mov	r2, sl
 8002b9c:	465b      	mov	r3, fp
 8002b9e:	1891      	adds	r1, r2, r2
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	415b      	adcs	r3, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002baa:	eb12 040a 	adds.w	r4, r2, sl
 8002bae:	eb43 050b 	adc.w	r5, r3, fp
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	00eb      	lsls	r3, r5, #3
 8002bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc0:	00e2      	lsls	r2, r4, #3
 8002bc2:	4614      	mov	r4, r2
 8002bc4:	461d      	mov	r5, r3
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	4629      	mov	r1, r5
 8002bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bcc:	17da      	asrs	r2, r3, #31
 8002bce:	61bb      	str	r3, [r7, #24]
 8002bd0:	61fa      	str	r2, [r7, #28]
 8002bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd6:	f7fd fb73 	bl	80002c0 <__aeabi_ldivmod>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	460b      	mov	r3, r1
 8002bde:	4613      	mov	r3, r2
 8002be0:	637b      	str	r3, [r7, #52]	@ 0x34
    for (int x = 0; x < dw; ++x) {
 8002be2:	2300      	movs	r3, #0
 8002be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002be6:	e05a      	b.n	8002c9e <LifeIcon_ResizeTo+0x13e>
      int sx = (int)((long long)x * VIDA_SRC_W / dw);
 8002be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bea:	17da      	asrs	r2, r3, #31
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bf0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bf4:	1891      	adds	r1, r2, r2
 8002bf6:	6039      	str	r1, [r7, #0]
 8002bf8:	415b      	adcs	r3, r3
 8002bfa:	607b      	str	r3, [r7, #4]
 8002bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c00:	6a39      	ldr	r1, [r7, #32]
 8002c02:	eb12 0801 	adds.w	r8, r2, r1
 8002c06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c08:	eb43 0901 	adc.w	r9, r3, r1
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c20:	4690      	mov	r8, r2
 8002c22:	4699      	mov	r9, r3
 8002c24:	4640      	mov	r0, r8
 8002c26:	4649      	mov	r1, r9
 8002c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c2a:	17da      	asrs	r2, r3, #31
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	617a      	str	r2, [r7, #20]
 8002c30:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c34:	f7fd fb44 	bl	80002c0 <__aeabi_ldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	633b      	str	r3, [r7, #48]	@ 0x30
      dst1[y*dw + x] = src1[ sy*VIDA_SRC_W + sx ];
 8002c40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	00db      	lsls	r3, r3, #3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4e:	4413      	add	r3, r2
 8002c50:	005a      	lsls	r2, r3, #1
 8002c52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c54:	1899      	adds	r1, r3, r2
 8002c56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c5a:	fb03 f202 	mul.w	r2, r3, r2
 8002c5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c60:	4413      	add	r3, r2
 8002c62:	005a      	lsls	r2, r3, #1
 8002c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c66:	441a      	add	r2, r3
 8002c68:	880b      	ldrh	r3, [r1, #0]
 8002c6a:	8013      	strh	r3, [r2, #0]
      dst2[y*dw + x] = src2[ sy*VIDA_SRC_W + sx ];
 8002c6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	461a      	mov	r2, r3
 8002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7a:	4413      	add	r3, r2
 8002c7c:	005a      	lsls	r2, r3, #1
 8002c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c80:	1899      	adds	r1, r3, r2
 8002c82:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c86:	fb03 f202 	mul.w	r2, r3, r2
 8002c8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c8c:	4413      	add	r3, r2
 8002c8e:	005a      	lsls	r2, r3, #1
 8002c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c92:	441a      	add	r2, r3
 8002c94:	880b      	ldrh	r3, [r1, #0]
 8002c96:	8013      	strh	r3, [r2, #0]
    for (int x = 0; x < dw; ++x) {
 8002c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	dba0      	blt.n	8002be8 <LifeIcon_ResizeTo+0x88>
  for (int y = 0; y < dh; ++y) {
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002ca8:	3301      	adds	r3, #1
 8002caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	f6ff af6e 	blt.w	8002b92 <LifeIcon_ResizeTo+0x32>
    }
  }

  vida1_draw = (const uint8_t*)dst1;
 8002cb6:	4a0d      	ldr	r2, [pc, #52]	@ (8002cec <LifeIcon_ResizeTo+0x18c>)
 8002cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cba:	6013      	str	r3, [r2, #0]
  vida2_draw = (const uint8_t*)dst2;
 8002cbc:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf0 <LifeIcon_ResizeTo+0x190>)
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc0:	6013      	str	r3, [r2, #0]
  vida_draw_w  = dw;
 8002cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf4 <LifeIcon_ResizeTo+0x194>)
 8002cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc6:	6013      	str	r3, [r2, #0]
  vida_draw_h  = dh;
 8002cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8002cf8 <LifeIcon_ResizeTo+0x198>)
 8002cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e000      	b.n	8002cd2 <LifeIcon_ResizeTo+0x172>
  if (dw <= 0 || dh <= 0) return;
 8002cd0:	bf00      	nop
}
 8002cd2:	3750      	adds	r7, #80	@ 0x50
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cda:	bf00      	nop
 8002cdc:	08048b54 	.word	0x08048b54
 8002ce0:	08048fd4 	.word	0x08048fd4
 8002ce4:	200034ec 	.word	0x200034ec
 8002ce8:	20003604 	.word	0x20003604
 8002cec:	20000020 	.word	0x20000020
 8002cf0:	20000024 	.word	0x20000024
 8002cf4:	20000028 	.word	0x20000028
 8002cf8:	2000002c 	.word	0x2000002c

08002cfc <Bananas_Add>:

/* ===================== BANANOS ===================== */
static void Bananas_Add(int x,int y)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  if (s_nban>=MAX_BANANAS) return;
 8002d06:	4b25      	ldr	r3, [pc, #148]	@ (8002d9c <Bananas_Add+0xa0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b1f      	cmp	r3, #31
 8002d0c:	dc3d      	bgt.n	8002d8a <Bananas_Add+0x8e>
  if (x<0||y<0||x+g_ban_draw_w>LCD_W||y+g_ban_draw_h>LCD_H) return;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db3c      	blt.n	8002d8e <Bananas_Add+0x92>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db39      	blt.n	8002d8e <Bananas_Add+0x92>
 8002d1a:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <Bananas_Add+0xa4>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002d26:	dc32      	bgt.n	8002d8e <Bananas_Add+0x92>
 8002d28:	4b1e      	ldr	r3, [pc, #120]	@ (8002da4 <Bananas_Add+0xa8>)
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	4413      	add	r3, r2
 8002d30:	2bf0      	cmp	r3, #240	@ 0xf0
 8002d32:	dc2c      	bgt.n	8002d8e <Bananas_Add+0x92>
  if (RectCollidesMap(x,y,g_ban_draw_w,g_ban_draw_h)) return;
 8002d34:	4b1a      	ldr	r3, [pc, #104]	@ (8002da0 <Bananas_Add+0xa4>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <Bananas_Add+0xa8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6839      	ldr	r1, [r7, #0]
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff fd42 	bl	80027c8 <RectCollidesMap>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d123      	bne.n	8002d92 <Bananas_Add+0x96>
  s_bananas[s_nban++] = (Banana){x,y,1};
 8002d4a:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <Bananas_Add+0xa0>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	1c53      	adds	r3, r2, #1
 8002d50:	4912      	ldr	r1, [pc, #72]	@ (8002d9c <Bananas_Add+0xa0>)
 8002d52:	600b      	str	r3, [r1, #0]
 8002d54:	4914      	ldr	r1, [pc, #80]	@ (8002da8 <Bananas_Add+0xac>)
 8002d56:	4613      	mov	r3, r2
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	6019      	str	r1, [r3, #0]
 8002d64:	4910      	ldr	r1, [pc, #64]	@ (8002da8 <Bananas_Add+0xac>)
 8002d66:	4613      	mov	r3, r2
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3304      	adds	r3, #4
 8002d72:	6839      	ldr	r1, [r7, #0]
 8002d74:	6019      	str	r1, [r3, #0]
 8002d76:	490c      	ldr	r1, [pc, #48]	@ (8002da8 <Bananas_Add+0xac>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3308      	adds	r3, #8
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e004      	b.n	8002d94 <Bananas_Add+0x98>
  if (s_nban>=MAX_BANANAS) return;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <Bananas_Add+0x98>
  if (x<0||y<0||x+g_ban_draw_w>LCD_W||y+g_ban_draw_h>LCD_H) return;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <Bananas_Add+0x98>
  if (RectCollidesMap(x,y,g_ban_draw_w,g_ban_draw_h)) return;
 8002d92:	bf00      	nop
}
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200034e8 	.word	0x200034e8
 8002da0:	20000018 	.word	0x20000018
 8002da4:	2000001c 	.word	0x2000001c
 8002da8:	20003368 	.word	0x20003368

08002dac <Bananas_Init>:

static void Bananas_Init(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
  s_nban=0;
 8002db2:	4b28      	ldr	r3, [pc, #160]	@ (8002e54 <Bananas_Init+0xa8>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
  Bananas_Add(1*TILE_W,             1*TILE_H);
 8002db8:	210e      	movs	r1, #14
 8002dba:	200a      	movs	r0, #10
 8002dbc:	f7ff ff9e 	bl	8002cfc <Bananas_Add>
  Bananas_Add((MAP_COLS-2)*TILE_W,  1*TILE_H);
 8002dc0:	210e      	movs	r1, #14
 8002dc2:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002dc6:	f7ff ff99 	bl	8002cfc <Bananas_Add>
  Bananas_Add(1*TILE_W,            (MAP_ROWS-2)*TILE_H);
 8002dca:	21d2      	movs	r1, #210	@ 0xd2
 8002dcc:	200a      	movs	r0, #10
 8002dce:	f7ff ff95 	bl	8002cfc <Bananas_Add>
  Bananas_Add((MAP_COLS-2)*TILE_W, (MAP_ROWS-2)*TILE_H);
 8002dd2:	21d2      	movs	r1, #210	@ 0xd2
 8002dd4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002dd8:	f7ff ff90 	bl	8002cfc <Bananas_Add>

  int midx = (C_TX0 + C_TX1 + 1)/2;
 8002ddc:	2310      	movs	r3, #16
 8002dde:	607b      	str	r3, [r7, #4]
  int midy = (C_TY0 + C_TY1 + 1)/2;
 8002de0:	2308      	movs	r3, #8
 8002de2:	603b      	str	r3, [r7, #0]
  Bananas_Add(midx*TILE_W, (C_TY0-1)*TILE_H);
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	2146      	movs	r1, #70	@ 0x46
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff83 	bl	8002cfc <Bananas_Add>
  Bananas_Add(midx*TILE_W, (C_TY1+1)*TILE_H);
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	4413      	add	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	219a      	movs	r1, #154	@ 0x9a
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ff7a 	bl	8002cfc <Bananas_Add>
  Bananas_Add((C_TX0-1)*TILE_W, midy*TILE_H);
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4619      	mov	r1, r3
 8002e14:	206e      	movs	r0, #110	@ 0x6e
 8002e16:	f7ff ff71 	bl	8002cfc <Bananas_Add>
  Bananas_Add((C_TX1+1)*TILE_W, midy*TILE_H);
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	1a9b      	subs	r3, r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4619      	mov	r1, r3
 8002e26:	20c8      	movs	r0, #200	@ 0xc8
 8002e28:	f7ff ff68 	bl	8002cfc <Bananas_Add>
  Bananas_Add((C_TX0-1)*TILE_W, (C_TY0-1)*TILE_H);
 8002e2c:	2146      	movs	r1, #70	@ 0x46
 8002e2e:	206e      	movs	r0, #110	@ 0x6e
 8002e30:	f7ff ff64 	bl	8002cfc <Bananas_Add>
  Bananas_Add((C_TX1+1)*TILE_W, (C_TY0-1)*TILE_H);
 8002e34:	2146      	movs	r1, #70	@ 0x46
 8002e36:	20c8      	movs	r0, #200	@ 0xc8
 8002e38:	f7ff ff60 	bl	8002cfc <Bananas_Add>
  Bananas_Add((C_TX0-1)*TILE_W, (C_TY1+1)*TILE_H);
 8002e3c:	219a      	movs	r1, #154	@ 0x9a
 8002e3e:	206e      	movs	r0, #110	@ 0x6e
 8002e40:	f7ff ff5c 	bl	8002cfc <Bananas_Add>
  Bananas_Add((C_TX1+1)*TILE_W, (C_TY1+1)*TILE_H);
 8002e44:	219a      	movs	r1, #154	@ 0x9a
 8002e46:	20c8      	movs	r0, #200	@ 0xc8
 8002e48:	f7ff ff58 	bl	8002cfc <Bananas_Add>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	200034e8 	.word	0x200034e8

08002e58 <Bananas_DrawAll>:

static void Bananas_DrawAll(void)
{
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af02      	add	r7, sp, #8
  for (int i=0;i<s_nban;i++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	607b      	str	r3, [r7, #4]
 8002e62:	e02c      	b.n	8002ebe <Bananas_DrawAll+0x66>
    if (s_bananas[i].alive)
 8002e64:	491b      	ldr	r1, [pc, #108]	@ (8002ed4 <Bananas_DrawAll+0x7c>)
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3308      	adds	r3, #8
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d01e      	beq.n	8002eb8 <Bananas_DrawAll+0x60>
      LCD_Bitmap(s_bananas[i].x, s_bananas[i].y, g_ban_draw_w, g_ban_draw_h, (uint8_t*)g_banana_draw);
 8002e7a:	4916      	ldr	r1, [pc, #88]	@ (8002ed4 <Bananas_DrawAll+0x7c>)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	4911      	ldr	r1, [pc, #68]	@ (8002ed4 <Bananas_DrawAll+0x7c>)
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <Bananas_DrawAll+0x80>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <Bananas_DrawAll+0x84>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	461c      	mov	r4, r3
 8002eac:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee0 <Bananas_DrawAll+0x88>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	f7fe fd1e 	bl	80018f4 <LCD_Bitmap>
  for (int i=0;i<s_nban;i++)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	4b09      	ldr	r3, [pc, #36]	@ (8002ee4 <Bananas_DrawAll+0x8c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbcd      	blt.n	8002e64 <Bananas_DrawAll+0xc>
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20003368 	.word	0x20003368
 8002ed8:	20000018 	.word	0x20000018
 8002edc:	2000001c 	.word	0x2000001c
 8002ee0:	20000014 	.word	0x20000014
 8002ee4:	200034e8 	.word	0x200034e8

08002ee8 <Bananas_RedrawIfOverlapped>:

static void Bananas_RedrawIfOverlapped(int x,int y,int w,int h)
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b08b      	sub	sp, #44	@ 0x2c
 8002eec:	af04      	add	r7, sp, #16
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  for (int i=0;i<s_nban;i++){
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	e050      	b.n	8002f9e <Bananas_RedrawIfOverlapped+0xb6>
    if (!s_bananas[i].alive) continue;
 8002efc:	492d      	ldr	r1, [pc, #180]	@ (8002fb4 <Bananas_RedrawIfOverlapped+0xcc>)
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4613      	mov	r3, r2
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3308      	adds	r3, #8
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d041      	beq.n	8002f96 <Bananas_RedrawIfOverlapped+0xae>
    if (RectIntersects(x,y,w,h, s_bananas[i].x,s_bananas[i].y, g_ban_draw_w, g_ban_draw_h))
 8002f12:	4928      	ldr	r1, [pc, #160]	@ (8002fb4 <Bananas_RedrawIfOverlapped+0xcc>)
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	6819      	ldr	r1, [r3, #0]
 8002f22:	4824      	ldr	r0, [pc, #144]	@ (8002fb4 <Bananas_RedrawIfOverlapped+0xcc>)
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	4613      	mov	r3, r2
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4403      	add	r3, r0
 8002f30:	3304      	adds	r3, #4
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a20      	ldr	r2, [pc, #128]	@ (8002fb8 <Bananas_RedrawIfOverlapped+0xd0>)
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	4820      	ldr	r0, [pc, #128]	@ (8002fbc <Bananas_RedrawIfOverlapped+0xd4>)
 8002f3a:	6800      	ldr	r0, [r0, #0]
 8002f3c:	9003      	str	r0, [sp, #12]
 8002f3e:	9202      	str	r2, [sp, #8]
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	9100      	str	r1, [sp, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f7fe fdd8 	bl	8001b00 <RectIntersects>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d020      	beq.n	8002f98 <Bananas_RedrawIfOverlapped+0xb0>
      LCD_Bitmap(s_bananas[i].x, s_bananas[i].y, g_ban_draw_w, g_ban_draw_h, (uint8_t*)g_banana_draw);
 8002f56:	4917      	ldr	r1, [pc, #92]	@ (8002fb4 <Bananas_RedrawIfOverlapped+0xcc>)
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	4912      	ldr	r1, [pc, #72]	@ (8002fb4 <Bananas_RedrawIfOverlapped+0xcc>)
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	4413      	add	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	3304      	adds	r3, #4
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fb8 <Bananas_RedrawIfOverlapped+0xd0>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <Bananas_RedrawIfOverlapped+0xd4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461c      	mov	r4, r3
 8002f88:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <Bananas_RedrawIfOverlapped+0xd8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4623      	mov	r3, r4
 8002f90:	f7fe fcb0 	bl	80018f4 <LCD_Bitmap>
 8002f94:	e000      	b.n	8002f98 <Bananas_RedrawIfOverlapped+0xb0>
    if (!s_bananas[i].alive) continue;
 8002f96:	bf00      	nop
  for (int i=0;i<s_nban;i++){
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	4b09      	ldr	r3, [pc, #36]	@ (8002fc4 <Bananas_RedrawIfOverlapped+0xdc>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	dba9      	blt.n	8002efc <Bananas_RedrawIfOverlapped+0x14>
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd90      	pop	{r4, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20003368 	.word	0x20003368
 8002fb8:	20000018 	.word	0x20000018
 8002fbc:	2000001c 	.word	0x2000001c
 8002fc0:	20000014 	.word	0x20000014
 8002fc4:	200034e8 	.word	0x200034e8

08002fc8 <Bananas_CheckPickup>:

static void Bananas_CheckPickup(int jx,int jy,int jw,int jh,int who)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	@ 0x28
 8002fcc:	af04      	add	r7, sp, #16
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  for (int i=0;i<s_nban;i++){
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e040      	b.n	800305e <Bananas_CheckPickup+0x96>
    Banana *b = &s_bananas[i];
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4a23      	ldr	r2, [pc, #140]	@ (8003074 <Bananas_CheckPickup+0xac>)
 8002fe8:	4413      	add	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]
    if (!b->alive) continue;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	7a1b      	ldrb	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d030      	beq.n	8003056 <Bananas_CheckPickup+0x8e>
    if (RectIntersects(jx,jy,jw,jh, b->x,b->y, g_ban_draw_w, g_ban_draw_h)) {
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	6852      	ldr	r2, [r2, #4]
 8002ffc:	491e      	ldr	r1, [pc, #120]	@ (8003078 <Bananas_CheckPickup+0xb0>)
 8002ffe:	6809      	ldr	r1, [r1, #0]
 8003000:	481e      	ldr	r0, [pc, #120]	@ (800307c <Bananas_CheckPickup+0xb4>)
 8003002:	6800      	ldr	r0, [r0, #0]
 8003004:	9003      	str	r0, [sp, #12]
 8003006:	9102      	str	r1, [sp, #8]
 8003008:	9201      	str	r2, [sp, #4]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7fe fd74 	bl	8001b00 <RectIntersects>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01c      	beq.n	8003058 <Bananas_CheckPickup+0x90>
      b->alive = 0;
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2200      	movs	r2, #0
 8003022:	721a      	strb	r2, [r3, #8]
      PatchFromMap(b->x, b->y, g_ban_draw_w, g_ban_draw_h);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	4b12      	ldr	r3, [pc, #72]	@ (8003078 <Bananas_CheckPickup+0xb0>)
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b12      	ldr	r3, [pc, #72]	@ (800307c <Bananas_CheckPickup+0xb4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f7ff fb28 	bl	8002688 <PatchFromMap>
      if (who==1) p1_score += 50; else p2_score += 50;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d105      	bne.n	800304a <Bananas_CheckPickup+0x82>
 800303e:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <Bananas_CheckPickup+0xb8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3332      	adds	r3, #50	@ 0x32
 8003044:	4a0e      	ldr	r2, [pc, #56]	@ (8003080 <Bananas_CheckPickup+0xb8>)
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	e006      	b.n	8003058 <Bananas_CheckPickup+0x90>
 800304a:	4b0e      	ldr	r3, [pc, #56]	@ (8003084 <Bananas_CheckPickup+0xbc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	3332      	adds	r3, #50	@ 0x32
 8003050:	4a0c      	ldr	r2, [pc, #48]	@ (8003084 <Bananas_CheckPickup+0xbc>)
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	e000      	b.n	8003058 <Bananas_CheckPickup+0x90>
    if (!b->alive) continue;
 8003056:	bf00      	nop
  for (int i=0;i<s_nban;i++){
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	3301      	adds	r3, #1
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	4b0a      	ldr	r3, [pc, #40]	@ (8003088 <Bananas_CheckPickup+0xc0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	429a      	cmp	r2, r3
 8003066:	dbb9      	blt.n	8002fdc <Bananas_CheckPickup+0x14>
    }
  }
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20003368 	.word	0x20003368
 8003078:	20000018 	.word	0x20000018
 800307c:	2000001c 	.word	0x2000001c
 8003080:	200016e8 	.word	0x200016e8
 8003084:	20001718 	.word	0x20001718
 8003088:	200034e8 	.word	0x200034e8

0800308c <Bananas_Left>:
static int Bananas_Left(void){
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
  int left=0; for(int i=0;i<s_nban;i++) if (s_bananas[i].alive) left++; return left;
 8003092:	2300      	movs	r3, #0
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	2300      	movs	r3, #0
 8003098:	603b      	str	r3, [r7, #0]
 800309a:	e010      	b.n	80030be <Bananas_Left+0x32>
 800309c:	490e      	ldr	r1, [pc, #56]	@ (80030d8 <Bananas_Left+0x4c>)
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3308      	adds	r3, #8
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <Bananas_Left+0x2c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3301      	adds	r3, #1
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	3301      	adds	r3, #1
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4b07      	ldr	r3, [pc, #28]	@ (80030dc <Bananas_Left+0x50>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	dbe9      	blt.n	800309c <Bananas_Left+0x10>
 80030c8:	687b      	ldr	r3, [r7, #4]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20003368 	.word	0x20003368
 80030dc:	200034e8 	.word	0x200034e8

080030e0 <SheetToDir>:

/* ===================== A/B: helpers ===================== */
static Dir SheetToDir(const Sheet *s, Dir fallback){
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	70fb      	strb	r3, [r7, #3]
  if (s==&P1_S_R || s==&P2_S_R) return D_RIGHT;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a17      	ldr	r2, [pc, #92]	@ (800314c <SheetToDir+0x6c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d003      	beq.n	80030fc <SheetToDir+0x1c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a16      	ldr	r2, [pc, #88]	@ (8003150 <SheetToDir+0x70>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d101      	bne.n	8003100 <SheetToDir+0x20>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e01e      	b.n	800313e <SheetToDir+0x5e>
  if (s==&P1_S_L || s==&P2_S_L) return D_LEFT;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a14      	ldr	r2, [pc, #80]	@ (8003154 <SheetToDir+0x74>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d003      	beq.n	8003110 <SheetToDir+0x30>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a13      	ldr	r2, [pc, #76]	@ (8003158 <SheetToDir+0x78>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d101      	bne.n	8003114 <SheetToDir+0x34>
 8003110:	2303      	movs	r3, #3
 8003112:	e014      	b.n	800313e <SheetToDir+0x5e>
  if (s==&P1_S_F || s==&P2_S_F) return D_DOWN;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a11      	ldr	r2, [pc, #68]	@ (800315c <SheetToDir+0x7c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d003      	beq.n	8003124 <SheetToDir+0x44>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a10      	ldr	r2, [pc, #64]	@ (8003160 <SheetToDir+0x80>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <SheetToDir+0x48>
 8003124:	2302      	movs	r3, #2
 8003126:	e00a      	b.n	800313e <SheetToDir+0x5e>
  if (s==&P1_S_B || s==&P2_S_B) return D_UP;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4a0e      	ldr	r2, [pc, #56]	@ (8003164 <SheetToDir+0x84>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d003      	beq.n	8003138 <SheetToDir+0x58>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <SheetToDir+0x88>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d101      	bne.n	800313c <SheetToDir+0x5c>
 8003138:	2304      	movs	r3, #4
 800313a:	e000      	b.n	800313e <SheetToDir+0x5e>
  return fallback;
 800313c:	78fb      	ldrb	r3, [r7, #3]
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	0804a4d8 	.word	0x0804a4d8
 8003150:	0804a538 	.word	0x0804a538
 8003154:	0804a4c8 	.word	0x0804a4c8
 8003158:	0804a528 	.word	0x0804a528
 800315c:	0804a4a8 	.word	0x0804a4a8
 8003160:	0804a508 	.word	0x0804a508
 8003164:	0804a4b8 	.word	0x0804a4b8
 8003168:	0804a518 	.word	0x0804a518

0800316c <EntityBlocksTile>:
static bool EntityBlocksTile(int tx,int ty, int ex,int ey,int ew,int eh){
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	@ 0x28
 8003170:	af04      	add	r7, sp, #16
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  int x=tx*TILE_W, y=ty*TILE_H;
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	1a9b      	subs	r3, r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	613b      	str	r3, [r7, #16]
  return RectIntersects(x,y,TILE_W,TILE_H, ex,ey,ew,eh);
 8003192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003194:	9303      	str	r3, [sp, #12]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	9302      	str	r3, [sp, #8]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	230e      	movs	r3, #14
 80031a4:	220a      	movs	r2, #10
 80031a6:	6939      	ldr	r1, [r7, #16]
 80031a8:	6978      	ldr	r0, [r7, #20]
 80031aa:	f7fe fca9 	bl	8001b00 <RectIntersects>
 80031ae:	4603      	mov	r3, r0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <Line_RemoveFrom>:

static void Line_RemoveFrom(int tx,int ty, Dir d)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	4613      	mov	r3, r2
 80031c4:	71fb      	strb	r3, [r7, #7]
  int dx=0,dy=0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	2300      	movs	r3, #0
 80031cc:	613b      	str	r3, [r7, #16]
  if (d==D_RIGHT) dx=1; else if(d==D_LEFT) dx=-1; else if(d==D_DOWN) dy=1; else if(d==D_UP) dy=-1; else return;
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d102      	bne.n	80031da <Line_RemoveFrom+0x22>
 80031d4:	2301      	movs	r3, #1
 80031d6:	617b      	str	r3, [r7, #20]
 80031d8:	e039      	b.n	800324e <Line_RemoveFrom+0x96>
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d103      	bne.n	80031e8 <Line_RemoveFrom+0x30>
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	617b      	str	r3, [r7, #20]
 80031e6:	e032      	b.n	800324e <Line_RemoveFrom+0x96>
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d102      	bne.n	80031f4 <Line_RemoveFrom+0x3c>
 80031ee:	2301      	movs	r3, #1
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	e02c      	b.n	800324e <Line_RemoveFrom+0x96>
 80031f4:	79fb      	ldrb	r3, [r7, #7]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d136      	bne.n	8003268 <Line_RemoveFrom+0xb0>
 80031fa:	f04f 33ff 	mov.w	r3, #4294967295
 80031fe:	613b      	str	r3, [r7, #16]

  while (tx>=0 && ty>=0 && tx<MAP_COLS && ty<MAP_ROWS){
 8003200:	e025      	b.n	800324e <Line_RemoveFrom+0x96>
    if (g_fixed[ty][tx]) break;
 8003202:	4a1d      	ldr	r2, [pc, #116]	@ (8003278 <Line_RemoveFrom+0xc0>)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	015b      	lsls	r3, r3, #5
 8003208:	441a      	add	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d12b      	bne.n	800326c <Line_RemoveFrom+0xb4>
    if (!g_map[ty][tx]) break;
 8003214:	4a19      	ldr	r2, [pc, #100]	@ (800327c <Line_RemoveFrom+0xc4>)
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	015b      	lsls	r3, r3, #5
 800321a:	441a      	add	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	4413      	add	r3, r2
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d024      	beq.n	8003270 <Line_RemoveFrom+0xb8>
    g_map[ty][tx]=0;
 8003226:	4a15      	ldr	r2, [pc, #84]	@ (800327c <Line_RemoveFrom+0xc4>)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	015b      	lsls	r3, r3, #5
 800322c:	441a      	add	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4413      	add	r3, r2
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
    DrawBlackTile(tx,ty);
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f7ff f9f1 	bl	8002620 <DrawBlackTile>
    tx+=dx; ty+=dy;
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	4413      	add	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68ba      	ldr	r2, [r7, #8]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4413      	add	r3, r2
 800324c:	60bb      	str	r3, [r7, #8]
  while (tx>=0 && ty>=0 && tx<MAP_COLS && ty<MAP_ROWS){
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0e      	blt.n	8003272 <Line_RemoveFrom+0xba>
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <Line_RemoveFrom+0xba>
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2b1f      	cmp	r3, #31
 800325e:	dc08      	bgt.n	8003272 <Line_RemoveFrom+0xba>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b10      	cmp	r3, #16
 8003264:	ddcd      	ble.n	8003202 <Line_RemoveFrom+0x4a>
 8003266:	e004      	b.n	8003272 <Line_RemoveFrom+0xba>
  if (d==D_RIGHT) dx=1; else if(d==D_LEFT) dx=-1; else if(d==D_DOWN) dy=1; else if(d==D_UP) dy=-1; else return;
 8003268:	bf00      	nop
 800326a:	e002      	b.n	8003272 <Line_RemoveFrom+0xba>
    if (g_fixed[ty][tx]) break;
 800326c:	bf00      	nop
 800326e:	e000      	b.n	8003272 <Line_RemoveFrom+0xba>
    if (!g_map[ty][tx]) break;
 8003270:	bf00      	nop
  }
}
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200014b4 	.word	0x200014b4
 800327c:	20001294 	.word	0x20001294

08003280 <Line_CreateFrom>:

static void Line_CreateFrom(int tx,int ty, Dir d,
                            int ex1,int ey1,int ew1,int eh1,
                            int ex2,int ey2,int ew2,int eh2)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  int dx=0,dy=0;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]
  if (d==D_RIGHT) dx=1; else if(d==D_LEFT) dx=-1; else if(d==D_DOWN) dy=1; else if(d==D_UP) dy=-1; else return;
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d102      	bne.n	80032a4 <Line_CreateFrom+0x24>
 800329e:	2301      	movs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e061      	b.n	8003368 <Line_CreateFrom+0xe8>
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d103      	bne.n	80032b2 <Line_CreateFrom+0x32>
 80032aa:	f04f 33ff 	mov.w	r3, #4294967295
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	e05a      	b.n	8003368 <Line_CreateFrom+0xe8>
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d102      	bne.n	80032be <Line_CreateFrom+0x3e>
 80032b8:	2301      	movs	r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	e054      	b.n	8003368 <Line_CreateFrom+0xe8>
 80032be:	79fb      	ldrb	r3, [r7, #7]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d15e      	bne.n	8003382 <Line_CreateFrom+0x102>
 80032c4:	f04f 33ff 	mov.w	r3, #4294967295
 80032c8:	613b      	str	r3, [r7, #16]

  while (tx>=0 && ty>=0 && tx<MAP_COLS && ty<MAP_ROWS){
 80032ca:	e04d      	b.n	8003368 <Line_CreateFrom+0xe8>
    if (g_fixed[ty][tx]) break;
 80032cc:	4a33      	ldr	r2, [pc, #204]	@ (800339c <Line_CreateFrom+0x11c>)
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	015b      	lsls	r3, r3, #5
 80032d2:	441a      	add	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d153      	bne.n	8003386 <Line_CreateFrom+0x106>
    if (g_map[ty][tx]) break;
 80032de:	4a30      	ldr	r2, [pc, #192]	@ (80033a0 <Line_CreateFrom+0x120>)
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	015b      	lsls	r3, r3, #5
 80032e4:	441a      	add	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4413      	add	r3, r2
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d14c      	bne.n	800338a <Line_CreateFrom+0x10a>
    if (EntityBlocksTile(tx,ty, ex1,ey1,ew1,eh1)) break;
 80032f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f2:	9301      	str	r3, [sp, #4]
 80032f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff ff34 	bl	800316c <EntityBlocksTile>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d141      	bne.n	800338e <Line_CreateFrom+0x10e>
    if (EntityBlocksTile(tx,ty, ex2,ey2,ew2,eh2)) break;
 800330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003316:	68b9      	ldr	r1, [r7, #8]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f7ff ff27 	bl	800316c <EntityBlocksTile>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d136      	bne.n	8003392 <Line_CreateFrom+0x112>

    g_map[ty][tx]=1;
 8003324:	4a1e      	ldr	r2, [pc, #120]	@ (80033a0 <Line_CreateFrom+0x120>)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	015b      	lsls	r3, r3, #5
 800332a:	441a      	add	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	2201      	movs	r2, #1
 8003332:	701a      	strb	r2, [r3, #0]
    LCD_Bitmap(tx*TILE_W, ty*TILE_H, TILE_W, TILE_H, bloque);
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	4613      	mov	r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	4413      	add	r3, r2
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	4618      	mov	r0, r3
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	4613      	mov	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	4619      	mov	r1, r3
 800334c:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <Line_CreateFrom+0x124>)
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	230e      	movs	r3, #14
 8003352:	220a      	movs	r2, #10
 8003354:	f7fe face 	bl	80018f4 <LCD_Bitmap>

    tx+=dx; ty+=dy;
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4413      	add	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4413      	add	r3, r2
 8003366:	60bb      	str	r3, [r7, #8]
  while (tx>=0 && ty>=0 && tx<MAP_COLS && ty<MAP_ROWS){
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	db12      	blt.n	8003394 <Line_CreateFrom+0x114>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	db0f      	blt.n	8003394 <Line_CreateFrom+0x114>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2b1f      	cmp	r3, #31
 8003378:	dc0c      	bgt.n	8003394 <Line_CreateFrom+0x114>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b10      	cmp	r3, #16
 800337e:	dda5      	ble.n	80032cc <Line_CreateFrom+0x4c>
 8003380:	e008      	b.n	8003394 <Line_CreateFrom+0x114>
  if (d==D_RIGHT) dx=1; else if(d==D_LEFT) dx=-1; else if(d==D_DOWN) dy=1; else if(d==D_UP) dy=-1; else return;
 8003382:	bf00      	nop
 8003384:	e006      	b.n	8003394 <Line_CreateFrom+0x114>
    if (g_fixed[ty][tx]) break;
 8003386:	bf00      	nop
 8003388:	e004      	b.n	8003394 <Line_CreateFrom+0x114>
    if (g_map[ty][tx]) break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <Line_CreateFrom+0x114>
    if (EntityBlocksTile(tx,ty, ex1,ey1,ew1,eh1)) break;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <Line_CreateFrom+0x114>
    if (EntityBlocksTile(tx,ty, ex2,ey2,ew2,eh2)) break;
 8003392:	bf00      	nop
  }
}
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	200014b4 	.word	0x200014b4
 80033a0:	20001294 	.word	0x20001294
 80033a4:	08035068 	.word	0x08035068

080033a8 <TryActionErase_Create>:

static void TryActionErase_Create(const char who)
{
 80033a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033aa:	b095      	sub	sp, #84	@ 0x54
 80033ac:	af08      	add	r7, sp, #32
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  int jx, jy, jw, jh; const Sheet *sh; Dir *pdir;
  if (who==1){ jx=p1_x; jy=p1_y; sh=p1_sh; jw=p1_sh->w; jh=p1_sh->h; pdir=&p1_dir; }
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d113      	bne.n	80033e0 <TryActionErase_Create+0x38>
 80033b8:	4b96      	ldr	r3, [pc, #600]	@ (8003614 <TryActionErase_Create+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033be:	4b96      	ldr	r3, [pc, #600]	@ (8003618 <TryActionErase_Create+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033c4:	4b95      	ldr	r3, [pc, #596]	@ (800361c <TryActionErase_Create+0x274>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	61fb      	str	r3, [r7, #28]
 80033ca:	4b94      	ldr	r3, [pc, #592]	@ (800361c <TryActionErase_Create+0x274>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d2:	4b92      	ldr	r3, [pc, #584]	@ (800361c <TryActionErase_Create+0x274>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	4b91      	ldr	r3, [pc, #580]	@ (8003620 <TryActionErase_Create+0x278>)
 80033dc:	61bb      	str	r3, [r7, #24]
 80033de:	e012      	b.n	8003406 <TryActionErase_Create+0x5e>
  else       { jx=p2_x; jy=p2_y; sh=p2_sh; jw=p2_sh->w; jh=p2_sh->h; pdir=&p2_dir; }
 80033e0:	4b90      	ldr	r3, [pc, #576]	@ (8003624 <TryActionErase_Create+0x27c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033e6:	4b90      	ldr	r3, [pc, #576]	@ (8003628 <TryActionErase_Create+0x280>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033ec:	4b8f      	ldr	r3, [pc, #572]	@ (800362c <TryActionErase_Create+0x284>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	61fb      	str	r3, [r7, #28]
 80033f2:	4b8e      	ldr	r3, [pc, #568]	@ (800362c <TryActionErase_Create+0x284>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033fa:	4b8c      	ldr	r3, [pc, #560]	@ (800362c <TryActionErase_Create+0x284>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	4b8b      	ldr	r3, [pc, #556]	@ (8003630 <TryActionErase_Create+0x288>)
 8003404:	61bb      	str	r3, [r7, #24]

  Dir d = SheetToDir(sh, *pdir);
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	4619      	mov	r1, r3
 800340c:	69f8      	ldr	r0, [r7, #28]
 800340e:	f7ff fe67 	bl	80030e0 <SheetToDir>
 8003412:	4603      	mov	r3, r0
 8003414:	73fb      	strb	r3, [r7, #15]
  *pdir = d;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	7bfa      	ldrb	r2, [r7, #15]
 800341a:	701a      	strb	r2, [r3, #0]

  int tx,ty;
  if (d==D_RIGHT){ tx = (jx + jw)/TILE_W; ty = (jy + jh/2)/TILE_H; }
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d119      	bne.n	8003456 <TryActionErase_Create+0xae>
 8003422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	4413      	add	r3, r2
 8003428:	4a82      	ldr	r2, [pc, #520]	@ (8003634 <TryActionErase_Create+0x28c>)
 800342a:	fb82 1203 	smull	r1, r2, r2, r3
 800342e:	1092      	asrs	r2, r2, #2
 8003430:	17db      	asrs	r3, r3, #31
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	0fda      	lsrs	r2, r3, #31
 800343a:	4413      	add	r3, r2
 800343c:	105b      	asrs	r3, r3, #1
 800343e:	461a      	mov	r2, r3
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003442:	4413      	add	r3, r2
 8003444:	4a7c      	ldr	r2, [pc, #496]	@ (8003638 <TryActionErase_Create+0x290>)
 8003446:	fb82 1203 	smull	r1, r2, r2, r3
 800344a:	441a      	add	r2, r3
 800344c:	10d2      	asrs	r2, r2, #3
 800344e:	17db      	asrs	r3, r3, #31
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e054      	b.n	8003500 <TryActionErase_Create+0x158>
  else if (d==D_LEFT){ tx = (jx - 1)/TILE_W; ty = (jy + jh/2)/TILE_H; }
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b03      	cmp	r3, #3
 800345a:	d118      	bne.n	800348e <TryActionErase_Create+0xe6>
 800345c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800345e:	3b01      	subs	r3, #1
 8003460:	4a74      	ldr	r2, [pc, #464]	@ (8003634 <TryActionErase_Create+0x28c>)
 8003462:	fb82 1203 	smull	r1, r2, r2, r3
 8003466:	1092      	asrs	r2, r2, #2
 8003468:	17db      	asrs	r3, r3, #31
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	0fda      	lsrs	r2, r3, #31
 8003472:	4413      	add	r3, r2
 8003474:	105b      	asrs	r3, r3, #1
 8003476:	461a      	mov	r2, r3
 8003478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347a:	4413      	add	r3, r2
 800347c:	4a6e      	ldr	r2, [pc, #440]	@ (8003638 <TryActionErase_Create+0x290>)
 800347e:	fb82 1203 	smull	r1, r2, r2, r3
 8003482:	441a      	add	r2, r3
 8003484:	10d2      	asrs	r2, r2, #3
 8003486:	17db      	asrs	r3, r3, #31
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	e038      	b.n	8003500 <TryActionErase_Create+0x158>
  else if (d==D_DOWN){ tx = (jx + jw/2)/TILE_W; ty = (jy + jh)/TILE_H; }
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d119      	bne.n	80034c8 <TryActionErase_Create+0x120>
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	0fda      	lsrs	r2, r3, #31
 8003498:	4413      	add	r3, r2
 800349a:	105b      	asrs	r3, r3, #1
 800349c:	461a      	mov	r2, r3
 800349e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a0:	4413      	add	r3, r2
 80034a2:	4a64      	ldr	r2, [pc, #400]	@ (8003634 <TryActionErase_Create+0x28c>)
 80034a4:	fb82 1203 	smull	r1, r2, r2, r3
 80034a8:	1092      	asrs	r2, r2, #2
 80034aa:	17db      	asrs	r3, r3, #31
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	4413      	add	r3, r2
 80034b6:	4a60      	ldr	r2, [pc, #384]	@ (8003638 <TryActionErase_Create+0x290>)
 80034b8:	fb82 1203 	smull	r1, r2, r2, r3
 80034bc:	441a      	add	r2, r3
 80034be:	10d2      	asrs	r2, r2, #3
 80034c0:	17db      	asrs	r3, r3, #31
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	e01b      	b.n	8003500 <TryActionErase_Create+0x158>
  else if (d==D_UP){ tx = (jx + jw/2)/TILE_W; ty = (jy - 1)/TILE_H; }
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	f040 80f8 	bne.w	80036c0 <TryActionErase_Create+0x318>
 80034d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d2:	0fda      	lsrs	r2, r3, #31
 80034d4:	4413      	add	r3, r2
 80034d6:	105b      	asrs	r3, r3, #1
 80034d8:	461a      	mov	r2, r3
 80034da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034dc:	4413      	add	r3, r2
 80034de:	4a55      	ldr	r2, [pc, #340]	@ (8003634 <TryActionErase_Create+0x28c>)
 80034e0:	fb82 1203 	smull	r1, r2, r2, r3
 80034e4:	1092      	asrs	r2, r2, #2
 80034e6:	17db      	asrs	r3, r3, #31
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ee:	3b01      	subs	r3, #1
 80034f0:	4a51      	ldr	r2, [pc, #324]	@ (8003638 <TryActionErase_Create+0x290>)
 80034f2:	fb82 1203 	smull	r1, r2, r2, r3
 80034f6:	441a      	add	r2, r3
 80034f8:	10d2      	asrs	r2, r2, #3
 80034fa:	17db      	asrs	r3, r3, #31
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	613b      	str	r3, [r7, #16]
  else return;

  if (tx<0||ty<0||tx>=MAP_COLS||ty>=MAP_ROWS) return;
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	f2c0 80de 	blt.w	80036c4 <TryActionErase_Create+0x31c>
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	f2c0 80da 	blt.w	80036c4 <TryActionErase_Create+0x31c>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b1f      	cmp	r3, #31
 8003514:	f300 80d6 	bgt.w	80036c4 <TryActionErase_Create+0x31c>
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b10      	cmp	r3, #16
 800351c:	f300 80d2 	bgt.w	80036c4 <TryActionErase_Create+0x31c>

  if (who==1){
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d153      	bne.n	80035ce <TryActionErase_Create+0x226>
    if (p1_act.active && (p1_act.sheet==&P1_S_X)) { if (g_map[ty][tx] && !g_fixed[ty][tx]) Line_RemoveFrom(tx,ty,d); }
 8003526:	4b45      	ldr	r3, [pc, #276]	@ (800363c <TryActionErase_Create+0x294>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01f      	beq.n	800356e <TryActionErase_Create+0x1c6>
 800352e:	4b43      	ldr	r3, [pc, #268]	@ (800363c <TryActionErase_Create+0x294>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4a43      	ldr	r2, [pc, #268]	@ (8003640 <TryActionErase_Create+0x298>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d11a      	bne.n	800356e <TryActionErase_Create+0x1c6>
 8003538:	4a42      	ldr	r2, [pc, #264]	@ (8003644 <TryActionErase_Create+0x29c>)
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	015b      	lsls	r3, r3, #5
 800353e:	441a      	add	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	4413      	add	r3, r2
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80be 	beq.w	80036c8 <TryActionErase_Create+0x320>
 800354c:	4a3e      	ldr	r2, [pc, #248]	@ (8003648 <TryActionErase_Create+0x2a0>)
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	015b      	lsls	r3, r3, #5
 8003552:	441a      	add	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	4413      	add	r3, r2
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f040 80b4 	bne.w	80036c8 <TryActionErase_Create+0x320>
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	461a      	mov	r2, r3
 8003564:	6939      	ldr	r1, [r7, #16]
 8003566:	6978      	ldr	r0, [r7, #20]
 8003568:	f7ff fe26 	bl	80031b8 <Line_RemoveFrom>
 800356c:	e0ac      	b.n	80036c8 <TryActionErase_Create+0x320>
    else if (p1_act.active && (p1_act.sheet==&P1_S_C)) { Line_CreateFrom(tx,ty,d, p2_x,p2_y,p2_sh->w,p2_sh->h, en_x,en_y,en_sh->w,en_sh->h); }
 800356e:	4b33      	ldr	r3, [pc, #204]	@ (800363c <TryActionErase_Create+0x294>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 80ab 	beq.w	80036ce <TryActionErase_Create+0x326>
 8003578:	4b30      	ldr	r3, [pc, #192]	@ (800363c <TryActionErase_Create+0x294>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a33      	ldr	r2, [pc, #204]	@ (800364c <TryActionErase_Create+0x2a4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	f040 80a5 	bne.w	80036ce <TryActionErase_Create+0x326>
 8003584:	4b27      	ldr	r3, [pc, #156]	@ (8003624 <TryActionErase_Create+0x27c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	4b27      	ldr	r3, [pc, #156]	@ (8003628 <TryActionErase_Create+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a27      	ldr	r2, [pc, #156]	@ (800362c <TryActionErase_Create+0x284>)
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	6852      	ldr	r2, [r2, #4]
 8003594:	4925      	ldr	r1, [pc, #148]	@ (800362c <TryActionErase_Create+0x284>)
 8003596:	6809      	ldr	r1, [r1, #0]
 8003598:	6889      	ldr	r1, [r1, #8]
 800359a:	482d      	ldr	r0, [pc, #180]	@ (8003650 <TryActionErase_Create+0x2a8>)
 800359c:	6800      	ldr	r0, [r0, #0]
 800359e:	4c2d      	ldr	r4, [pc, #180]	@ (8003654 <TryActionErase_Create+0x2ac>)
 80035a0:	6824      	ldr	r4, [r4, #0]
 80035a2:	4d2d      	ldr	r5, [pc, #180]	@ (8003658 <TryActionErase_Create+0x2b0>)
 80035a4:	682d      	ldr	r5, [r5, #0]
 80035a6:	686d      	ldr	r5, [r5, #4]
 80035a8:	4e2b      	ldr	r6, [pc, #172]	@ (8003658 <TryActionErase_Create+0x2b0>)
 80035aa:	6836      	ldr	r6, [r6, #0]
 80035ac:	68b6      	ldr	r6, [r6, #8]
 80035ae:	f897 c00f 	ldrb.w	ip, [r7, #15]
 80035b2:	9606      	str	r6, [sp, #24]
 80035b4:	9505      	str	r5, [sp, #20]
 80035b6:	9404      	str	r4, [sp, #16]
 80035b8:	9003      	str	r0, [sp, #12]
 80035ba:	9102      	str	r1, [sp, #8]
 80035bc:	9201      	str	r2, [sp, #4]
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	4662      	mov	r2, ip
 80035c4:	6939      	ldr	r1, [r7, #16]
 80035c6:	6978      	ldr	r0, [r7, #20]
 80035c8:	f7ff fe5a 	bl	8003280 <Line_CreateFrom>
 80035cc:	e07f      	b.n	80036ce <TryActionErase_Create+0x326>
  } else {
    if (p2_act.active && (p2_act.sheet==&P2_S_X)) { if (g_map[ty][tx] && !g_fixed[ty][tx]) Line_RemoveFrom(tx,ty,d); }
 80035ce:	4b23      	ldr	r3, [pc, #140]	@ (800365c <TryActionErase_Create+0x2b4>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d046      	beq.n	8003664 <TryActionErase_Create+0x2bc>
 80035d6:	4b21      	ldr	r3, [pc, #132]	@ (800365c <TryActionErase_Create+0x2b4>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a21      	ldr	r2, [pc, #132]	@ (8003660 <TryActionErase_Create+0x2b8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d141      	bne.n	8003664 <TryActionErase_Create+0x2bc>
 80035e0:	4a18      	ldr	r2, [pc, #96]	@ (8003644 <TryActionErase_Create+0x29c>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	015b      	lsls	r3, r3, #5
 80035e6:	441a      	add	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	4413      	add	r3, r2
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d06c      	beq.n	80036cc <TryActionErase_Create+0x324>
 80035f2:	4a15      	ldr	r2, [pc, #84]	@ (8003648 <TryActionErase_Create+0x2a0>)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	015b      	lsls	r3, r3, #5
 80035f8:	441a      	add	r2, r3
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	4413      	add	r3, r2
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d163      	bne.n	80036cc <TryActionErase_Create+0x324>
 8003604:	7bfb      	ldrb	r3, [r7, #15]
 8003606:	461a      	mov	r2, r3
 8003608:	6939      	ldr	r1, [r7, #16]
 800360a:	6978      	ldr	r0, [r7, #20]
 800360c:	f7ff fdd4 	bl	80031b8 <Line_RemoveFrom>
 8003610:	e05c      	b.n	80036cc <TryActionErase_Create+0x324>
 8003612:	bf00      	nop
 8003614:	200016d4 	.word	0x200016d4
 8003618:	200016d8 	.word	0x200016d8
 800361c:	200016dc 	.word	0x200016dc
 8003620:	20000002 	.word	0x20000002
 8003624:	20001704 	.word	0x20001704
 8003628:	20001708 	.word	0x20001708
 800362c:	2000170c 	.word	0x2000170c
 8003630:	20000004 	.word	0x20000004
 8003634:	66666667 	.word	0x66666667
 8003638:	92492493 	.word	0x92492493
 800363c:	200016ec 	.word	0x200016ec
 8003640:	0804a4f8 	.word	0x0804a4f8
 8003644:	20001294 	.word	0x20001294
 8003648:	200014b4 	.word	0x200014b4
 800364c:	0804a4e8 	.word	0x0804a4e8
 8003650:	20001734 	.word	0x20001734
 8003654:	20001738 	.word	0x20001738
 8003658:	2000173c 	.word	0x2000173c
 800365c:	2000171c 	.word	0x2000171c
 8003660:	0804a558 	.word	0x0804a558
    else if (p2_act.active && (p2_act.sheet==&P2_S_C)) { Line_CreateFrom(tx,ty,d, p1_x,p1_y,p1_sh->w,p1_sh->h, en_x,en_y,en_sh->w,en_sh->h); }
 8003664:	4b1b      	ldr	r3, [pc, #108]	@ (80036d4 <TryActionErase_Create+0x32c>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d030      	beq.n	80036ce <TryActionErase_Create+0x326>
 800366c:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <TryActionErase_Create+0x32c>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a19      	ldr	r2, [pc, #100]	@ (80036d8 <TryActionErase_Create+0x330>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d12b      	bne.n	80036ce <TryActionErase_Create+0x326>
 8003676:	4b19      	ldr	r3, [pc, #100]	@ (80036dc <TryActionErase_Create+0x334>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	603b      	str	r3, [r7, #0]
 800367c:	4b18      	ldr	r3, [pc, #96]	@ (80036e0 <TryActionErase_Create+0x338>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a18      	ldr	r2, [pc, #96]	@ (80036e4 <TryActionErase_Create+0x33c>)
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	6852      	ldr	r2, [r2, #4]
 8003686:	4917      	ldr	r1, [pc, #92]	@ (80036e4 <TryActionErase_Create+0x33c>)
 8003688:	6809      	ldr	r1, [r1, #0]
 800368a:	6889      	ldr	r1, [r1, #8]
 800368c:	4816      	ldr	r0, [pc, #88]	@ (80036e8 <TryActionErase_Create+0x340>)
 800368e:	6800      	ldr	r0, [r0, #0]
 8003690:	4c16      	ldr	r4, [pc, #88]	@ (80036ec <TryActionErase_Create+0x344>)
 8003692:	6824      	ldr	r4, [r4, #0]
 8003694:	4d16      	ldr	r5, [pc, #88]	@ (80036f0 <TryActionErase_Create+0x348>)
 8003696:	682d      	ldr	r5, [r5, #0]
 8003698:	686d      	ldr	r5, [r5, #4]
 800369a:	4e15      	ldr	r6, [pc, #84]	@ (80036f0 <TryActionErase_Create+0x348>)
 800369c:	6836      	ldr	r6, [r6, #0]
 800369e:	68b6      	ldr	r6, [r6, #8]
 80036a0:	f897 c00f 	ldrb.w	ip, [r7, #15]
 80036a4:	9606      	str	r6, [sp, #24]
 80036a6:	9505      	str	r5, [sp, #20]
 80036a8:	9404      	str	r4, [sp, #16]
 80036aa:	9003      	str	r0, [sp, #12]
 80036ac:	9102      	str	r1, [sp, #8]
 80036ae:	9201      	str	r2, [sp, #4]
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	4662      	mov	r2, ip
 80036b6:	6939      	ldr	r1, [r7, #16]
 80036b8:	6978      	ldr	r0, [r7, #20]
 80036ba:	f7ff fde1 	bl	8003280 <Line_CreateFrom>
 80036be:	e006      	b.n	80036ce <TryActionErase_Create+0x326>
  else return;
 80036c0:	bf00      	nop
 80036c2:	e004      	b.n	80036ce <TryActionErase_Create+0x326>
  if (tx<0||ty<0||tx>=MAP_COLS||ty>=MAP_ROWS) return;
 80036c4:	bf00      	nop
 80036c6:	e002      	b.n	80036ce <TryActionErase_Create+0x326>
    if (p1_act.active && (p1_act.sheet==&P1_S_X)) { if (g_map[ty][tx] && !g_fixed[ty][tx]) Line_RemoveFrom(tx,ty,d); }
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <TryActionErase_Create+0x326>
    if (p2_act.active && (p2_act.sheet==&P2_S_X)) { if (g_map[ty][tx] && !g_fixed[ty][tx]) Line_RemoveFrom(tx,ty,d); }
 80036cc:	bf00      	nop
  }
}
 80036ce:	3734      	adds	r7, #52	@ 0x34
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036d4:	2000171c 	.word	0x2000171c
 80036d8:	0804a548 	.word	0x0804a548
 80036dc:	200016d4 	.word	0x200016d4
 80036e0:	200016d8 	.word	0x200016d8
 80036e4:	200016dc 	.word	0x200016dc
 80036e8:	20001734 	.word	0x20001734
 80036ec:	20001738 	.word	0x20001738
 80036f0:	2000173c 	.word	0x2000173c

080036f4 <IsVerticalSheet>:

/* ===================== JUGADORES ===================== */
static inline bool IsVerticalSheet(const Sheet *s){
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  return (s==&P1_S_F || s==&P1_S_B || s==&P2_S_F || s==&P2_S_B);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <IsVerticalSheet+0x40>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d00b      	beq.n	800371c <IsVerticalSheet+0x28>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a0c      	ldr	r2, [pc, #48]	@ (8003738 <IsVerticalSheet+0x44>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d007      	beq.n	800371c <IsVerticalSheet+0x28>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a0b      	ldr	r2, [pc, #44]	@ (800373c <IsVerticalSheet+0x48>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d003      	beq.n	800371c <IsVerticalSheet+0x28>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a0a      	ldr	r2, [pc, #40]	@ (8003740 <IsVerticalSheet+0x4c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d101      	bne.n	8003720 <IsVerticalSheet+0x2c>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <IsVerticalSheet+0x2e>
 8003720:	2300      	movs	r3, #0
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	0804a4a8 	.word	0x0804a4a8
 8003738:	0804a4b8 	.word	0x0804a4b8
 800373c:	0804a508 	.word	0x0804a508
 8003740:	0804a518 	.word	0x0804a518

08003744 <FixAnimIndex>:
static inline int FixAnimIndex(const Sheet *s, int fr){
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  int idx = fr % s->columns;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	fb93 f1f2 	sdiv	r1, r3, r2
 8003758:	fb01 f202 	mul.w	r2, r1, r2
 800375c:	1a9b      	subs	r3, r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  return IsVerticalSheet(s) ? (s->columns - 1 - idx) : idx;
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff ffc7 	bl	80036f4 <IsVerticalSheet>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <FixAnimIndex+0x34>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	1e5a      	subs	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	e000      	b.n	800377a <FixAnimIndex+0x36>
 8003778:	68fb      	ldr	r3, [r7, #12]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3710      	adds	r7, #16
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <DrawSheet>:
static inline void DrawSheet(int x,int y,const Sheet* s,int fr){
 8003782:	b590      	push	{r4, r7, lr}
 8003784:	b08d      	sub	sp, #52	@ 0x34
 8003786:	af06      	add	r7, sp, #24
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	603b      	str	r3, [r7, #0]
  int use_fr = FixAnimIndex(s, fr);
 8003790:	6839      	ldr	r1, [r7, #0]
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff ffd6 	bl	8003744 <FixAnimIndex>
 8003798:	6178      	str	r0, [r7, #20]
  LCD_Sprite(x,y, s->w,s->h, (uint8_t*)s->data, s->columns, use_fr, 0, 0);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6858      	ldr	r0, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689c      	ldr	r4, [r3, #8]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	2100      	movs	r1, #0
 80037ac:	9104      	str	r1, [sp, #16]
 80037ae:	2100      	movs	r1, #0
 80037b0:	9103      	str	r1, [sp, #12]
 80037b2:	6979      	ldr	r1, [r7, #20]
 80037b4:	9102      	str	r1, [sp, #8]
 80037b6:	9201      	str	r2, [sp, #4]
 80037b8:	9300      	str	r3, [sp, #0]
 80037ba:	4623      	mov	r3, r4
 80037bc:	4602      	mov	r2, r0
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f7fe f8f1 	bl	80019a8 <LCD_Sprite>
}
 80037c6:	bf00      	nop
 80037c8:	371c      	adds	r7, #28
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd90      	pop	{r4, r7, pc}
	...

080037d0 <DrawP1>:

/* === Draw/Clear con repintado de objetos/HUD === */
static inline void DrawP1(void){
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  if (p1_alive) DrawSheet(p1_x, p1_y, p1_sh, p1_fr);
 80037d4:	4b07      	ldr	r3, [pc, #28]	@ (80037f4 <DrawP1+0x24>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <DrawP1+0x20>
 80037dc:	4b06      	ldr	r3, [pc, #24]	@ (80037f8 <DrawP1+0x28>)
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <DrawP1+0x2c>)
 80037e2:	6819      	ldr	r1, [r3, #0]
 80037e4:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <DrawP1+0x30>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <DrawP1+0x34>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f7ff ffc9 	bl	8003782 <DrawSheet>
}
 80037f0:	bf00      	nop
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000001 	.word	0x20000001
 80037f8:	200016d4 	.word	0x200016d4
 80037fc:	200016d8 	.word	0x200016d8
 8003800:	200016dc 	.word	0x200016dc
 8003804:	200016e0 	.word	0x200016e0

08003808 <ClrP1>:
static inline void ClrP1(void){
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  PatchFromMap(p1_x, p1_y, p1_sh->w, p1_sh->h);
 800380c:	4b12      	ldr	r3, [pc, #72]	@ (8003858 <ClrP1+0x50>)
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	4b12      	ldr	r3, [pc, #72]	@ (800385c <ClrP1+0x54>)
 8003812:	6819      	ldr	r1, [r3, #0]
 8003814:	4b12      	ldr	r3, [pc, #72]	@ (8003860 <ClrP1+0x58>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <ClrP1+0x58>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f7fe ff32 	bl	8002688 <PatchFromMap>
  Bananas_RedrawIfOverlapped(p1_x, p1_y, p1_sh->w, p1_sh->h);
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <ClrP1+0x50>)
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <ClrP1+0x54>)
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <ClrP1+0x58>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <ClrP1+0x58>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f7ff fb56 	bl	8002ee8 <Bananas_RedrawIfOverlapped>
  HUD_RedrawIfOverlapped(p1_x, p1_y, p1_sh->w, p1_sh->h);
 800383c:	4b06      	ldr	r3, [pc, #24]	@ (8003858 <ClrP1+0x50>)
 800383e:	6818      	ldr	r0, [r3, #0]
 8003840:	4b06      	ldr	r3, [pc, #24]	@ (800385c <ClrP1+0x54>)
 8003842:	6819      	ldr	r1, [r3, #0]
 8003844:	4b06      	ldr	r3, [pc, #24]	@ (8003860 <ClrP1+0x58>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <ClrP1+0x58>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f7ff f868 	bl	8002924 <HUD_RedrawIfOverlapped>
}
 8003854:	bf00      	nop
 8003856:	bd80      	pop	{r7, pc}
 8003858:	200016d4 	.word	0x200016d4
 800385c:	200016d8 	.word	0x200016d8
 8003860:	200016dc 	.word	0x200016dc

08003864 <DrawP2>:
static inline void DrawP2(void){
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  if (p2_alive) DrawSheet(p2_x, p2_y, p2_sh, p2_fr);
 8003868:	4b07      	ldr	r3, [pc, #28]	@ (8003888 <DrawP2+0x24>)
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <DrawP2+0x20>
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <DrawP2+0x28>)
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	4b06      	ldr	r3, [pc, #24]	@ (8003890 <DrawP2+0x2c>)
 8003876:	6819      	ldr	r1, [r3, #0]
 8003878:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <DrawP2+0x30>)
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	4b06      	ldr	r3, [pc, #24]	@ (8003898 <DrawP2+0x34>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f7ff ff7f 	bl	8003782 <DrawSheet>
}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000003 	.word	0x20000003
 800388c:	20001704 	.word	0x20001704
 8003890:	20001708 	.word	0x20001708
 8003894:	2000170c 	.word	0x2000170c
 8003898:	20001710 	.word	0x20001710

0800389c <ClrP2>:
static inline void ClrP2(void){
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
  PatchFromMap(p2_x, p2_y, p2_sh->w, p2_sh->h);
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <ClrP2+0x50>)
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <ClrP2+0x54>)
 80038a6:	6819      	ldr	r1, [r3, #0]
 80038a8:	4b12      	ldr	r3, [pc, #72]	@ (80038f4 <ClrP2+0x58>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <ClrP2+0x58>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f7fe fee8 	bl	8002688 <PatchFromMap>
  Bananas_RedrawIfOverlapped(p2_x, p2_y, p2_sh->w, p2_sh->h);
 80038b8:	4b0c      	ldr	r3, [pc, #48]	@ (80038ec <ClrP2+0x50>)
 80038ba:	6818      	ldr	r0, [r3, #0]
 80038bc:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <ClrP2+0x54>)
 80038be:	6819      	ldr	r1, [r3, #0]
 80038c0:	4b0c      	ldr	r3, [pc, #48]	@ (80038f4 <ClrP2+0x58>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <ClrP2+0x58>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f7ff fb0c 	bl	8002ee8 <Bananas_RedrawIfOverlapped>
  HUD_RedrawIfOverlapped(p2_x, p2_y, p2_sh->w, p2_sh->h);
 80038d0:	4b06      	ldr	r3, [pc, #24]	@ (80038ec <ClrP2+0x50>)
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	4b06      	ldr	r3, [pc, #24]	@ (80038f0 <ClrP2+0x54>)
 80038d6:	6819      	ldr	r1, [r3, #0]
 80038d8:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <ClrP2+0x58>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685a      	ldr	r2, [r3, #4]
 80038de:	4b05      	ldr	r3, [pc, #20]	@ (80038f4 <ClrP2+0x58>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f7ff f81e 	bl	8002924 <HUD_RedrawIfOverlapped>
}
 80038e8:	bf00      	nop
 80038ea:	bd80      	pop	{r7, pc}
 80038ec:	20001704 	.word	0x20001704
 80038f0:	20001708 	.word	0x20001708
 80038f4:	2000170c 	.word	0x2000170c

080038f8 <DecideAxisMove>:
  HUD_RedrawIfOverlapped(en_x, en_y, en_sh->w, en_sh->h);
}

static void DecideAxisMove(const PlayerInput *pi, int *dx, int *dy, const Sheet **out_sheet,
                           const Sheet *S_F,const Sheet *S_B,const Sheet *S_L,const Sheet *S_R)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	603b      	str	r3, [r7, #0]
  *dx=0; *dy=0;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
  if ((pi->dir & DIR_LEFT) ^ (pi->dir & DIR_RIGHT)) {
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	799b      	ldrb	r3, [r3, #6]
 8003916:	f003 030c 	and.w	r3, r3, #12
 800391a:	2b00      	cmp	r3, #0
 800391c:	d014      	beq.n	8003948 <DecideAxisMove+0x50>
    if (pi->dir & DIR_LEFT)  { *dx = -P_STEP; *out_sheet = S_L; }
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	799b      	ldrb	r3, [r3, #6]
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <DecideAxisMove+0x42>
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f06f 0201 	mvn.w	r2, #1
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6a3a      	ldr	r2, [r7, #32]
 8003936:	601a      	str	r2, [r3, #0]
    else                     { *dx =  P_STEP; *out_sheet = S_R; }
  } else if ((pi->dir & DIR_UP) ^ (pi->dir & DIR_DOWN)) {
    if (pi->dir & DIR_UP)    { *dy = -P_STEP; *out_sheet = S_B; }
    else                     { *dy =  P_STEP; *out_sheet = S_F; }
  }
}
 8003938:	e020      	b.n	800397c <DecideAxisMove+0x84>
    else                     { *dx =  P_STEP; *out_sheet = S_R; }
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2202      	movs	r2, #2
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003944:	601a      	str	r2, [r3, #0]
}
 8003946:	e019      	b.n	800397c <DecideAxisMove+0x84>
  } else if ((pi->dir & DIR_UP) ^ (pi->dir & DIR_DOWN)) {
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	799b      	ldrb	r3, [r3, #6]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b00      	cmp	r3, #0
 8003952:	d013      	beq.n	800397c <DecideAxisMove+0x84>
    if (pi->dir & DIR_UP)    { *dy = -P_STEP; *out_sheet = S_B; }
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	799b      	ldrb	r3, [r3, #6]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <DecideAxisMove+0x78>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f06f 0201 	mvn.w	r2, #1
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	69fa      	ldr	r2, [r7, #28]
 800396c:	601a      	str	r2, [r3, #0]
}
 800396e:	e005      	b.n	800397c <DecideAxisMove+0x84>
    else                     { *dy =  P_STEP; *out_sheet = S_F; }
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	601a      	str	r2, [r3, #0]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <TryMovePlayer>:

static void TryMovePlayer(int *x,int *y,int w,int h,int dx,int dy,int ox,int oy,int ow,int oh)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b08a      	sub	sp, #40	@ 0x28
 800398c:	af04      	add	r7, sp, #16
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
 8003994:	603b      	str	r3, [r7, #0]
  if (dx != 0) {
 8003996:	6a3b      	ldr	r3, [r7, #32]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d041      	beq.n	8003a20 <TryMovePlayer+0x98>
    int nx = *x + dx;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6a3a      	ldr	r2, [r7, #32]
 80039a2:	4413      	add	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
    if (!RectCollidesMap(nx, *y, w, h) && !RectIntersects(nx,*y,w,h, ox,oy,ow,oh)) {
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6978      	ldr	r0, [r7, #20]
 80039b0:	f7fe ff0a 	bl	80027c8 <RectCollidesMap>
 80039b4:	4603      	mov	r3, r0
 80039b6:	f083 0301 	eor.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d02f      	beq.n	8003a20 <TryMovePlayer+0x98>
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	6819      	ldr	r1, [r3, #0]
 80039c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c6:	9303      	str	r3, [sp, #12]
 80039c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ca:	9302      	str	r3, [sp, #8]
 80039cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6978      	ldr	r0, [r7, #20]
 80039da:	f7fe f891 	bl	8001b00 <RectIntersects>
 80039de:	4603      	mov	r3, r0
 80039e0:	f083 0301 	eor.w	r3, r3, #1
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d01a      	beq.n	8003a20 <TryMovePlayer+0x98>
      PatchFromMap(*x, *y, w, h); *x = nx;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	f7fe fe47 	bl	8002688 <PatchFromMap>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	601a      	str	r2, [r3, #0]
      Bananas_RedrawIfOverlapped(*x, *y, w, h); HUD_RedrawIfOverlapped(*x, *y, w, h);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6818      	ldr	r0, [r3, #0]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	f7ff fa6c 	bl	8002ee8 <Bananas_RedrawIfOverlapped>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6819      	ldr	r1, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	f7fe ff82 	bl	8002924 <HUD_RedrawIfOverlapped>
    }
  }
  if (dy != 0) {
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d041      	beq.n	8003aaa <TryMovePlayer+0x122>
    int ny = *y + dy;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a2c:	4413      	add	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]
    if (!RectCollidesMap(*x, ny, w, h) && !RectIntersects(*x,ny,w,h, ox,oy,ow,oh)) {
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6818      	ldr	r0, [r3, #0]
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6939      	ldr	r1, [r7, #16]
 8003a3a:	f7fe fec5 	bl	80027c8 <RectCollidesMap>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	f083 0301 	eor.w	r3, r3, #1
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d02f      	beq.n	8003aaa <TryMovePlayer+0x122>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a50:	9303      	str	r3, [sp, #12]
 8003a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a54:	9302      	str	r3, [sp, #8]
 8003a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6939      	ldr	r1, [r7, #16]
 8003a64:	f7fe f84c 	bl	8001b00 <RectIntersects>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f083 0301 	eor.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01a      	beq.n	8003aaa <TryMovePlayer+0x122>
      PatchFromMap(*x, *y, w, h); *y = ny;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6819      	ldr	r1, [r3, #0]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	f7fe fe02 	bl	8002688 <PatchFromMap>
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	601a      	str	r2, [r3, #0]
      Bananas_RedrawIfOverlapped(*x, *y, w, h); HUD_RedrawIfOverlapped(*x, *y, w, h);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	f7ff fa27 	bl	8002ee8 <Bananas_RedrawIfOverlapped>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6819      	ldr	r1, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	f7fe ff3d 	bl	8002924 <HUD_RedrawIfOverlapped>
    }
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
	...

08003ab4 <Players_HandleInput>:

static void Players_HandleInput(void)
{
 8003ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab6:	b095      	sub	sp, #84	@ 0x54
 8003ab8:	af06      	add	r7, sp, #24
  __ASM volatile ("cpsid i" : : : "memory");
 8003aba:	b672      	cpsid	i
}
 8003abc:	bf00      	nop
  PlayerInput i1, i2;
  __disable_irq(); Gamepad_GetP1(&i1); Gamepad_GetP2(&i2); __enable_irq();
 8003abe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f002 fec0 	bl	8006848 <Gamepad_GetP1>
 8003ac8:	f107 0320 	add.w	r3, r7, #32
 8003acc:	4618      	mov	r0, r3
 8003ace:	f002 fed1 	bl	8006874 <Gamepad_GetP2>
  __ASM volatile ("cpsie i" : : : "memory");
 8003ad2:	b662      	cpsie	i
}
 8003ad4:	bf00      	nop

  uint32_t now = HAL_GetTick();
 8003ad6:	f003 f985 	bl	8006de4 <HAL_GetTick>
 8003ada:	6378      	str	r0, [r7, #52]	@ 0x34

  /* ------- P1 ------- */
  if (p1_alive){
 8003adc:	4b9c      	ldr	r3, [pc, #624]	@ (8003d50 <Players_HandleInput+0x29c>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80de 	beq.w	8003ca2 <Players_HandleInput+0x1ee>
    int dx1=0,dy1=0; const Sheet* move1 = p1_sh;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	4b99      	ldr	r3, [pc, #612]	@ (8003d54 <Players_HandleInput+0x2a0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	617b      	str	r3, [r7, #20]
    DecideAxisMove(&i1, &dx1, &dy1, &move1, &P1_S_F,&P1_S_B,&P1_S_L,&P1_S_R);
 8003af4:	f107 0314 	add.w	r3, r7, #20
 8003af8:	f107 0218 	add.w	r2, r7, #24
 8003afc:	f107 011c 	add.w	r1, r7, #28
 8003b00:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003b04:	4c94      	ldr	r4, [pc, #592]	@ (8003d58 <Players_HandleInput+0x2a4>)
 8003b06:	9403      	str	r4, [sp, #12]
 8003b08:	4c94      	ldr	r4, [pc, #592]	@ (8003d5c <Players_HandleInput+0x2a8>)
 8003b0a:	9402      	str	r4, [sp, #8]
 8003b0c:	4c94      	ldr	r4, [pc, #592]	@ (8003d60 <Players_HandleInput+0x2ac>)
 8003b0e:	9401      	str	r4, [sp, #4]
 8003b10:	4c94      	ldr	r4, [pc, #592]	@ (8003d64 <Players_HandleInput+0x2b0>)
 8003b12:	9400      	str	r4, [sp, #0]
 8003b14:	f7ff fef0 	bl	80038f8 <DecideAxisMove>

    uint8_t A1_edge = (i1.A && !p1_A_prev);
 8003b18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <Players_HandleInput+0x78>
 8003b20:	4b91      	ldr	r3, [pc, #580]	@ (8003d68 <Players_HandleInput+0x2b4>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <Players_HandleInput+0x78>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <Players_HandleInput+0x7a>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    uint8_t B1_edge = (i1.B && !p1_B_prev);
 8003b32:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <Players_HandleInput+0x92>
 8003b3a:	4b8c      	ldr	r3, [pc, #560]	@ (8003d6c <Players_HandleInput+0x2b8>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <Players_HandleInput+0x92>
 8003b42:	2301      	movs	r3, #1
 8003b44:	e000      	b.n	8003b48 <Players_HandleInput+0x94>
 8003b46:	2300      	movs	r3, #0
 8003b48:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    p1_A_prev = i1.A; p1_B_prev = i1.B;
 8003b4c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003b50:	4b85      	ldr	r3, [pc, #532]	@ (8003d68 <Players_HandleInput+0x2b4>)
 8003b52:	701a      	strb	r2, [r3, #0]
 8003b54:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003b58:	4b84      	ldr	r3, [pc, #528]	@ (8003d6c <Players_HandleInput+0x2b8>)
 8003b5a:	701a      	strb	r2, [r3, #0]

    if (!p1_act.active) {
 8003b5c:	4b84      	ldr	r3, [pc, #528]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d148      	bne.n	8003bf6 <Players_HandleInput+0x142>
      if (A1_edge || B1_edge) {
 8003b64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <Players_HandleInput+0xc0>
 8003b6c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d02d      	beq.n	8003bd0 <Players_HandleInput+0x11c>
        p1_act.active = 1;
 8003b74:	4b7e      	ldr	r3, [pc, #504]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003b76:	2201      	movs	r2, #1
 8003b78:	701a      	strb	r2, [r3, #0]
        p1_act.sheet  = A1_edge ? &P1_S_X : &P1_S_C;
 8003b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <Players_HandleInput+0xd2>
 8003b82:	4b7c      	ldr	r3, [pc, #496]	@ (8003d74 <Players_HandleInput+0x2c0>)
 8003b84:	e000      	b.n	8003b88 <Players_HandleInput+0xd4>
 8003b86:	4b7c      	ldr	r3, [pc, #496]	@ (8003d78 <Players_HandleInput+0x2c4>)
 8003b88:	4a79      	ldr	r2, [pc, #484]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003b8a:	6053      	str	r3, [r2, #4]
        p1_act.resume_sheet = move1;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	4a78      	ldr	r2, [pc, #480]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003b90:	6093      	str	r3, [r2, #8]
        p1_act.t_start = now;
 8003b92:	4a77      	ldr	r2, [pc, #476]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b96:	60d3      	str	r3, [r2, #12]
        p1_act.duration_ms = p1_act.sheet->columns * ANIM_MS;
 8003b98:	4b75      	ldr	r3, [pc, #468]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	68da      	ldr	r2, [r3, #12]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4b71      	ldr	r3, [pc, #452]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003baa:	611a      	str	r2, [r3, #16]
        TryActionErase_Create(1);
 8003bac:	2001      	movs	r0, #1
 8003bae:	f7ff fbfb 	bl	80033a8 <TryActionErase_Create>
        ClrP1(); p1_sh = p1_act.sheet; p1_fr=0; p1_tanim=now; DrawP1();
 8003bb2:	f7ff fe29 	bl	8003808 <ClrP1>
 8003bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4a66      	ldr	r2, [pc, #408]	@ (8003d54 <Players_HandleInput+0x2a0>)
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	4b6f      	ldr	r3, [pc, #444]	@ (8003d7c <Players_HandleInput+0x2c8>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]
 8003bc4:	4a6e      	ldr	r2, [pc, #440]	@ (8003d80 <Players_HandleInput+0x2cc>)
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	f7ff fe01 	bl	80037d0 <DrawP1>
 8003bce:	e028      	b.n	8003c22 <Players_HandleInput+0x16e>
      } else {
        if (move1 != p1_sh) { ClrP1(); p1_sh = move1; p1_fr=0; p1_tanim=now; DrawP1(); }
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	4b60      	ldr	r3, [pc, #384]	@ (8003d54 <Players_HandleInput+0x2a0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d023      	beq.n	8003c22 <Players_HandleInput+0x16e>
 8003bda:	f7ff fe15 	bl	8003808 <ClrP1>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	4a5c      	ldr	r2, [pc, #368]	@ (8003d54 <Players_HandleInput+0x2a0>)
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b65      	ldr	r3, [pc, #404]	@ (8003d7c <Players_HandleInput+0x2c8>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	4a65      	ldr	r2, [pc, #404]	@ (8003d80 <Players_HandleInput+0x2cc>)
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	f7ff fdee 	bl	80037d0 <DrawP1>
 8003bf4:	e015      	b.n	8003c22 <Players_HandleInput+0x16e>
      }
    } else if (now - p1_act.t_start >= p1_act.duration_ms){
 8003bf6:	4b5e      	ldr	r3, [pc, #376]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003bfc:	1ad2      	subs	r2, r2, r3
 8003bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d30d      	bcc.n	8003c22 <Players_HandleInput+0x16e>
      ClrP1(); p1_sh = p1_act.resume_sheet; p1_fr=0; p1_act.active=0; DrawP1();
 8003c06:	f7ff fdff 	bl	8003808 <ClrP1>
 8003c0a:	4b59      	ldr	r3, [pc, #356]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	4a51      	ldr	r2, [pc, #324]	@ (8003d54 <Players_HandleInput+0x2a0>)
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b5a      	ldr	r3, [pc, #360]	@ (8003d7c <Players_HandleInput+0x2c8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	4b55      	ldr	r3, [pc, #340]	@ (8003d70 <Players_HandleInput+0x2bc>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	f7ff fdd7 	bl	80037d0 <DrawP1>
    }

    if (dx1||dy1) p1_dir = SheetToDir(move1, p1_dir);
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d102      	bne.n	8003c2e <Players_HandleInput+0x17a>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <Players_HandleInput+0x190>
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	4a54      	ldr	r2, [pc, #336]	@ (8003d84 <Players_HandleInput+0x2d0>)
 8003c32:	7812      	ldrb	r2, [r2, #0]
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff fa52 	bl	80030e0 <SheetToDir>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b50      	ldr	r3, [pc, #320]	@ (8003d84 <Players_HandleInput+0x2d0>)
 8003c42:	701a      	strb	r2, [r3, #0]

    TryMovePlayer(&p1_x,&p1_y,p1_sh->w,p1_sh->h, dx1,dy1, p2_x,p2_y,p2_sh->w,p2_sh->h);
 8003c44:	4b43      	ldr	r3, [pc, #268]	@ (8003d54 <Players_HandleInput+0x2a0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685e      	ldr	r6, [r3, #4]
 8003c4a:	4b42      	ldr	r3, [pc, #264]	@ (8003d54 <Players_HandleInput+0x2a0>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	607b      	str	r3, [r7, #4]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	494c      	ldr	r1, [pc, #304]	@ (8003d88 <Players_HandleInput+0x2d4>)
 8003c58:	6809      	ldr	r1, [r1, #0]
 8003c5a:	484c      	ldr	r0, [pc, #304]	@ (8003d8c <Players_HandleInput+0x2d8>)
 8003c5c:	6800      	ldr	r0, [r0, #0]
 8003c5e:	4c4c      	ldr	r4, [pc, #304]	@ (8003d90 <Players_HandleInput+0x2dc>)
 8003c60:	6824      	ldr	r4, [r4, #0]
 8003c62:	6864      	ldr	r4, [r4, #4]
 8003c64:	4d4a      	ldr	r5, [pc, #296]	@ (8003d90 <Players_HandleInput+0x2dc>)
 8003c66:	682d      	ldr	r5, [r5, #0]
 8003c68:	68ad      	ldr	r5, [r5, #8]
 8003c6a:	9505      	str	r5, [sp, #20]
 8003c6c:	9404      	str	r4, [sp, #16]
 8003c6e:	9003      	str	r0, [sp, #12]
 8003c70:	9102      	str	r1, [sp, #8]
 8003c72:	9201      	str	r2, [sp, #4]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4946      	ldr	r1, [pc, #280]	@ (8003d94 <Players_HandleInput+0x2e0>)
 8003c7c:	4846      	ldr	r0, [pc, #280]	@ (8003d98 <Players_HandleInput+0x2e4>)
 8003c7e:	f7ff fe83 	bl	8003988 <TryMovePlayer>
    DrawP1();
 8003c82:	f7ff fda5 	bl	80037d0 <DrawP1>
    Bananas_CheckPickup(p1_x,p1_y,p1_sh->w,p1_sh->h, 1);
 8003c86:	4b44      	ldr	r3, [pc, #272]	@ (8003d98 <Players_HandleInput+0x2e4>)
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	4b42      	ldr	r3, [pc, #264]	@ (8003d94 <Players_HandleInput+0x2e0>)
 8003c8c:	6819      	ldr	r1, [r3, #0]
 8003c8e:	4b31      	ldr	r3, [pc, #196]	@ (8003d54 <Players_HandleInput+0x2a0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	4b2f      	ldr	r3, [pc, #188]	@ (8003d54 <Players_HandleInput+0x2a0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2401      	movs	r4, #1
 8003c9c:	9400      	str	r4, [sp, #0]
 8003c9e:	f7ff f993 	bl	8002fc8 <Bananas_CheckPickup>
  }

  /* ------- P2 ------- */
  if (p2_alive){
 8003ca2:	4b3e      	ldr	r3, [pc, #248]	@ (8003d9c <Players_HandleInput+0x2e8>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 8118 	beq.w	8003edc <Players_HandleInput+0x428>
    int dx2=0,dy2=0; const Sheet* move2 = p2_sh;
 8003cac:	2300      	movs	r3, #0
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60fb      	str	r3, [r7, #12]
 8003cb4:	4b36      	ldr	r3, [pc, #216]	@ (8003d90 <Players_HandleInput+0x2dc>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60bb      	str	r3, [r7, #8]
    DecideAxisMove(&i2, &dx2, &dy2, &move2, &P2_S_F,&P2_S_B,&P2_S_L,&P2_S_R);
 8003cba:	f107 0308 	add.w	r3, r7, #8
 8003cbe:	f107 020c 	add.w	r2, r7, #12
 8003cc2:	f107 0110 	add.w	r1, r7, #16
 8003cc6:	f107 0020 	add.w	r0, r7, #32
 8003cca:	4c35      	ldr	r4, [pc, #212]	@ (8003da0 <Players_HandleInput+0x2ec>)
 8003ccc:	9403      	str	r4, [sp, #12]
 8003cce:	4c35      	ldr	r4, [pc, #212]	@ (8003da4 <Players_HandleInput+0x2f0>)
 8003cd0:	9402      	str	r4, [sp, #8]
 8003cd2:	4c35      	ldr	r4, [pc, #212]	@ (8003da8 <Players_HandleInput+0x2f4>)
 8003cd4:	9401      	str	r4, [sp, #4]
 8003cd6:	4c35      	ldr	r4, [pc, #212]	@ (8003dac <Players_HandleInput+0x2f8>)
 8003cd8:	9400      	str	r4, [sp, #0]
 8003cda:	f7ff fe0d 	bl	80038f8 <DecideAxisMove>

    uint8_t A2_edge = (i2.A && !p2_A_prev);
 8003cde:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <Players_HandleInput+0x23e>
 8003ce6:	4b32      	ldr	r3, [pc, #200]	@ (8003db0 <Players_HandleInput+0x2fc>)
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <Players_HandleInput+0x23e>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <Players_HandleInput+0x240>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    uint8_t B2_edge = (i2.B && !p2_B_prev);
 8003cf8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <Players_HandleInput+0x258>
 8003d00:	4b2c      	ldr	r3, [pc, #176]	@ (8003db4 <Players_HandleInput+0x300>)
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <Players_HandleInput+0x258>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <Players_HandleInput+0x25a>
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    p2_A_prev = i2.A; p2_B_prev = i2.B;
 8003d12:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003d16:	4b26      	ldr	r3, [pc, #152]	@ (8003db0 <Players_HandleInput+0x2fc>)
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003d1e:	4b25      	ldr	r3, [pc, #148]	@ (8003db4 <Players_HandleInput+0x300>)
 8003d20:	701a      	strb	r2, [r3, #0]

    if (!p2_act.active) {
 8003d22:	4b25      	ldr	r3, [pc, #148]	@ (8003db8 <Players_HandleInput+0x304>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f040 8082 	bne.w	8003e30 <Players_HandleInput+0x37c>
      if (A2_edge || B2_edge) {
 8003d2c:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d103      	bne.n	8003d3c <Players_HandleInput+0x288>
 8003d34:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d066      	beq.n	8003e0a <Players_HandleInput+0x356>
        p2_act.active = 1;
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003db8 <Players_HandleInput+0x304>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	701a      	strb	r2, [r3, #0]
        p2_act.sheet  = A2_edge ? &P2_S_X : &P2_S_C;
 8003d42:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d03a      	beq.n	8003dc0 <Players_HandleInput+0x30c>
 8003d4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dbc <Players_HandleInput+0x308>)
 8003d4c:	e039      	b.n	8003dc2 <Players_HandleInput+0x30e>
 8003d4e:	bf00      	nop
 8003d50:	20000001 	.word	0x20000001
 8003d54:	200016dc 	.word	0x200016dc
 8003d58:	0804a4d8 	.word	0x0804a4d8
 8003d5c:	0804a4c8 	.word	0x0804a4c8
 8003d60:	0804a4b8 	.word	0x0804a4b8
 8003d64:	0804a4a8 	.word	0x0804a4a8
 8003d68:	20001700 	.word	0x20001700
 8003d6c:	20001701 	.word	0x20001701
 8003d70:	200016ec 	.word	0x200016ec
 8003d74:	0804a4f8 	.word	0x0804a4f8
 8003d78:	0804a4e8 	.word	0x0804a4e8
 8003d7c:	200016e0 	.word	0x200016e0
 8003d80:	200016e4 	.word	0x200016e4
 8003d84:	20000002 	.word	0x20000002
 8003d88:	20001704 	.word	0x20001704
 8003d8c:	20001708 	.word	0x20001708
 8003d90:	2000170c 	.word	0x2000170c
 8003d94:	200016d8 	.word	0x200016d8
 8003d98:	200016d4 	.word	0x200016d4
 8003d9c:	20000003 	.word	0x20000003
 8003da0:	0804a538 	.word	0x0804a538
 8003da4:	0804a528 	.word	0x0804a528
 8003da8:	0804a518 	.word	0x0804a518
 8003dac:	0804a508 	.word	0x0804a508
 8003db0:	20001730 	.word	0x20001730
 8003db4:	20001731 	.word	0x20001731
 8003db8:	2000171c 	.word	0x2000171c
 8003dbc:	0804a558 	.word	0x0804a558
 8003dc0:	4b78      	ldr	r3, [pc, #480]	@ (8003fa4 <Players_HandleInput+0x4f0>)
 8003dc2:	4a79      	ldr	r2, [pc, #484]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003dc4:	6053      	str	r3, [r2, #4]
        p2_act.resume_sheet = move2;
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a77      	ldr	r2, [pc, #476]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003dca:	6093      	str	r3, [r2, #8]
        p2_act.t_start = now;
 8003dcc:	4a76      	ldr	r2, [pc, #472]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd0:	60d3      	str	r3, [r2, #12]
        p2_act.duration_ms = p2_act.sheet->columns * ANIM_MS;
 8003dd2:	4b75      	ldr	r3, [pc, #468]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b71      	ldr	r3, [pc, #452]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003de4:	611a      	str	r2, [r3, #16]
        TryActionErase_Create(2);
 8003de6:	2002      	movs	r0, #2
 8003de8:	f7ff fade 	bl	80033a8 <TryActionErase_Create>
        ClrP2(); p2_sh = p2_act.sheet; p2_fr=0; p2_tanim=now; DrawP2();
 8003dec:	f7ff fd56 	bl	800389c <ClrP2>
 8003df0:	4b6d      	ldr	r3, [pc, #436]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	4a6d      	ldr	r2, [pc, #436]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	4b6d      	ldr	r3, [pc, #436]	@ (8003fb0 <Players_HandleInput+0x4fc>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]
 8003dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8003fb4 <Players_HandleInput+0x500>)
 8003e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	f7ff fd2e 	bl	8003864 <DrawP2>
 8003e08:	e028      	b.n	8003e5c <Players_HandleInput+0x3a8>
      } else {
        if (move2 != p2_sh) { ClrP2(); p2_sh = move2; p2_fr=0; p2_tanim=now; DrawP2(); }
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	4b67      	ldr	r3, [pc, #412]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d023      	beq.n	8003e5c <Players_HandleInput+0x3a8>
 8003e14:	f7ff fd42 	bl	800389c <ClrP2>
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4a64      	ldr	r2, [pc, #400]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003e1c:	6013      	str	r3, [r2, #0]
 8003e1e:	4b64      	ldr	r3, [pc, #400]	@ (8003fb0 <Players_HandleInput+0x4fc>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	4a63      	ldr	r2, [pc, #396]	@ (8003fb4 <Players_HandleInput+0x500>)
 8003e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	f7ff fd1b 	bl	8003864 <DrawP2>
 8003e2e:	e015      	b.n	8003e5c <Players_HandleInput+0x3a8>
      }
    } else if (now - p2_act.t_start >= p2_act.duration_ms){
 8003e30:	4b5d      	ldr	r3, [pc, #372]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e36:	1ad2      	subs	r2, r2, r3
 8003e38:	4b5b      	ldr	r3, [pc, #364]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d30d      	bcc.n	8003e5c <Players_HandleInput+0x3a8>
      ClrP2(); p2_sh = p2_act.resume_sheet; p2_fr=0; p2_act.active=0; DrawP2();
 8003e40:	f7ff fd2c 	bl	800389c <ClrP2>
 8003e44:	4b58      	ldr	r3, [pc, #352]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	4a58      	ldr	r2, [pc, #352]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4b58      	ldr	r3, [pc, #352]	@ (8003fb0 <Players_HandleInput+0x4fc>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	4b55      	ldr	r3, [pc, #340]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
 8003e58:	f7ff fd04 	bl	8003864 <DrawP2>
    }

    if (dx2||dy2) p2_dir = SheetToDir(move2, p2_dir);
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d102      	bne.n	8003e68 <Players_HandleInput+0x3b4>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <Players_HandleInput+0x3ca>
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4a53      	ldr	r2, [pc, #332]	@ (8003fb8 <Players_HandleInput+0x504>)
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff f935 	bl	80030e0 <SheetToDir>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8003fb8 <Players_HandleInput+0x504>)
 8003e7c:	701a      	strb	r2, [r3, #0]

    TryMovePlayer(&p2_x,&p2_y,p2_sh->w,p2_sh->h, dx2,dy2, p1_x,p1_y,p1_sh->w,p1_sh->h);
 8003e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685e      	ldr	r6, [r3, #4]
 8003e84:	4b49      	ldr	r3, [pc, #292]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	494a      	ldr	r1, [pc, #296]	@ (8003fbc <Players_HandleInput+0x508>)
 8003e92:	6809      	ldr	r1, [r1, #0]
 8003e94:	484a      	ldr	r0, [pc, #296]	@ (8003fc0 <Players_HandleInput+0x50c>)
 8003e96:	6800      	ldr	r0, [r0, #0]
 8003e98:	4c4a      	ldr	r4, [pc, #296]	@ (8003fc4 <Players_HandleInput+0x510>)
 8003e9a:	6824      	ldr	r4, [r4, #0]
 8003e9c:	6864      	ldr	r4, [r4, #4]
 8003e9e:	4d49      	ldr	r5, [pc, #292]	@ (8003fc4 <Players_HandleInput+0x510>)
 8003ea0:	682d      	ldr	r5, [r5, #0]
 8003ea2:	68ad      	ldr	r5, [r5, #8]
 8003ea4:	9505      	str	r5, [sp, #20]
 8003ea6:	9404      	str	r4, [sp, #16]
 8003ea8:	9003      	str	r0, [sp, #12]
 8003eaa:	9102      	str	r1, [sp, #8]
 8003eac:	9201      	str	r2, [sp, #4]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4632      	mov	r2, r6
 8003eb4:	4944      	ldr	r1, [pc, #272]	@ (8003fc8 <Players_HandleInput+0x514>)
 8003eb6:	4845      	ldr	r0, [pc, #276]	@ (8003fcc <Players_HandleInput+0x518>)
 8003eb8:	f7ff fd66 	bl	8003988 <TryMovePlayer>
    DrawP2();
 8003ebc:	f7ff fcd2 	bl	8003864 <DrawP2>
    Bananas_CheckPickup(p2_x,p2_y,p2_sh->w,p2_sh->h, 2);
 8003ec0:	4b42      	ldr	r3, [pc, #264]	@ (8003fcc <Players_HandleInput+0x518>)
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	4b40      	ldr	r3, [pc, #256]	@ (8003fc8 <Players_HandleInput+0x514>)
 8003ec6:	6819      	ldr	r1, [r3, #0]
 8003ec8:	4b38      	ldr	r3, [pc, #224]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	4b37      	ldr	r3, [pc, #220]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2402      	movs	r4, #2
 8003ed6:	9400      	str	r4, [sp, #0]
 8003ed8:	f7ff f876 	bl	8002fc8 <Bananas_CheckPickup>
  }

  if (p1_alive && RectIntersects(p1_x,p1_y,p1_sh->w,p1_sh->h, en_x,en_y,en_sh->w,en_sh->h)) {
 8003edc:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd0 <Players_HandleInput+0x51c>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d02b      	beq.n	8003f3c <Players_HandleInput+0x488>
 8003ee4:	4b35      	ldr	r3, [pc, #212]	@ (8003fbc <Players_HandleInput+0x508>)
 8003ee6:	681c      	ldr	r4, [r3, #0]
 8003ee8:	4b35      	ldr	r3, [pc, #212]	@ (8003fc0 <Players_HandleInput+0x50c>)
 8003eea:	681d      	ldr	r5, [r3, #0]
 8003eec:	4b35      	ldr	r3, [pc, #212]	@ (8003fc4 <Players_HandleInput+0x510>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685e      	ldr	r6, [r3, #4]
 8003ef2:	4b34      	ldr	r3, [pc, #208]	@ (8003fc4 <Players_HandleInput+0x510>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	607b      	str	r3, [r7, #4]
 8003efa:	4b36      	ldr	r3, [pc, #216]	@ (8003fd4 <Players_HandleInput+0x520>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a36      	ldr	r2, [pc, #216]	@ (8003fd8 <Players_HandleInput+0x524>)
 8003f00:	6812      	ldr	r2, [r2, #0]
 8003f02:	4936      	ldr	r1, [pc, #216]	@ (8003fdc <Players_HandleInput+0x528>)
 8003f04:	6809      	ldr	r1, [r1, #0]
 8003f06:	6849      	ldr	r1, [r1, #4]
 8003f08:	4834      	ldr	r0, [pc, #208]	@ (8003fdc <Players_HandleInput+0x528>)
 8003f0a:	6800      	ldr	r0, [r0, #0]
 8003f0c:	6880      	ldr	r0, [r0, #8]
 8003f0e:	9003      	str	r0, [sp, #12]
 8003f10:	9102      	str	r1, [sp, #8]
 8003f12:	9201      	str	r2, [sp, #4]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4632      	mov	r2, r6
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f7fd fdef 	bl	8001b00 <RectIntersects>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d009      	beq.n	8003f3c <Players_HandleInput+0x488>
    p1_alive = 0; p1_act.active=0;
 8003f28:	4b29      	ldr	r3, [pc, #164]	@ (8003fd0 <Players_HandleInput+0x51c>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003fe0 <Players_HandleInput+0x52c>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	701a      	strb	r2, [r3, #0]
    ClrP1();
 8003f34:	f7ff fc68 	bl	8003808 <ClrP1>
    HUD_Draw();
 8003f38:	f7fe fcb4 	bl	80028a4 <HUD_Draw>
  }
  if (p2_alive && RectIntersects(p2_x,p2_y,p2_sh->w,p2_sh->h, en_x,en_y,en_sh->w,en_sh->h)) {
 8003f3c:	4b29      	ldr	r3, [pc, #164]	@ (8003fe4 <Players_HandleInput+0x530>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d02b      	beq.n	8003f9c <Players_HandleInput+0x4e8>
 8003f44:	4b21      	ldr	r3, [pc, #132]	@ (8003fcc <Players_HandleInput+0x518>)
 8003f46:	681c      	ldr	r4, [r3, #0]
 8003f48:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc8 <Players_HandleInput+0x514>)
 8003f4a:	681d      	ldr	r5, [r3, #0]
 8003f4c:	4b17      	ldr	r3, [pc, #92]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685e      	ldr	r6, [r3, #4]
 8003f52:	4b16      	ldr	r3, [pc, #88]	@ (8003fac <Players_HandleInput+0x4f8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd4 <Players_HandleInput+0x520>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd8 <Players_HandleInput+0x524>)
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	491e      	ldr	r1, [pc, #120]	@ (8003fdc <Players_HandleInput+0x528>)
 8003f64:	6809      	ldr	r1, [r1, #0]
 8003f66:	6849      	ldr	r1, [r1, #4]
 8003f68:	481c      	ldr	r0, [pc, #112]	@ (8003fdc <Players_HandleInput+0x528>)
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	6880      	ldr	r0, [r0, #8]
 8003f6e:	9003      	str	r0, [sp, #12]
 8003f70:	9102      	str	r1, [sp, #8]
 8003f72:	9201      	str	r2, [sp, #4]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4632      	mov	r2, r6
 8003f7a:	4629      	mov	r1, r5
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7fd fdbf 	bl	8001b00 <RectIntersects>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d009      	beq.n	8003f9c <Players_HandleInput+0x4e8>
    p2_alive = 0; p2_act.active=0;
 8003f88:	4b16      	ldr	r3, [pc, #88]	@ (8003fe4 <Players_HandleInput+0x530>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	701a      	strb	r2, [r3, #0]
 8003f8e:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <Players_HandleInput+0x4f4>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
    ClrP2();
 8003f94:	f7ff fc82 	bl	800389c <ClrP2>
    HUD_Draw();
 8003f98:	f7fe fc84 	bl	80028a4 <HUD_Draw>
  }
}
 8003f9c:	bf00      	nop
 8003f9e:	373c      	adds	r7, #60	@ 0x3c
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fa4:	0804a548 	.word	0x0804a548
 8003fa8:	2000171c 	.word	0x2000171c
 8003fac:	2000170c 	.word	0x2000170c
 8003fb0:	20001710 	.word	0x20001710
 8003fb4:	20001714 	.word	0x20001714
 8003fb8:	20000004 	.word	0x20000004
 8003fbc:	200016d4 	.word	0x200016d4
 8003fc0:	200016d8 	.word	0x200016d8
 8003fc4:	200016dc 	.word	0x200016dc
 8003fc8:	20001708 	.word	0x20001708
 8003fcc:	20001704 	.word	0x20001704
 8003fd0:	20000001 	.word	0x20000001
 8003fd4:	20001734 	.word	0x20001734
 8003fd8:	20001738 	.word	0x20001738
 8003fdc:	2000173c 	.word	0x2000173c
 8003fe0:	200016ec 	.word	0x200016ec
 8003fe4:	20000003 	.word	0x20000003

08003fe8 <Enemy_InitPatrol>:

/* ===================== ENEMIGO ===================== */
static void Enemy_InitPatrol(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  en_x = TILE_W; en_y = TILE_H;
 8003fec:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <Enemy_InitPatrol+0x28>)
 8003fee:	220a      	movs	r2, #10
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	4b08      	ldr	r3, [pc, #32]	@ (8004014 <Enemy_InitPatrol+0x2c>)
 8003ff4:	220e      	movs	r2, #14
 8003ff6:	601a      	str	r2, [r3, #0]
  en_dir = D_RIGHT;
 8003ff8:	4b07      	ldr	r3, [pc, #28]	@ (8004018 <Enemy_InitPatrol+0x30>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
  en_sh  = &EN_S_R;
 8003ffe:	4b07      	ldr	r3, [pc, #28]	@ (800401c <Enemy_InitPatrol+0x34>)
 8004000:	4a07      	ldr	r2, [pc, #28]	@ (8004020 <Enemy_InitPatrol+0x38>)
 8004002:	601a      	str	r2, [r3, #0]
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20001734 	.word	0x20001734
 8004014:	20001738 	.word	0x20001738
 8004018:	20000005 	.word	0x20000005
 800401c:	2000173c 	.word	0x2000173c
 8004020:	0804a598 	.word	0x0804a598

08004024 <EnemyRectCollidesMap_Padded>:

static bool EnemyRectCollidesMap_Padded(int x,int y,int w,int h, int pad)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
  int nx = x + pad, ny = y + pad;
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	4413      	add	r3, r2
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403e:	4413      	add	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
  int nw = w - 2*pad, nh = h - 2*pad;
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	61fb      	str	r3, [r7, #28]
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	61bb      	str	r3, [r7, #24]
  if (nw < 1) nw = 1; if (nh < 1) nh = 1;
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	dc01      	bgt.n	8004060 <EnemyRectCollidesMap_Padded+0x3c>
 800405c:	2301      	movs	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	2b00      	cmp	r3, #0
 8004064:	dc01      	bgt.n	800406a <EnemyRectCollidesMap_Padded+0x46>
 8004066:	2301      	movs	r3, #1
 8004068:	61bb      	str	r3, [r7, #24]
  return RectCollidesMap(nx, ny, nw, nh);
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	6939      	ldr	r1, [r7, #16]
 8004070:	6978      	ldr	r0, [r7, #20]
 8004072:	f7fe fba9 	bl	80027c8 <RectCollidesMap>
 8004076:	4603      	mov	r3, r0
}
 8004078:	4618      	mov	r0, r3
 800407a:	3720      	adds	r7, #32
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <Enemy_TryStep>:

static bool Enemy_TryStep(Dir d, int *nx, int *ny)
{
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b08b      	sub	sp, #44	@ 0x2c
 8004084:	af02      	add	r7, sp, #8
 8004086:	4603      	mov	r3, r0
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	73fb      	strb	r3, [r7, #15]
  int vx=0,vy=0;
 800408e:	2300      	movs	r3, #0
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	2300      	movs	r3, #0
 8004094:	61bb      	str	r3, [r7, #24]
  if (d==D_RIGHT) vx= E_STEP; else if(d==D_LEFT) vx=-E_STEP;
 8004096:	7bfb      	ldrb	r3, [r7, #15]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d102      	bne.n	80040a2 <Enemy_TryStep+0x22>
 800409c:	2301      	movs	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	e012      	b.n	80040c8 <Enemy_TryStep+0x48>
 80040a2:	7bfb      	ldrb	r3, [r7, #15]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d103      	bne.n	80040b0 <Enemy_TryStep+0x30>
 80040a8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ac:	61fb      	str	r3, [r7, #28]
 80040ae:	e00b      	b.n	80040c8 <Enemy_TryStep+0x48>
  else if (d==D_DOWN) vy= E_STEP; else if(d==D_UP) vy=-E_STEP;
 80040b0:	7bfb      	ldrb	r3, [r7, #15]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d102      	bne.n	80040bc <Enemy_TryStep+0x3c>
 80040b6:	2301      	movs	r3, #1
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e005      	b.n	80040c8 <Enemy_TryStep+0x48>
 80040bc:	7bfb      	ldrb	r3, [r7, #15]
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d102      	bne.n	80040c8 <Enemy_TryStep+0x48>
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	61bb      	str	r3, [r7, #24]

  *nx = en_x + vx; *ny = en_y + vy;
 80040c8:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <Enemy_TryStep+0xa0>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	441a      	add	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	4b13      	ldr	r3, [pc, #76]	@ (8004124 <Enemy_TryStep+0xa4>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	441a      	add	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	601a      	str	r2, [r3, #0]

  int pad = 3;
 80040e0:	2303      	movs	r3, #3
 80040e2:	617b      	str	r3, [r7, #20]
  if (vy != 0) pad = 5;
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <Enemy_TryStep+0x6e>
 80040ea:	2305      	movs	r3, #5
 80040ec:	617b      	str	r3, [r7, #20]

  if (EnemyRectCollidesMap_Padded(*nx,*ny, en_sh->w,en_sh->h, pad)) return false;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6819      	ldr	r1, [r3, #0]
 80040f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <Enemy_TryStep+0xa8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <Enemy_TryStep+0xa8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689c      	ldr	r4, [r3, #8]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	4623      	mov	r3, r4
 8004108:	f7ff ff8c 	bl	8004024 <EnemyRectCollidesMap_Padded>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <Enemy_TryStep+0x96>
 8004112:	2300      	movs	r3, #0
 8004114:	e000      	b.n	8004118 <Enemy_TryStep+0x98>
  return true;
 8004116:	2301      	movs	r3, #1
}
 8004118:	4618      	mov	r0, r3
 800411a:	3724      	adds	r7, #36	@ 0x24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd90      	pop	{r4, r7, pc}
 8004120:	20001734 	.word	0x20001734
 8004124:	20001738 	.word	0x20001738
 8004128:	2000173c 	.word	0x2000173c

0800412c <CenterTileX>:

static inline int CenterTileX(int x,int w){ int cx = x + w/2; return CLAMP(cx / TILE_W, 0, MAP_COLS-1); }
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	0fda      	lsrs	r2, r3, #31
 800413a:	4413      	add	r3, r2
 800413c:	105b      	asrs	r3, r3, #1
 800413e:	461a      	mov	r2, r3
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f113 0f09 	cmn.w	r3, #9
 800414c:	db0d      	blt.n	800416a <CenterTileX+0x3e>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004154:	da07      	bge.n	8004166 <CenterTileX+0x3a>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a07      	ldr	r2, [pc, #28]	@ (8004178 <CenterTileX+0x4c>)
 800415a:	fb82 1203 	smull	r1, r2, r2, r3
 800415e:	1092      	asrs	r2, r2, #2
 8004160:	17db      	asrs	r3, r3, #31
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	e002      	b.n	800416c <CenterTileX+0x40>
 8004166:	231f      	movs	r3, #31
 8004168:	e000      	b.n	800416c <CenterTileX+0x40>
 800416a:	2300      	movs	r3, #0
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	66666667 	.word	0x66666667

0800417c <CenterTileY>:
static inline int CenterTileY(int y,int h){ int cy = y + h/2; return CLAMP(cy / TILE_H, 0, MAP_ROWS-1); }
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	0fda      	lsrs	r2, r3, #31
 800418a:	4413      	add	r3, r2
 800418c:	105b      	asrs	r3, r3, #1
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4413      	add	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f113 0f0d 	cmn.w	r3, #13
 800419c:	db0d      	blt.n	80041ba <CenterTileY+0x3e>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2bed      	cmp	r3, #237	@ 0xed
 80041a2:	dc08      	bgt.n	80041b6 <CenterTileY+0x3a>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4a08      	ldr	r2, [pc, #32]	@ (80041c8 <CenterTileY+0x4c>)
 80041a8:	fb82 1203 	smull	r1, r2, r2, r3
 80041ac:	441a      	add	r2, r3
 80041ae:	10d2      	asrs	r2, r2, #3
 80041b0:	17db      	asrs	r3, r3, #31
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	e002      	b.n	80041bc <CenterTileY+0x40>
 80041b6:	2310      	movs	r3, #16
 80041b8:	e000      	b.n	80041bc <CenterTileY+0x40>
 80041ba:	2300      	movs	r3, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	92492493 	.word	0x92492493

080041cc <TileToPixelForSprite>:

static inline void TileToPixelForSprite(int tx,int ty,int sw,int sh, int *px,int *py){
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  int cx = tx*TILE_W + TILE_W/2;
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	005b      	lsls	r3, r3, #1
 80041e4:	3305      	adds	r3, #5
 80041e6:	617b      	str	r3, [r7, #20]
  int cy = ty*TILE_H + TILE_H/2;
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	005b      	lsls	r3, r3, #1
 80041f2:	3307      	adds	r3, #7
 80041f4:	613b      	str	r3, [r7, #16]
  *px = cx - sw/2; *py = cy - sh/2;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	0fda      	lsrs	r2, r3, #31
 80041fa:	4413      	add	r3, r2
 80041fc:	105b      	asrs	r3, r3, #1
 80041fe:	425b      	negs	r3, r3
 8004200:	461a      	mov	r2, r3
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	441a      	add	r2, r3
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	0fda      	lsrs	r2, r3, #31
 800420e:	4413      	add	r3, r2
 8004210:	105b      	asrs	r3, r3, #1
 8004212:	425b      	negs	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	441a      	add	r2, r3
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	601a      	str	r2, [r3, #0]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <TilePassableForEnemy>:

static bool TilePassableForEnemy(int tx,int ty, const Sheet* sh)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b088      	sub	sp, #32
 800422e:	af02      	add	r7, sp, #8
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
  if (tx<0||ty<0||tx>=MAP_COLS||ty>=MAP_ROWS) return false;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	db08      	blt.n	800424e <TilePassableForEnemy+0x24>
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b00      	cmp	r3, #0
 8004240:	db05      	blt.n	800424e <TilePassableForEnemy+0x24>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2b1f      	cmp	r3, #31
 8004246:	dc02      	bgt.n	800424e <TilePassableForEnemy+0x24>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b10      	cmp	r3, #16
 800424c:	dd01      	ble.n	8004252 <TilePassableForEnemy+0x28>
 800424e:	2300      	movs	r3, #0
 8004250:	e022      	b.n	8004298 <TilePassableForEnemy+0x6e>
  int px,py; TileToPixelForSprite(tx,ty, sh->w, sh->h, &px,&py);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6899      	ldr	r1, [r3, #8]
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	460b      	mov	r3, r1
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff ffae 	bl	80041cc <TileToPixelForSprite>
  return !RectCollidesMap(px,py, sh->w, sh->h);
 8004270:	6978      	ldr	r0, [r7, #20]
 8004272:	6939      	ldr	r1, [r7, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f7fe faa4 	bl	80027c8 <RectCollidesMap>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf14      	ite	ne
 8004286:	2301      	movne	r3, #1
 8004288:	2300      	moveq	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	f083 0301 	eor.w	r3, r3, #1
 8004290:	b2db      	uxtb	r3, r3
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	b2db      	uxtb	r3, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <Enemy_GetStartTile>:

static void Enemy_GetStartTile(int *sx,int *sy){
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  *sx = CenterTileX(en_x, en_sh->w);
 80042aa:	4b0e      	ldr	r3, [pc, #56]	@ (80042e4 <Enemy_GetStartTile+0x44>)
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b0e      	ldr	r3, [pc, #56]	@ (80042e8 <Enemy_GetStartTile+0x48>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4619      	mov	r1, r3
 80042b6:	4610      	mov	r0, r2
 80042b8:	f7ff ff38 	bl	800412c <CenterTileX>
 80042bc:	4602      	mov	r2, r0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
  *sy = CenterTileY(en_y, en_sh->h);
 80042c2:	4b0a      	ldr	r3, [pc, #40]	@ (80042ec <Enemy_GetStartTile+0x4c>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <Enemy_GetStartTile+0x48>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f7ff ff54 	bl	800417c <CenterTileY>
 80042d4:	4602      	mov	r2, r0
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	601a      	str	r2, [r3, #0]
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20001734 	.word	0x20001734
 80042e8:	2000173c 	.word	0x2000173c
 80042ec:	20001738 	.word	0x20001738

080042f0 <Enemy_GetPlayerTargetTile>:

static void Enemy_GetPlayerTargetTile(int *gx,int *gy, int *has_target)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b08f      	sub	sp, #60	@ 0x3c
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  *has_target = 0;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
  int best_d = 1<<30, best_tx=0, best_ty=0;
 8004302:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004306:	637b      	str	r3, [r7, #52]	@ 0x34
 8004308:	2300      	movs	r3, #0
 800430a:	633b      	str	r3, [r7, #48]	@ 0x30
 800430c:	2300      	movs	r3, #0
 800430e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (p1_alive){
 8004310:	4b4a      	ldr	r3, [pc, #296]	@ (800443c <Enemy_GetPlayerTargetTile+0x14c>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d041      	beq.n	800439c <Enemy_GetPlayerTargetTile+0xac>
    int t1x = CenterTileX(p1_x, p1_sh->w);
 8004318:	4b49      	ldr	r3, [pc, #292]	@ (8004440 <Enemy_GetPlayerTargetTile+0x150>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b49      	ldr	r3, [pc, #292]	@ (8004444 <Enemy_GetPlayerTargetTile+0x154>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f7ff ff01 	bl	800412c <CenterTileX>
 800432a:	62b8      	str	r0, [r7, #40]	@ 0x28
    int t1y = CenterTileY(p1_y, p1_sh->h);
 800432c:	4b46      	ldr	r3, [pc, #280]	@ (8004448 <Enemy_GetPlayerTargetTile+0x158>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b44      	ldr	r3, [pc, #272]	@ (8004444 <Enemy_GetPlayerTargetTile+0x154>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7ff ff1f 	bl	800417c <CenterTileY>
 800433e:	6278      	str	r0, [r7, #36]	@ 0x24
    int d = abs(t1x - CenterTileX(en_x,en_sh->w)) + abs(t1y - CenterTileY(en_y,en_sh->h));
 8004340:	4b42      	ldr	r3, [pc, #264]	@ (800444c <Enemy_GetPlayerTargetTile+0x15c>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b42      	ldr	r3, [pc, #264]	@ (8004450 <Enemy_GetPlayerTargetTile+0x160>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7ff feed 	bl	800412c <CenterTileX>
 8004352:	4602      	mov	r2, r0
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800435c:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004360:	4b3c      	ldr	r3, [pc, #240]	@ (8004454 <Enemy_GetPlayerTargetTile+0x164>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4b3a      	ldr	r3, [pc, #232]	@ (8004450 <Enemy_GetPlayerTargetTile+0x160>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	4619      	mov	r1, r3
 800436c:	4610      	mov	r0, r2
 800436e:	f7ff ff05 	bl	800417c <CenterTileY>
 8004372:	4602      	mov	r2, r0
 8004374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004376:	1a9b      	subs	r3, r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	bfb8      	it	lt
 800437c:	425b      	neglt	r3, r3
 800437e:	4423      	add	r3, r4
 8004380:	623b      	str	r3, [r7, #32]
    if (d < best_d){ best_d=d; best_tx=t1x; best_ty=t1y; *has_target=1; }
 8004382:	6a3a      	ldr	r2, [r7, #32]
 8004384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004386:	429a      	cmp	r2, r3
 8004388:	da08      	bge.n	800439c <Enemy_GetPlayerTargetTile+0xac>
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	637b      	str	r3, [r7, #52]	@ 0x34
 800438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004390:	633b      	str	r3, [r7, #48]	@ 0x30
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	601a      	str	r2, [r3, #0]
  }
  if (p2_alive){
 800439c:	4b2e      	ldr	r3, [pc, #184]	@ (8004458 <Enemy_GetPlayerTargetTile+0x168>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d041      	beq.n	8004428 <Enemy_GetPlayerTargetTile+0x138>
    int t2x = CenterTileX(p2_x, p2_sh->w);
 80043a4:	4b2d      	ldr	r3, [pc, #180]	@ (800445c <Enemy_GetPlayerTargetTile+0x16c>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004460 <Enemy_GetPlayerTargetTile+0x170>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7ff febb 	bl	800412c <CenterTileX>
 80043b6:	61f8      	str	r0, [r7, #28]
    int t2y = CenterTileY(p2_y, p2_sh->h);
 80043b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004464 <Enemy_GetPlayerTargetTile+0x174>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	4b28      	ldr	r3, [pc, #160]	@ (8004460 <Enemy_GetPlayerTargetTile+0x170>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f7ff fed9 	bl	800417c <CenterTileY>
 80043ca:	61b8      	str	r0, [r7, #24]
    int d = abs(t2x - CenterTileX(en_x,en_sh->w)) + abs(t2y - CenterTileY(en_y,en_sh->h));
 80043cc:	4b1f      	ldr	r3, [pc, #124]	@ (800444c <Enemy_GetPlayerTargetTile+0x15c>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004450 <Enemy_GetPlayerTargetTile+0x160>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f7ff fea7 	bl	800412c <CenterTileX>
 80043de:	4602      	mov	r2, r0
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 80043e8:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 80043ec:	4b19      	ldr	r3, [pc, #100]	@ (8004454 <Enemy_GetPlayerTargetTile+0x164>)
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	4b17      	ldr	r3, [pc, #92]	@ (8004450 <Enemy_GetPlayerTargetTile+0x160>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	4619      	mov	r1, r3
 80043f8:	4610      	mov	r0, r2
 80043fa:	f7ff febf 	bl	800417c <CenterTileY>
 80043fe:	4602      	mov	r2, r0
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	bfb8      	it	lt
 8004408:	425b      	neglt	r3, r3
 800440a:	4423      	add	r3, r4
 800440c:	617b      	str	r3, [r7, #20]
    if (d < best_d){ best_d=d; best_tx=t2x; best_ty=t2y; *has_target=1; }
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004412:	429a      	cmp	r2, r3
 8004414:	da08      	bge.n	8004428 <Enemy_GetPlayerTargetTile+0x138>
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	633b      	str	r3, [r7, #48]	@ 0x30
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]
  }

  *gx = best_tx; *gy = best_ty;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004432:	601a      	str	r2, [r3, #0]
}
 8004434:	bf00      	nop
 8004436:	373c      	adds	r7, #60	@ 0x3c
 8004438:	46bd      	mov	sp, r7
 800443a:	bd90      	pop	{r4, r7, pc}
 800443c:	20000001 	.word	0x20000001
 8004440:	200016d4 	.word	0x200016d4
 8004444:	200016dc 	.word	0x200016dc
 8004448:	200016d8 	.word	0x200016d8
 800444c:	20001734 	.word	0x20001734
 8004450:	2000173c 	.word	0x2000173c
 8004454:	20001738 	.word	0x20001738
 8004458:	20000003 	.word	0x20000003
 800445c:	20001704 	.word	0x20001704
 8004460:	2000170c 	.word	0x2000170c
 8004464:	20001708 	.word	0x20001708

08004468 <BFS_NextDirForEnemy>:

static Dir BFS_NextDirForEnemy(int sx,int sy,int gx,int gy, const Sheet* sh)
{
 8004468:	b590      	push	{r4, r7, lr}
 800446a:	f5ad 5d8b 	sub.w	sp, sp, #4448	@ 0x1160
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	f507 74b4 	add.w	r4, r7, #360	@ 0x168
 8004476:	f5a4 74ae 	sub.w	r4, r4, #348	@ 0x15c
 800447a:	6020      	str	r0, [r4, #0]
 800447c:	f507 70b4 	add.w	r0, r7, #360	@ 0x168
 8004480:	f5a0 70b0 	sub.w	r0, r0, #352	@ 0x160
 8004484:	6001      	str	r1, [r0, #0]
 8004486:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 800448a:	f5a1 71b2 	sub.w	r1, r1, #356	@ 0x164
 800448e:	600a      	str	r2, [r1, #0]
 8004490:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8004494:	f5a2 72b4 	sub.w	r2, r2, #360	@ 0x168
 8004498:	6013      	str	r3, [r2, #0]
  if (sx==gx && sy==gy) return D_NONE;
 800449a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800449e:	f5a3 72ae 	sub.w	r2, r3, #348	@ 0x15c
 80044a2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80044a6:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80044aa:	6812      	ldr	r2, [r2, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d10d      	bne.n	80044ce <BFS_NextDirForEnemy+0x66>
 80044b2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80044b6:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 80044ba:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80044be:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80044c2:	6812      	ldr	r2, [r2, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d101      	bne.n	80044ce <BFS_NextDirForEnemy+0x66>
 80044ca:	2300      	movs	r3, #0
 80044cc:	e2e9      	b.n	8004aa2 <BFS_NextDirForEnemy+0x63a>

  static uint8_t vis[MAP_ROWS][MAP_COLS];
  static int16_t px[MAP_ROWS][MAP_COLS], py[MAP_ROWS][MAP_COLS];
  memset(vis, 0, sizeof(vis));
 80044ce:	f44f 7208 	mov.w	r2, #544	@ 0x220
 80044d2:	2100      	movs	r1, #0
 80044d4:	486f      	ldr	r0, [pc, #444]	@ (8004694 <BFS_NextDirForEnemy+0x22c>)
 80044d6:	f009 fbad 	bl	800dc34 <memset>

  int qx[MAP_COLS*MAP_ROWS], qy[MAP_COLS*MAP_ROWS], qh=0, qt=0;
 80044da:	2300      	movs	r3, #0
 80044dc:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 80044e0:	f102 0204 	add.w	r2, r2, #4
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	2300      	movs	r3, #0
 80044e8:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 80044ec:	6013      	str	r3, [r2, #0]

  if (!TilePassableForEnemy(sx,sy, sh)) return D_NONE;
 80044ee:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80044f2:	f5a3 71b0 	sub.w	r1, r3, #352	@ 0x160
 80044f6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80044fa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80044fe:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 8004502:	f102 0218 	add.w	r2, r2, #24
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	6809      	ldr	r1, [r1, #0]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	f7ff fe8d 	bl	800422a <TilePassableForEnemy>
 8004510:	4603      	mov	r3, r0
 8004512:	f083 0301 	eor.w	r3, r3, #1
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <BFS_NextDirForEnemy+0xb8>
 800451c:	2300      	movs	r3, #0
 800451e:	e2c0      	b.n	8004aa2 <BFS_NextDirForEnemy+0x63a>
  vis[sy][sx]=1; px[sy][sx]=-1; py[sy][sx]=-1;
 8004520:	4a5c      	ldr	r2, [pc, #368]	@ (8004694 <BFS_NextDirForEnemy+0x22c>)
 8004522:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004526:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	015b      	lsls	r3, r3, #5
 800452e:	441a      	add	r2, r3
 8004530:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004534:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4413      	add	r3, r2
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	4955      	ldr	r1, [pc, #340]	@ (8004698 <BFS_NextDirForEnemy+0x230>)
 8004542:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004546:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004552:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4413      	add	r3, r2
 800455a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800455e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8004562:	494e      	ldr	r1, [pc, #312]	@ (800469c <BFS_NextDirForEnemy+0x234>)
 8004564:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004568:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004574:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4413      	add	r3, r2
 800457c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004580:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  qx[qt]=sx; qy[qt]=sy; qt++;
 8004584:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 8004588:	f103 0308 	add.w	r3, r3, #8
 800458c:	f6a3 03b4 	subw	r3, r3, #2228	@ 0x8b4
 8004590:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 800459a:	f5a1 71ae 	sub.w	r1, r1, #348	@ 0x15c
 800459e:	6809      	ldr	r1, [r1, #0]
 80045a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80045a4:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80045a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80045ac:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	f507 71b4 	add.w	r1, r7, #360	@ 0x168
 80045b6:	f5a1 71b0 	sub.w	r1, r1, #352	@ 0x160
 80045ba:	6809      	ldr	r1, [r1, #0]
 80045bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80045c0:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	3301      	adds	r3, #1
 80045c8:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 80045cc:	6013      	str	r3, [r2, #0]

  const int dx[4]={+1,0,-1,0};
 80045ce:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80045d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80045d6:	4a32      	ldr	r2, [pc, #200]	@ (80046a0 <BFS_NextDirForEnemy+0x238>)
 80045d8:	461c      	mov	r4, r3
 80045da:	4613      	mov	r3, r2
 80045dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const int dy[4]={0,+1,0,-1};
 80045e2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80045e6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80045ea:	4a2e      	ldr	r2, [pc, #184]	@ (80046a4 <BFS_NextDirForEnemy+0x23c>)
 80045ec:	461c      	mov	r4, r3
 80045ee:	4613      	mov	r3, r2
 80045f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80045f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  while (qh<qt){
 80045f6:	e132      	b.n	800485e <BFS_NextDirForEnemy+0x3f6>
    int x=qx[qh], y=qy[qh]; qh++;
 80045f8:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 80045fc:	f103 0308 	add.w	r3, r3, #8
 8004600:	f6a3 03b4 	subw	r3, r3, #2228	@ 0x8b4
 8004604:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 8004608:	f102 0204 	add.w	r2, r2, #4
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004612:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004616:	f102 0208 	add.w	r2, r2, #8
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004620:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004624:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 8004628:	f102 0204 	add.w	r2, r2, #4
 800462c:	6812      	ldr	r2, [r2, #0]
 800462e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004632:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004636:	f102 0204 	add.w	r2, r2, #4
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 8004640:	f103 0304 	add.w	r3, r3, #4
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3301      	adds	r3, #1
 8004648:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 800464c:	f102 0204 	add.w	r2, r2, #4
 8004650:	6013      	str	r3, [r2, #0]
    if (x==gx && y==gy) break;
 8004652:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004656:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800465a:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 800465e:	f102 0208 	add.w	r2, r2, #8
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d10c      	bne.n	8004684 <BFS_NextDirForEnemy+0x21c>
 800466a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800466e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004672:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004676:	f102 0204 	add.w	r2, r2, #4
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	f000 80f9 	beq.w	8004876 <BFS_NextDirForEnemy+0x40e>
    for (int i=0;i<4;i++){
 8004684:	2300      	movs	r3, #0
 8004686:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 800468a:	f102 021c 	add.w	r2, r2, #28
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	e0dd      	b.n	800484e <BFS_NextDirForEnemy+0x3e6>
 8004692:	bf00      	nop
 8004694:	2000383c 	.word	0x2000383c
 8004698:	20003a5c 	.word	0x20003a5c
 800469c:	20003e9c 	.word	0x20003e9c
 80046a0:	0800f654 	.word	0x0800f654
 80046a4:	0800f664 	.word	0x0800f664
      int nx=x+dx[i], ny=y+dy[i];
 80046a8:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80046ac:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80046b0:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80046b4:	f102 021c 	add.w	r2, r2, #28
 80046b8:	6812      	ldr	r2, [r2, #0]
 80046ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046be:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80046c2:	f102 0208 	add.w	r2, r2, #8
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	4413      	add	r3, r2
 80046ca:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80046d4:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80046d8:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80046dc:	f102 021c 	add.w	r2, r2, #28
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e6:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80046ea:	f102 0204 	add.w	r2, r2, #4
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	4413      	add	r3, r2
 80046f2:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80046f6:	f102 021c 	add.w	r2, r2, #28
 80046fa:	6013      	str	r3, [r2, #0]
      if (nx<0||ny<0||nx>=MAP_COLS||ny>=MAP_ROWS) continue;
 80046fc:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f2c0 8093 	blt.w	800482e <BFS_NextDirForEnemy+0x3c6>
 8004708:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800470c:	f103 031c 	add.w	r3, r3, #28
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f2c0 808b 	blt.w	800482e <BFS_NextDirForEnemy+0x3c6>
 8004718:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b1f      	cmp	r3, #31
 8004720:	f300 8085 	bgt.w	800482e <BFS_NextDirForEnemy+0x3c6>
 8004724:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8004728:	f103 031c 	add.w	r3, r3, #28
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b10      	cmp	r3, #16
 8004730:	dc7d      	bgt.n	800482e <BFS_NextDirForEnemy+0x3c6>
      if (vis[ny][nx]) continue;
 8004732:	4abd      	ldr	r2, [pc, #756]	@ (8004a28 <BFS_NextDirForEnemy+0x5c0>)
 8004734:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8004738:	f103 031c 	add.w	r3, r3, #28
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	015b      	lsls	r3, r3, #5
 8004740:	441a      	add	r2, r3
 8004742:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4413      	add	r3, r2
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d170      	bne.n	8004832 <BFS_NextDirForEnemy+0x3ca>
      if (!TilePassableForEnemy(nx,ny, sh)) continue;
 8004750:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 8004754:	f103 0318 	add.w	r3, r3, #24
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800475e:	f103 031c 	add.w	r3, r3, #28
 8004762:	6819      	ldr	r1, [r3, #0]
 8004764:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8004768:	6818      	ldr	r0, [r3, #0]
 800476a:	f7ff fd5e 	bl	800422a <TilePassableForEnemy>
 800476e:	4603      	mov	r3, r0
 8004770:	f083 0301 	eor.w	r3, r3, #1
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d15d      	bne.n	8004836 <BFS_NextDirForEnemy+0x3ce>
      vis[ny][nx]=1; px[ny][nx]=x; py[ny][nx]=y;
 800477a:	4aab      	ldr	r2, [pc, #684]	@ (8004a28 <BFS_NextDirForEnemy+0x5c0>)
 800477c:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8004780:	f103 031c 	add.w	r3, r3, #28
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	015b      	lsls	r3, r3, #5
 8004788:	441a      	add	r2, r3
 800478a:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4413      	add	r3, r2
 8004792:	2201      	movs	r2, #1
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800479a:	f103 0308 	add.w	r3, r3, #8
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	b218      	sxth	r0, r3
 80047a2:	49a2      	ldr	r1, [pc, #648]	@ (8004a2c <BFS_NextDirForEnemy+0x5c4>)
 80047a4:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80047a8:	f103 031c 	add.w	r3, r3, #28
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	4602      	mov	r2, r0
 80047ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 80047be:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80047c2:	f103 0304 	add.w	r3, r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b218      	sxth	r0, r3
 80047ca:	4999      	ldr	r1, [pc, #612]	@ (8004a30 <BFS_NextDirForEnemy+0x5c8>)
 80047cc:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80047d0:	f103 031c 	add.w	r3, r3, #28
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4413      	add	r3, r2
 80047e0:	4602      	mov	r2, r0
 80047e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      qx[qt]=nx; qy[qt]=ny; qt++;
 80047e6:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 80047ea:	f103 0308 	add.w	r3, r3, #8
 80047ee:	f6a3 03b4 	subw	r3, r3, #2228	@ 0x8b4
 80047f2:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 80047f6:	6812      	ldr	r2, [r2, #0]
 80047f8:	f507 518a 	add.w	r1, r7, #4416	@ 0x1140
 80047fc:	6809      	ldr	r1, [r1, #0]
 80047fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004802:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004806:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800480a:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	f507 5189 	add.w	r1, r7, #4384	@ 0x1120
 8004814:	f101 011c 	add.w	r1, r1, #28
 8004818:	6809      	ldr	r1, [r1, #0]
 800481a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800481e:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	f507 528b 	add.w	r2, r7, #4448	@ 0x1160
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	e004      	b.n	8004838 <BFS_NextDirForEnemy+0x3d0>
      if (nx<0||ny<0||nx>=MAP_COLS||ny>=MAP_ROWS) continue;
 800482e:	bf00      	nop
 8004830:	e002      	b.n	8004838 <BFS_NextDirForEnemy+0x3d0>
      if (vis[ny][nx]) continue;
 8004832:	bf00      	nop
 8004834:	e000      	b.n	8004838 <BFS_NextDirForEnemy+0x3d0>
      if (!TilePassableForEnemy(nx,ny, sh)) continue;
 8004836:	bf00      	nop
    for (int i=0;i<4;i++){
 8004838:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800483c:	f103 031c 	add.w	r3, r3, #28
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004848:	f102 021c 	add.w	r2, r2, #28
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8004852:	f103 031c 	add.w	r3, r3, #28
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2b03      	cmp	r3, #3
 800485a:	f77f af25 	ble.w	80046a8 <BFS_NextDirForEnemy+0x240>
  while (qh<qt){
 800485e:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 8004862:	f103 0304 	add.w	r3, r3, #4
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	f507 538b 	add.w	r3, r7, #4448	@ 0x1160
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	429a      	cmp	r2, r3
 8004870:	f6ff aec2 	blt.w	80045f8 <BFS_NextDirForEnemy+0x190>
 8004874:	e000      	b.n	8004878 <BFS_NextDirForEnemy+0x410>
    if (x==gx && y==gy) break;
 8004876:	bf00      	nop
    }
  }

  if (!vis[gy][gx]) return D_NONE;
 8004878:	4a6b      	ldr	r2, [pc, #428]	@ (8004a28 <BFS_NextDirForEnemy+0x5c0>)
 800487a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800487e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	015b      	lsls	r3, r3, #5
 8004886:	441a      	add	r2, r3
 8004888:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800488c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4413      	add	r3, r2
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <BFS_NextDirForEnemy+0x436>
 800489a:	2300      	movs	r3, #0
 800489c:	e101      	b.n	8004aa2 <BFS_NextDirForEnemy+0x63a>

  int cx=gx, cy=gy;
 800489e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80048a2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80048ac:	f102 0218 	add.w	r2, r2, #24
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80048b6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80048c0:	f102 0214 	add.w	r2, r2, #20
 80048c4:	6013      	str	r3, [r2, #0]
  int bx=-1, by=-1;
 80048c6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ca:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80048ce:	f102 0210 	add.w	r2, r2, #16
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	f04f 33ff 	mov.w	r3, #4294967295
 80048d8:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80048dc:	f102 020c 	add.w	r2, r2, #12
 80048e0:	6013      	str	r3, [r2, #0]
  while (px[cy][cx]!=-1){
 80048e2:	e04f      	b.n	8004984 <BFS_NextDirForEnemy+0x51c>
    bx=cx; by=cy;
 80048e4:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80048e8:	f103 0318 	add.w	r3, r3, #24
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80048f2:	f102 0210 	add.w	r2, r2, #16
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80048fc:	f103 0314 	add.w	r3, r3, #20
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004906:	f102 020c 	add.w	r2, r2, #12
 800490a:	6013      	str	r3, [r2, #0]
    int tx=px[cy][cx], ty=py[cy][cx];
 800490c:	4947      	ldr	r1, [pc, #284]	@ (8004a2c <BFS_NextDirForEnemy+0x5c4>)
 800490e:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8004912:	f103 0314 	add.w	r3, r3, #20
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800491e:	f103 0318 	add.w	r3, r3, #24
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4413      	add	r3, r2
 8004926:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800492a:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 800492e:	f102 0218 	add.w	r2, r2, #24
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	493e      	ldr	r1, [pc, #248]	@ (8004a30 <BFS_NextDirForEnemy+0x5c8>)
 8004936:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800493a:	f103 0314 	add.w	r3, r3, #20
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	015a      	lsls	r2, r3, #5
 8004942:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8004946:	f103 0318 	add.w	r3, r3, #24
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4413      	add	r3, r2
 800494e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8004952:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8004956:	f102 0214 	add.w	r2, r2, #20
 800495a:	6013      	str	r3, [r2, #0]
    cx=tx; cy=ty;
 800495c:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8004960:	f103 0318 	add.w	r3, r3, #24
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 800496a:	f102 0218 	add.w	r2, r2, #24
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8004974:	f103 0314 	add.w	r3, r3, #20
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 800497e:	f102 0214 	add.w	r2, r2, #20
 8004982:	6013      	str	r3, [r2, #0]
  while (px[cy][cx]!=-1){
 8004984:	4929      	ldr	r1, [pc, #164]	@ (8004a2c <BFS_NextDirForEnemy+0x5c4>)
 8004986:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800498a:	f103 0314 	add.w	r3, r3, #20
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8004996:	f103 0318 	add.w	r3, r3, #24
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4413      	add	r3, r2
 800499e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d19d      	bne.n	80048e4 <BFS_NextDirForEnemy+0x47c>
  }
  if (bx==-1) return D_NONE;
 80049a8:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80049ac:	f103 0310 	add.w	r3, r3, #16
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b6:	d101      	bne.n	80049bc <BFS_NextDirForEnemy+0x554>
 80049b8:	2300      	movs	r3, #0
 80049ba:	e072      	b.n	8004aa2 <BFS_NextDirForEnemy+0x63a>

  if      (bx==sx+1 && by==sy)   return D_RIGHT;
 80049bc:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80049c0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80049cc:	f102 0210 	add.w	r2, r2, #16
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d10d      	bne.n	80049f2 <BFS_NextDirForEnemy+0x58a>
 80049d6:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80049da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80049de:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80049e2:	f102 020c 	add.w	r2, r2, #12
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d101      	bne.n	80049f2 <BFS_NextDirForEnemy+0x58a>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e057      	b.n	8004aa2 <BFS_NextDirForEnemy+0x63a>
  else if (bx==sx-1 && by==sy)   return D_LEFT;
 80049f2:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80049f6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004a02:	f102 0210 	add.w	r2, r2, #16
 8004a06:	6812      	ldr	r2, [r2, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d113      	bne.n	8004a34 <BFS_NextDirForEnemy+0x5cc>
 8004a0c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004a10:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004a14:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004a18:	f102 020c 	add.w	r2, r2, #12
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d107      	bne.n	8004a34 <BFS_NextDirForEnemy+0x5cc>
 8004a24:	2303      	movs	r3, #3
 8004a26:	e03c      	b.n	8004aa2 <BFS_NextDirForEnemy+0x63a>
 8004a28:	2000383c 	.word	0x2000383c
 8004a2c:	20003a5c 	.word	0x20003a5c
 8004a30:	20003e9c 	.word	0x20003e9c
  else if (bx==sx && by==sy+1)   return D_DOWN;
 8004a34:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004a38:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a3c:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004a40:	f102 0210 	add.w	r2, r2, #16
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d10e      	bne.n	8004a6a <BFS_NextDirForEnemy+0x602>
 8004a4c:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004a50:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004a5c:	f102 020c 	add.w	r2, r2, #12
 8004a60:	6812      	ldr	r2, [r2, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d101      	bne.n	8004a6a <BFS_NextDirForEnemy+0x602>
 8004a66:	2302      	movs	r3, #2
 8004a68:	e01b      	b.n	8004aa2 <BFS_NextDirForEnemy+0x63a>
  else if (bx==sx && by==sy-1)   return D_UP;
 8004a6a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004a6e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8004a72:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004a76:	f102 0210 	add.w	r2, r2, #16
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d10e      	bne.n	8004aa0 <BFS_NextDirForEnemy+0x638>
 8004a82:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8004a86:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 8004a92:	f102 020c 	add.w	r2, r2, #12
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d101      	bne.n	8004aa0 <BFS_NextDirForEnemy+0x638>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	e000      	b.n	8004aa2 <BFS_NextDirForEnemy+0x63a>

  return D_NONE;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f507 578b 	add.w	r7, r7, #4448	@ 0x1160
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd90      	pop	{r4, r7, pc}
 8004aae:	bf00      	nop

08004ab0 <Enemy_FaceTowardsPixel>:

static void Enemy_FaceTowardsPixel(int px,int py)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b087      	sub	sp, #28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	6039      	str	r1, [r7, #0]
  int ecx = en_x + en_sh->w/2;
 8004aba:	4b20      	ldr	r3, [pc, #128]	@ (8004b3c <Enemy_FaceTowardsPixel+0x8c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	0fda      	lsrs	r2, r3, #31
 8004ac2:	4413      	add	r3, r2
 8004ac4:	105b      	asrs	r3, r3, #1
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b40 <Enemy_FaceTowardsPixel+0x90>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4413      	add	r3, r2
 8004ace:	617b      	str	r3, [r7, #20]
  int ecy = en_y + en_sh->h/2;
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b3c <Enemy_FaceTowardsPixel+0x8c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0fda      	lsrs	r2, r3, #31
 8004ad8:	4413      	add	r3, r2
 8004ada:	105b      	asrs	r3, r3, #1
 8004adc:	461a      	mov	r2, r3
 8004ade:	4b19      	ldr	r3, [pc, #100]	@ (8004b44 <Enemy_FaceTowardsPixel+0x94>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
  int dx = px - ecx;
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	60fb      	str	r3, [r7, #12]
  int dy = py - ecy;
 8004aee:	683a      	ldr	r2, [r7, #0]
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	60bb      	str	r3, [r7, #8]
  if (abs(dx) > abs(dy)) en_dir = (dx>0)? D_RIGHT : D_LEFT;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004afc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	bfb8      	it	lt
 8004b06:	425b      	neglt	r3, r3
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	dd08      	ble.n	8004b1e <Enemy_FaceTowardsPixel+0x6e>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dd01      	ble.n	8004b16 <Enemy_FaceTowardsPixel+0x66>
 8004b12:	2201      	movs	r2, #1
 8004b14:	e000      	b.n	8004b18 <Enemy_FaceTowardsPixel+0x68>
 8004b16:	2203      	movs	r2, #3
 8004b18:	4b0b      	ldr	r3, [pc, #44]	@ (8004b48 <Enemy_FaceTowardsPixel+0x98>)
 8004b1a:	701a      	strb	r2, [r3, #0]
  else                   en_dir = (dy>0)? D_DOWN  : D_UP;
}
 8004b1c:	e007      	b.n	8004b2e <Enemy_FaceTowardsPixel+0x7e>
  else                   en_dir = (dy>0)? D_DOWN  : D_UP;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	dd01      	ble.n	8004b28 <Enemy_FaceTowardsPixel+0x78>
 8004b24:	2202      	movs	r2, #2
 8004b26:	e000      	b.n	8004b2a <Enemy_FaceTowardsPixel+0x7a>
 8004b28:	2204      	movs	r2, #4
 8004b2a:	4b07      	ldr	r3, [pc, #28]	@ (8004b48 <Enemy_FaceTowardsPixel+0x98>)
 8004b2c:	701a      	strb	r2, [r3, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	2000173c 	.word	0x2000173c
 8004b40:	20001734 	.word	0x20001734
 8004b44:	20001738 	.word	0x20001738
 8004b48:	20000005 	.word	0x20000005

08004b4c <Enemy_Tick>:

static void Enemy_Tick(void)
{
 8004b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4e:	b097      	sub	sp, #92	@ 0x5c
 8004b50:	af06      	add	r7, sp, #24
  if      (en_dir==D_RIGHT) en_sh = &EN_S_R;
 8004b52:	4b8c      	ldr	r3, [pc, #560]	@ (8004d84 <Enemy_Tick+0x238>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d103      	bne.n	8004b62 <Enemy_Tick+0x16>
 8004b5a:	4b8b      	ldr	r3, [pc, #556]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004b5c:	4a8b      	ldr	r2, [pc, #556]	@ (8004d8c <Enemy_Tick+0x240>)
 8004b5e:	601a      	str	r2, [r3, #0]
 8004b60:	e016      	b.n	8004b90 <Enemy_Tick+0x44>
  else if (en_dir==D_LEFT)  en_sh = &EN_S_L;
 8004b62:	4b88      	ldr	r3, [pc, #544]	@ (8004d84 <Enemy_Tick+0x238>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d103      	bne.n	8004b72 <Enemy_Tick+0x26>
 8004b6a:	4b87      	ldr	r3, [pc, #540]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004b6c:	4a88      	ldr	r2, [pc, #544]	@ (8004d90 <Enemy_Tick+0x244>)
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	e00e      	b.n	8004b90 <Enemy_Tick+0x44>
  else if (en_dir==D_DOWN)  en_sh = &EN_S_F;
 8004b72:	4b84      	ldr	r3, [pc, #528]	@ (8004d84 <Enemy_Tick+0x238>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d103      	bne.n	8004b82 <Enemy_Tick+0x36>
 8004b7a:	4b83      	ldr	r3, [pc, #524]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004b7c:	4a85      	ldr	r2, [pc, #532]	@ (8004d94 <Enemy_Tick+0x248>)
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e006      	b.n	8004b90 <Enemy_Tick+0x44>
  else if (en_dir==D_UP)    en_sh = &EN_S_B;
 8004b82:	4b80      	ldr	r3, [pc, #512]	@ (8004d84 <Enemy_Tick+0x238>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d102      	bne.n	8004b90 <Enemy_Tick+0x44>
 8004b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004b8c:	4a82      	ldr	r2, [pc, #520]	@ (8004d98 <Enemy_Tick+0x24c>)
 8004b8e:	601a      	str	r2, [r3, #0]

  int gx=0, gy=0, has_target=0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b94:	2300      	movs	r3, #0
 8004b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b98:	2300      	movs	r3, #0
 8004b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Enemy_GetPlayerTargetTile(&gx,&gy,&has_target);
 8004b9c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004ba0:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8004ba4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fba1 	bl	80042f0 <Enemy_GetPlayerTargetTile>
  if (!has_target) return;
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8156 	beq.w	8004e62 <Enemy_Tick+0x316>

  int sx, sy; Enemy_GetStartTile(&sx,&sy);
 8004bb6:	f107 0220 	add.w	r2, r7, #32
 8004bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff fb6d 	bl	80042a0 <Enemy_GetStartTile>
  Dir step = BFS_NextDirForEnemy(sx,sy,gx,gy, en_sh);
 8004bc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bc8:	6a39      	ldr	r1, [r7, #32]
 8004bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bcc:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8004bce:	4b6e      	ldr	r3, [pc, #440]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	4623      	mov	r3, r4
 8004bd6:	f7ff fc47 	bl	8004468 <BFS_NextDirForEnemy>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c

  int nx=en_x, ny=en_y;
 8004be0:	4b6e      	ldr	r3, [pc, #440]	@ (8004d9c <Enemy_Tick+0x250>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	61fb      	str	r3, [r7, #28]
 8004be6:	4b6e      	ldr	r3, [pc, #440]	@ (8004da0 <Enemy_Tick+0x254>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	61bb      	str	r3, [r7, #24]
  bool moved=false;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  if (step!=D_NONE && Enemy_TryStep(step,&nx,&ny)) {
 8004bf2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d013      	beq.n	8004c22 <Enemy_Tick+0xd6>
 8004bfa:	f107 0218 	add.w	r2, r7, #24
 8004bfe:	f107 011c 	add.w	r1, r7, #28
 8004c02:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7ff fa3a 	bl	8004080 <Enemy_TryStep>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d007      	beq.n	8004c22 <Enemy_Tick+0xd6>
    en_dir = step; moved=true;
 8004c12:	4a5c      	ldr	r2, [pc, #368]	@ (8004d84 <Enemy_Tick+0x238>)
 8004c14:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004c18:	7013      	strb	r3, [r2, #0]
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8004c20:	e098      	b.n	8004d54 <Enemy_Tick+0x208>
  } else {
    int tpx, tpy; TileToPixelForSprite(gx,gy, en_sh->w,en_sh->h, &tpx,&tpy);
 8004c22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c26:	4b58      	ldr	r3, [pc, #352]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4b56      	ldr	r3, [pc, #344]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689c      	ldr	r4, [r3, #8]
 8004c32:	f107 0310 	add.w	r3, r7, #16
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	f107 0314 	add.w	r3, r7, #20
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	4623      	mov	r3, r4
 8004c40:	f7ff fac4 	bl	80041cc <TileToPixelForSprite>
    int dx = tpx - en_x; int dy = tpy - en_y;
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4b55      	ldr	r3, [pc, #340]	@ (8004d9c <Enemy_Tick+0x250>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	4b53      	ldr	r3, [pc, #332]	@ (8004da0 <Enemy_Tick+0x254>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	637b      	str	r3, [r7, #52]	@ 0x34
    Dir try1, try2;
    if (abs(dx) > abs(dy)) { try1 = (dx>0)?D_RIGHT:D_LEFT; try2 = (dy>0)?D_DOWN:D_UP; }
 8004c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c5a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004c5e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	bfb8      	it	lt
 8004c68:	425b      	neglt	r3, r3
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	dd10      	ble.n	8004c90 <Enemy_Tick+0x144>
 8004c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	dd01      	ble.n	8004c78 <Enemy_Tick+0x12c>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <Enemy_Tick+0x12e>
 8004c78:	2303      	movs	r3, #3
 8004c7a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dd01      	ble.n	8004c88 <Enemy_Tick+0x13c>
 8004c84:	2302      	movs	r3, #2
 8004c86:	e000      	b.n	8004c8a <Enemy_Tick+0x13e>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8004c8e:	e00f      	b.n	8004cb0 <Enemy_Tick+0x164>
    else                   { try1 = (dy>0)?D_DOWN:D_UP;    try2 = (dx>0)?D_RIGHT:D_LEFT; }
 8004c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	dd01      	ble.n	8004c9a <Enemy_Tick+0x14e>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e000      	b.n	8004c9c <Enemy_Tick+0x150>
 8004c9a:	2304      	movs	r3, #4
 8004c9c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	dd01      	ble.n	8004caa <Enemy_Tick+0x15e>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <Enemy_Tick+0x160>
 8004caa:	2303      	movs	r3, #3
 8004cac:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

    if (!moved && Enemy_TryStep(try1,&nx,&ny)){ en_dir=try1; moved=true; }
 8004cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004cb4:	f083 0301 	eor.w	r3, r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d012      	beq.n	8004ce4 <Enemy_Tick+0x198>
 8004cbe:	f107 0218 	add.w	r2, r7, #24
 8004cc2:	f107 011c 	add.w	r1, r7, #28
 8004cc6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff f9d8 	bl	8004080 <Enemy_TryStep>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d006      	beq.n	8004ce4 <Enemy_Tick+0x198>
 8004cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8004d84 <Enemy_Tick+0x238>)
 8004cd8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8004cdc:	7013      	strb	r3, [r2, #0]
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    if (!moved && Enemy_TryStep(try2,&nx,&ny)){ en_dir=try2; moved=true; }
 8004ce4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004ce8:	f083 0301 	eor.w	r3, r3, #1
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d012      	beq.n	8004d18 <Enemy_Tick+0x1cc>
 8004cf2:	f107 0218 	add.w	r2, r7, #24
 8004cf6:	f107 011c 	add.w	r1, r7, #28
 8004cfa:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7ff f9be 	bl	8004080 <Enemy_TryStep>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <Enemy_Tick+0x1cc>
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004d84 <Enemy_Tick+0x238>)
 8004d0c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8004d10:	7013      	strb	r3, [r2, #0]
 8004d12:	2301      	movs	r3, #1
 8004d14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    if (!moved){
 8004d18:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004d1c:	f083 0301 	eor.w	r3, r3, #1
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <Enemy_Tick+0x208>
      int tpx2, tpy2; TileToPixelForSprite(gx,gy, en_sh->w,en_sh->h, &tpx2,&tpy2);
 8004d26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d2a:	4b17      	ldr	r3, [pc, #92]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	4b15      	ldr	r3, [pc, #84]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689c      	ldr	r4, [r3, #8]
 8004d36:	f107 0308 	add.w	r3, r7, #8
 8004d3a:	9301      	str	r3, [sp, #4]
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	4623      	mov	r3, r4
 8004d44:	f7ff fa42 	bl	80041cc <TileToPixelForSprite>
      Enemy_FaceTowardsPixel(tpx2,tpy2);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff feae 	bl	8004ab0 <Enemy_FaceTowardsPixel>
    }
  }

  if      (en_dir==D_RIGHT) en_sh = &EN_S_R;
 8004d54:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <Enemy_Tick+0x238>)
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d103      	bne.n	8004d64 <Enemy_Tick+0x218>
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004d5e:	4a0b      	ldr	r2, [pc, #44]	@ (8004d8c <Enemy_Tick+0x240>)
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e026      	b.n	8004db2 <Enemy_Tick+0x266>
  else if (en_dir==D_LEFT)  en_sh = &EN_S_L;
 8004d64:	4b07      	ldr	r3, [pc, #28]	@ (8004d84 <Enemy_Tick+0x238>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d103      	bne.n	8004d74 <Enemy_Tick+0x228>
 8004d6c:	4b06      	ldr	r3, [pc, #24]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004d6e:	4a08      	ldr	r2, [pc, #32]	@ (8004d90 <Enemy_Tick+0x244>)
 8004d70:	601a      	str	r2, [r3, #0]
 8004d72:	e01e      	b.n	8004db2 <Enemy_Tick+0x266>
  else if (en_dir==D_DOWN)  en_sh = &EN_S_F;
 8004d74:	4b03      	ldr	r3, [pc, #12]	@ (8004d84 <Enemy_Tick+0x238>)
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d113      	bne.n	8004da4 <Enemy_Tick+0x258>
 8004d7c:	4b02      	ldr	r3, [pc, #8]	@ (8004d88 <Enemy_Tick+0x23c>)
 8004d7e:	4a05      	ldr	r2, [pc, #20]	@ (8004d94 <Enemy_Tick+0x248>)
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	e016      	b.n	8004db2 <Enemy_Tick+0x266>
 8004d84:	20000005 	.word	0x20000005
 8004d88:	2000173c 	.word	0x2000173c
 8004d8c:	0804a598 	.word	0x0804a598
 8004d90:	0804a588 	.word	0x0804a588
 8004d94:	0804a568 	.word	0x0804a568
 8004d98:	0804a578 	.word	0x0804a578
 8004d9c:	20001734 	.word	0x20001734
 8004da0:	20001738 	.word	0x20001738
  else if (en_dir==D_UP)    en_sh = &EN_S_B;
 8004da4:	4b31      	ldr	r3, [pc, #196]	@ (8004e6c <Enemy_Tick+0x320>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b04      	cmp	r3, #4
 8004daa:	d102      	bne.n	8004db2 <Enemy_Tick+0x266>
 8004dac:	4b30      	ldr	r3, [pc, #192]	@ (8004e70 <Enemy_Tick+0x324>)
 8004dae:	4a31      	ldr	r2, [pc, #196]	@ (8004e74 <Enemy_Tick+0x328>)
 8004db0:	601a      	str	r2, [r3, #0]

  if (moved){ PatchFromMap(en_x,en_y,en_sh->w,en_sh->h); en_x = nx; en_y = ny; LCD_Sprite(en_x,en_y,en_sh->w,en_sh->h,(uint8_t*)en_sh->data,en_sh->columns,en_fr,0,0); }
 8004db2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d032      	beq.n	8004e20 <Enemy_Tick+0x2d4>
 8004dba:	4b2f      	ldr	r3, [pc, #188]	@ (8004e78 <Enemy_Tick+0x32c>)
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8004e7c <Enemy_Tick+0x330>)
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e70 <Enemy_Tick+0x324>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	4b29      	ldr	r3, [pc, #164]	@ (8004e70 <Enemy_Tick+0x324>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f7fd fc5b 	bl	8002688 <PatchFromMap>
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4a28      	ldr	r2, [pc, #160]	@ (8004e78 <Enemy_Tick+0x32c>)
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	4a28      	ldr	r2, [pc, #160]	@ (8004e7c <Enemy_Tick+0x330>)
 8004ddc:	6013      	str	r3, [r2, #0]
 8004dde:	4b26      	ldr	r3, [pc, #152]	@ (8004e78 <Enemy_Tick+0x32c>)
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	4b26      	ldr	r3, [pc, #152]	@ (8004e7c <Enemy_Tick+0x330>)
 8004de4:	681c      	ldr	r4, [r3, #0]
 8004de6:	4b22      	ldr	r3, [pc, #136]	@ (8004e70 <Enemy_Tick+0x324>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685d      	ldr	r5, [r3, #4]
 8004dec:	4b20      	ldr	r3, [pc, #128]	@ (8004e70 <Enemy_Tick+0x324>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689e      	ldr	r6, [r3, #8]
 8004df2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e70 <Enemy_Tick+0x324>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8004e70 <Enemy_Tick+0x324>)
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	68d2      	ldr	r2, [r2, #12]
 8004e00:	491f      	ldr	r1, [pc, #124]	@ (8004e80 <Enemy_Tick+0x334>)
 8004e02:	6809      	ldr	r1, [r1, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	9304      	str	r3, [sp, #16]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	9303      	str	r3, [sp, #12]
 8004e0c:	9102      	str	r1, [sp, #8]
 8004e0e:	9201      	str	r2, [sp, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	4633      	mov	r3, r6
 8004e16:	462a      	mov	r2, r5
 8004e18:	4621      	mov	r1, r4
 8004e1a:	f7fc fdc5 	bl	80019a8 <LCD_Sprite>
 8004e1e:	e021      	b.n	8004e64 <Enemy_Tick+0x318>
  else { LCD_Sprite(en_x,en_y,en_sh->w,en_sh->h,(uint8_t*)en_sh->data,en_sh->columns,en_fr,0,0); }
 8004e20:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <Enemy_Tick+0x32c>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	4b15      	ldr	r3, [pc, #84]	@ (8004e7c <Enemy_Tick+0x330>)
 8004e26:	681c      	ldr	r4, [r3, #0]
 8004e28:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <Enemy_Tick+0x324>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	685d      	ldr	r5, [r3, #4]
 8004e2e:	4b10      	ldr	r3, [pc, #64]	@ (8004e70 <Enemy_Tick+0x324>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689e      	ldr	r6, [r3, #8]
 8004e34:	4b0e      	ldr	r3, [pc, #56]	@ (8004e70 <Enemy_Tick+0x324>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8004e70 <Enemy_Tick+0x324>)
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	68d2      	ldr	r2, [r2, #12]
 8004e42:	490f      	ldr	r1, [pc, #60]	@ (8004e80 <Enemy_Tick+0x334>)
 8004e44:	6809      	ldr	r1, [r1, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	9304      	str	r3, [sp, #16]
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9303      	str	r3, [sp, #12]
 8004e4e:	9102      	str	r1, [sp, #8]
 8004e50:	9201      	str	r2, [sp, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	4633      	mov	r3, r6
 8004e58:	462a      	mov	r2, r5
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	f7fc fda4 	bl	80019a8 <LCD_Sprite>
 8004e60:	e000      	b.n	8004e64 <Enemy_Tick+0x318>
  if (!has_target) return;
 8004e62:	bf00      	nop
}
 8004e64:	3744      	adds	r7, #68	@ 0x44
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000005 	.word	0x20000005
 8004e70:	2000173c 	.word	0x2000173c
 8004e74:	0804a578 	.word	0x0804a578
 8004e78:	20001734 	.word	0x20001734
 8004e7c:	20001738 	.word	0x20001738
 8004e80:	20001740 	.word	0x20001740

08004e84 <ShowEndScreen>:

/* ===================== FIN DEL JUEGO ===================== */
static void ShowEndScreen(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b092      	sub	sp, #72	@ 0x48
 8004e88:	af02      	add	r7, sp, #8
  UI_FillRect(20, 70, LCD_W-40, 110, COLOR_BLUE);
 8004e8a:	231f      	movs	r3, #31
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	236e      	movs	r3, #110	@ 0x6e
 8004e90:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8004e94:	2146      	movs	r1, #70	@ 0x46
 8004e96:	2014      	movs	r0, #20
 8004e98:	f7fc fe72 	bl	8001b80 <UI_FillRect>

  char buf[64];
  snprintf(buf, sizeof(buf), "P1: %03d  P2: %03d", p1_score, p2_score);
 8004e9c:	4b20      	ldr	r3, [pc, #128]	@ (8004f20 <ShowEndScreen+0x9c>)
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	4b20      	ldr	r3, [pc, #128]	@ (8004f24 <ShowEndScreen+0xa0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4638      	mov	r0, r7
 8004ea6:	9300      	str	r3, [sp, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8004f28 <ShowEndScreen+0xa4>)
 8004eac:	2140      	movs	r1, #64	@ 0x40
 8004eae:	f008 fe5d 	bl	800db6c <sniprintf>
  DrawTextC(buf, 40, 82, COLOR_YELLOW, COLOR_BLUE);
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	231f      	movs	r3, #31
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8004ebc:	2252      	movs	r2, #82	@ 0x52
 8004ebe:	2128      	movs	r1, #40	@ 0x28
 8004ec0:	f7fc fe49 	bl	8001b56 <DrawTextC>

  if (g_game_over==1) DrawTextC("Ganaron",   40, 96, COLOR_WHITE, COLOR_BLUE);
 8004ec4:	4b19      	ldr	r3, [pc, #100]	@ (8004f2c <ShowEndScreen+0xa8>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d109      	bne.n	8004ee0 <ShowEndScreen+0x5c>
 8004ecc:	231f      	movs	r3, #31
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ed4:	2260      	movs	r2, #96	@ 0x60
 8004ed6:	2128      	movs	r1, #40	@ 0x28
 8004ed8:	4815      	ldr	r0, [pc, #84]	@ (8004f30 <ShowEndScreen+0xac>)
 8004eda:	f7fc fe3c 	bl	8001b56 <DrawTextC>
 8004ede:	e008      	b.n	8004ef2 <ShowEndScreen+0x6e>
  else                DrawTextC("Perdieron", 40, 96, COLOR_WHITE, COLOR_BLUE);
 8004ee0:	231f      	movs	r3, #31
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ee8:	2260      	movs	r2, #96	@ 0x60
 8004eea:	2128      	movs	r1, #40	@ 0x28
 8004eec:	4811      	ldr	r0, [pc, #68]	@ (8004f34 <ShowEndScreen+0xb0>)
 8004eee:	f7fc fe32 	bl	8001b56 <DrawTextC>

  DrawTextC("A: Reintentar", 40, 112, COLOR_WHITE, COLOR_BLUE);
 8004ef2:	231f      	movs	r3, #31
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004efa:	2270      	movs	r2, #112	@ 0x70
 8004efc:	2128      	movs	r1, #40	@ 0x28
 8004efe:	480e      	ldr	r0, [pc, #56]	@ (8004f38 <ShowEndScreen+0xb4>)
 8004f00:	f7fc fe29 	bl	8001b56 <DrawTextC>
  DrawTextC("B: Menu",       40, 126, COLOR_WHITE, COLOR_BLUE);
 8004f04:	231f      	movs	r3, #31
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004f0c:	227e      	movs	r2, #126	@ 0x7e
 8004f0e:	2128      	movs	r1, #40	@ 0x28
 8004f10:	480a      	ldr	r0, [pc, #40]	@ (8004f3c <ShowEndScreen+0xb8>)
 8004f12:	f7fc fe20 	bl	8001b56 <DrawTextC>
}
 8004f16:	bf00      	nop
 8004f18:	3740      	adds	r7, #64	@ 0x40
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200016e8 	.word	0x200016e8
 8004f24:	20001718 	.word	0x20001718
 8004f28:	0800f674 	.word	0x0800f674
 8004f2c:	2000371c 	.word	0x2000371c
 8004f30:	0800f688 	.word	0x0800f688
 8004f34:	0800f690 	.word	0x0800f690
 8004f38:	0800f69c 	.word	0x0800f69c
 8004f3c:	0800f6ac 	.word	0x0800f6ac

08004f40 <Scores_Append>:

/* ===================== SCORES / HELP / CREDITS ===================== */
static void Scores_Append(int p1, int p2)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	f5ad 5d84 	sub.w	sp, sp, #4224	@ 0x1080
 8004f46:	b084      	sub	sp, #16
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004f4e:	f843 0c84 	str.w	r0, [r3, #-132]
 8004f52:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004f56:	f843 1c88 	str.w	r1, [r3, #-136]
  f_mount(&s_fs, "", 1);
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	4930      	ldr	r1, [pc, #192]	@ (8005020 <Scores_Append+0xe0>)
 8004f5e:	4831      	ldr	r0, [pc, #196]	@ (8005024 <Scores_Append+0xe4>)
 8004f60:	f007 fcd6 	bl	800c910 <f_mount>

  FIL f; UINT wr=0;
 8004f64:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f842 3c3c 	str.w	r3, [r2, #-60]
  FRESULT fr = f_open(&f, SCORES_FILE, FA_OPEN_APPEND | FA_WRITE);
 8004f70:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004f74:	3b18      	subs	r3, #24
 8004f76:	2232      	movs	r2, #50	@ 0x32
 8004f78:	492b      	ldr	r1, [pc, #172]	@ (8005028 <Scores_Append+0xe8>)
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f007 fd0e 	bl	800c99c <f_open>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8004f86:	f102 0207 	add.w	r2, r2, #7
 8004f8a:	7013      	strb	r3, [r2, #0]
  if (fr != FR_OK) fr = f_open(&f, SCORES_FILE, FA_CREATE_ALWAYS | FA_WRITE);
 8004f8c:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8004f90:	f103 0307 	add.w	r3, r3, #7
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <Scores_Append+0x76>
 8004f9a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004f9e:	3b18      	subs	r3, #24
 8004fa0:	220a      	movs	r2, #10
 8004fa2:	4921      	ldr	r1, [pc, #132]	@ (8005028 <Scores_Append+0xe8>)
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f007 fcf9 	bl	800c99c <f_open>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f507 5284 	add.w	r2, r7, #4224	@ 0x1080
 8004fb0:	f102 0207 	add.w	r2, r2, #7
 8004fb4:	7013      	strb	r3, [r2, #0]
  if (fr == FR_OK) {
 8004fb6:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8004fba:	f103 0307 	add.w	r3, r3, #7
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d127      	bne.n	8005014 <Scores_Append+0xd4>
    char line[64];
    int n = snprintf(line, sizeof(line), "P1=%03d, P2=%03d\r\n", p1, p2);
 8004fc4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8004fce:	381c      	subs	r0, #28
 8004fd0:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004fd4:	f853 3c88 	ldr.w	r3, [r3, #-136]
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	f852 3c84 	ldr.w	r3, [r2, #-132]
 8004fde:	4a13      	ldr	r2, [pc, #76]	@ (800502c <Scores_Append+0xec>)
 8004fe0:	2140      	movs	r1, #64	@ 0x40
 8004fe2:	f008 fdc3 	bl	800db6c <sniprintf>
 8004fe6:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8004fea:	6018      	str	r0, [r3, #0]
    f_write(&f, line, (UINT)n, &wr);
 8004fec:	f507 5384 	add.w	r3, r7, #4224	@ 0x1080
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004ff6:	3b1c      	subs	r3, #28
 8004ff8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8004ffc:	391c      	subs	r1, #28
 8004ffe:	f107 0068 	add.w	r0, r7, #104	@ 0x68
 8005002:	3818      	subs	r0, #24
 8005004:	f007 fff1 	bl	800cfea <f_write>
    f_close(&f);
 8005008:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800500c:	3b18      	subs	r3, #24
 800500e:	4618      	mov	r0, r3
 8005010:	f008 f9fd 	bl	800d40e <f_close>
  }
}
 8005014:	bf00      	nop
 8005016:	f507 5784 	add.w	r7, r7, #4224	@ 0x1080
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	0800f614 	.word	0x0800f614
 8005024:	20000258 	.word	0x20000258
 8005028:	0800f6b4 	.word	0x0800f6b4
 800502c:	0800f6c0 	.word	0x0800f6c0

08005030 <Scores_ShowScreen>:

static void Scores_ShowScreen(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	f5ad 5d99 	sub.w	sp, sp, #4896	@ 0x1320
 8005036:	af02      	add	r7, sp, #8
  LCD_Clear(COLOR_BLACK);
 8005038:	2000      	movs	r0, #0
 800503a:	f7fc fb2b 	bl	8001694 <LCD_Clear>
  UI_FillRect(10, 10, LCD_W-20, LCD_H-20, COLOR_BLUE);
 800503e:	231f      	movs	r3, #31
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	23dc      	movs	r3, #220	@ 0xdc
 8005044:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005048:	210a      	movs	r1, #10
 800504a:	200a      	movs	r0, #10
 800504c:	f7fc fd98 	bl	8001b80 <UI_FillRect>
  DrawTextC("SCORES (ultimas partidas)", 20, 16, COLOR_YELLOW, COLOR_BLUE);
 8005050:	231f      	movs	r3, #31
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8005058:	2210      	movs	r2, #16
 800505a:	2114      	movs	r1, #20
 800505c:	48d3      	ldr	r0, [pc, #844]	@ (80053ac <Scores_ShowScreen+0x37c>)
 800505e:	f7fc fd7a 	bl	8001b56 <DrawTextC>

  char ring[MAX_LINES_SHOWN][MAX_LINE_LEN];
  int   ring_count = 0;
 8005062:	2300      	movs	r3, #0
 8005064:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 8005068:	f102 0214 	add.w	r2, r2, #20
 800506c:	6013      	str	r3, [r2, #0]

  f_mount(&s_fs, "", 1);
 800506e:	2201      	movs	r2, #1
 8005070:	49cf      	ldr	r1, [pc, #828]	@ (80053b0 <Scores_ShowScreen+0x380>)
 8005072:	48d0      	ldr	r0, [pc, #832]	@ (80053b4 <Scores_ShowScreen+0x384>)
 8005074:	f007 fc4c 	bl	800c910 <f_mount>
  FIL f; FRESULT fr = f_open(&f, SCORES_FILE, FA_READ);
 8005078:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800507c:	3b10      	subs	r3, #16
 800507e:	2201      	movs	r2, #1
 8005080:	49cd      	ldr	r1, [pc, #820]	@ (80053b8 <Scores_ShowScreen+0x388>)
 8005082:	4618      	mov	r0, r3
 8005084:	f007 fc8a 	bl	800c99c <f_open>
 8005088:	4603      	mov	r3, r0
 800508a:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 800508e:	f102 0203 	add.w	r2, r2, #3
 8005092:	7013      	strb	r3, [r2, #0]
  if (fr == FR_OK) {
 8005094:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005098:	f103 0303 	add.w	r3, r3, #3
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f040 814c 	bne.w	800533c <Scores_ShowScreen+0x30c>
    char chunk[128];
    UINT br=0;
 80050a4:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80050a8:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
    char line[MAX_LINE_LEN]; int llen=0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 80050b6:	f102 0210 	add.w	r2, r2, #16
 80050ba:	6013      	str	r3, [r2, #0]

    do {
      br=0;
 80050bc:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80050c0:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
      fr = f_read(&f, chunk, sizeof(chunk), &br);
 80050c8:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80050cc:	3b14      	subs	r3, #20
 80050ce:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80050d2:	3914      	subs	r1, #20
 80050d4:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 80050d8:	3810      	subs	r0, #16
 80050da:	2280      	movs	r2, #128	@ 0x80
 80050dc:	f007 fe26 	bl	800cd2c <f_read>
 80050e0:	4603      	mov	r3, r0
 80050e2:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 80050e6:	f102 0203 	add.w	r2, r2, #3
 80050ea:	7013      	strb	r3, [r2, #0]
      for (UINT i=0;i<br;i++){
 80050ec:	2300      	movs	r3, #0
 80050ee:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 80050f2:	f102 020c 	add.w	r2, r2, #12
 80050f6:	6013      	str	r3, [r2, #0]
 80050f8:	e0a4      	b.n	8005244 <Scores_ShowScreen+0x214>
        char ch = chunk[i];
 80050fa:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 80050fe:	f5a3 7235 	sub.w	r2, r3, #724	@ 0x2d4
 8005102:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005106:	f103 030c 	add.w	r3, r3, #12
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4413      	add	r3, r2
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 8005114:	f102 0202 	add.w	r2, r2, #2
 8005118:	7013      	strb	r3, [r2, #0]
        if (ch=='\n' || ch=='\r') {
 800511a:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800511e:	f103 0302 	add.w	r3, r3, #2
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b0a      	cmp	r3, #10
 8005126:	d006      	beq.n	8005136 <Scores_ShowScreen+0x106>
 8005128:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800512c:	f103 0302 	add.w	r3, r3, #2
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	2b0d      	cmp	r3, #13
 8005134:	d15f      	bne.n	80051f6 <Scores_ShowScreen+0x1c6>
          if (llen>0) {
 8005136:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800513a:	f103 0310 	add.w	r3, r3, #16
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	dd74      	ble.n	800522e <Scores_ShowScreen+0x1fe>
            line[ CLAMP(llen,0,MAX_LINE_LEN-1) ] = '\0';
 8005144:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005148:	f103 0310 	add.w	r3, r3, #16
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	db08      	blt.n	8005164 <Scores_ShowScreen+0x134>
 8005152:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005156:	f103 0310 	add.w	r3, r3, #16
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b3f      	cmp	r3, #63	@ 0x3f
 800515e:	bfa8      	it	ge
 8005160:	233f      	movge	r3, #63	@ 0x3f
 8005162:	e000      	b.n	8005166 <Scores_ShowScreen+0x136>
 8005164:	2300      	movs	r3, #0
 8005166:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 800516a:	f5a2 7245 	sub.w	r2, r2, #788	@ 0x314
 800516e:	2100      	movs	r1, #0
 8005170:	54d1      	strb	r1, [r2, r3]
            strncpy(ring[ring_count % MAX_LINES_SHOWN], line, MAX_LINE_LEN);
 8005172:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005176:	f103 0314 	add.w	r3, r3, #20
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	425a      	negs	r2, r3
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	f002 0207 	and.w	r2, r2, #7
 8005186:	bf58      	it	pl
 8005188:	4253      	negpl	r3, r2
 800518a:	f507 5287 	add.w	r2, r7, #4320	@ 0x10e0
 800518e:	f102 0218 	add.w	r2, r2, #24
 8005192:	019b      	lsls	r3, r3, #6
 8005194:	18d0      	adds	r0, r2, r3
 8005196:	f107 0318 	add.w	r3, r7, #24
 800519a:	3b14      	subs	r3, #20
 800519c:	2240      	movs	r2, #64	@ 0x40
 800519e:	4619      	mov	r1, r3
 80051a0:	f008 fd5d 	bl	800dc5e <strncpy>
            ring[ring_count % MAX_LINES_SHOWN][MAX_LINE_LEN-1]='\0';
 80051a4:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 80051a8:	f103 0314 	add.w	r3, r3, #20
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	425a      	negs	r2, r3
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	f002 0207 	and.w	r2, r2, #7
 80051b8:	bf58      	it	pl
 80051ba:	4253      	negpl	r3, r2
 80051bc:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 80051c0:	f102 0218 	add.w	r2, r2, #24
 80051c4:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 80051c8:	019b      	lsls	r3, r3, #6
 80051ca:	4413      	add	r3, r2
 80051cc:	333f      	adds	r3, #63	@ 0x3f
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
            ring_count++;
 80051d2:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 80051d6:	f103 0314 	add.w	r3, r3, #20
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 80051e2:	f102 0214 	add.w	r2, r2, #20
 80051e6:	6013      	str	r3, [r2, #0]
            llen=0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 80051ee:	f102 0210 	add.w	r2, r2, #16
 80051f2:	6013      	str	r3, [r2, #0]
          if (llen>0) {
 80051f4:	e01b      	b.n	800522e <Scores_ShowScreen+0x1fe>
          }
        } else if (llen < (MAX_LINE_LEN-1)) {
 80051f6:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 80051fa:	f103 0310 	add.w	r3, r3, #16
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b3e      	cmp	r3, #62	@ 0x3e
 8005202:	dc14      	bgt.n	800522e <Scores_ShowScreen+0x1fe>
          line[llen++] = ch;
 8005204:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005208:	f103 0310 	add.w	r3, r3, #16
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	f507 5198 	add.w	r1, r7, #4864	@ 0x1300
 8005214:	f101 0110 	add.w	r1, r1, #16
 8005218:	600a      	str	r2, [r1, #0]
 800521a:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 800521e:	f5a2 7245 	sub.w	r2, r2, #788	@ 0x314
 8005222:	f507 5198 	add.w	r1, r7, #4864	@ 0x1300
 8005226:	f101 0102 	add.w	r1, r1, #2
 800522a:	7809      	ldrb	r1, [r1, #0]
 800522c:	54d1      	strb	r1, [r2, r3]
      for (UINT i=0;i<br;i++){
 800522e:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005232:	f103 030c 	add.w	r3, r3, #12
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 800523e:	f102 020c 	add.w	r2, r2, #12
 8005242:	6013      	str	r3, [r2, #0]
 8005244:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8005248:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 8005252:	f102 020c 	add.w	r2, r2, #12
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	f4ff af4e 	bcc.w	80050fa <Scores_ShowScreen+0xca>
        }
      }
    } while (fr == FR_OK && br == sizeof(chunk));
 800525e:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005262:	f103 0303 	add.w	r3, r3, #3
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d107      	bne.n	800527c <Scores_ShowScreen+0x24c>
 800526c:	f507 7346 	add.w	r3, r7, #792	@ 0x318
 8005270:	f5a3 7315 	sub.w	r3, r3, #596	@ 0x254
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b80      	cmp	r3, #128	@ 0x80
 8005278:	f43f af20 	beq.w	80050bc <Scores_ShowScreen+0x8c>

    if (llen>0){
 800527c:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005280:	f103 0310 	add.w	r3, r3, #16
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	dd51      	ble.n	800532e <Scores_ShowScreen+0x2fe>
      line[ CLAMP(llen,0,MAX_LINE_LEN-1) ] = '\0';
 800528a:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800528e:	f103 0310 	add.w	r3, r3, #16
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	db08      	blt.n	80052aa <Scores_ShowScreen+0x27a>
 8005298:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800529c:	f103 0310 	add.w	r3, r3, #16
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80052a4:	bfa8      	it	ge
 80052a6:	233f      	movge	r3, #63	@ 0x3f
 80052a8:	e000      	b.n	80052ac <Scores_ShowScreen+0x27c>
 80052aa:	2300      	movs	r3, #0
 80052ac:	f507 7246 	add.w	r2, r7, #792	@ 0x318
 80052b0:	f5a2 7245 	sub.w	r2, r2, #788	@ 0x314
 80052b4:	2100      	movs	r1, #0
 80052b6:	54d1      	strb	r1, [r2, r3]
      strncpy(ring[ring_count % MAX_LINES_SHOWN], line, MAX_LINE_LEN);
 80052b8:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 80052bc:	f103 0314 	add.w	r3, r3, #20
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	425a      	negs	r2, r3
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	f002 0207 	and.w	r2, r2, #7
 80052cc:	bf58      	it	pl
 80052ce:	4253      	negpl	r3, r2
 80052d0:	f507 5287 	add.w	r2, r7, #4320	@ 0x10e0
 80052d4:	f102 0218 	add.w	r2, r2, #24
 80052d8:	019b      	lsls	r3, r3, #6
 80052da:	18d0      	adds	r0, r2, r3
 80052dc:	f107 0318 	add.w	r3, r7, #24
 80052e0:	3b14      	subs	r3, #20
 80052e2:	2240      	movs	r2, #64	@ 0x40
 80052e4:	4619      	mov	r1, r3
 80052e6:	f008 fcba 	bl	800dc5e <strncpy>
      ring[ring_count % MAX_LINES_SHOWN][MAX_LINE_LEN-1]='\0';
 80052ea:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 80052ee:	f103 0314 	add.w	r3, r3, #20
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	425a      	negs	r2, r3
 80052f6:	f003 0307 	and.w	r3, r3, #7
 80052fa:	f002 0207 	and.w	r2, r2, #7
 80052fe:	bf58      	it	pl
 8005300:	4253      	negpl	r3, r2
 8005302:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 8005306:	f102 0218 	add.w	r2, r2, #24
 800530a:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 800530e:	019b      	lsls	r3, r3, #6
 8005310:	4413      	add	r3, r2
 8005312:	333f      	adds	r3, #63	@ 0x3f
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
      ring_count++;
 8005318:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800531c:	f103 0314 	add.w	r3, r3, #20
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3301      	adds	r3, #1
 8005324:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 8005328:	f102 0214 	add.w	r2, r2, #20
 800532c:	6013      	str	r3, [r2, #0]
    }
    f_close(&f);
 800532e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8005332:	3b10      	subs	r3, #16
 8005334:	4618      	mov	r0, r3
 8005336:	f008 f86a 	bl	800d40e <f_close>
 800533a:	e017      	b.n	800536c <Scores_ShowScreen+0x33c>
  } else {
    strncpy(ring[0], "No hay partidas guardadas.", MAX_LINE_LEN);
 800533c:	f507 5387 	add.w	r3, r7, #4320	@ 0x10e0
 8005340:	f103 0318 	add.w	r3, r3, #24
 8005344:	2240      	movs	r2, #64	@ 0x40
 8005346:	491d      	ldr	r1, [pc, #116]	@ (80053bc <Scores_ShowScreen+0x38c>)
 8005348:	4618      	mov	r0, r3
 800534a:	f008 fc88 	bl	800dc5e <strncpy>
    ring[0][MAX_LINE_LEN-1]='\0';
 800534e:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005352:	f103 0318 	add.w	r3, r3, #24
 8005356:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    ring_count = 1;
 8005360:	2301      	movs	r3, #1
 8005362:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 8005366:	f102 0214 	add.w	r2, r2, #20
 800536a:	6013      	str	r3, [r2, #0]
  }

  int y = 36;                    /* antes 50 */
 800536c:	2324      	movs	r3, #36	@ 0x24
 800536e:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 8005372:	f102 0208 	add.w	r2, r2, #8
 8005376:	6013      	str	r3, [r2, #0]
  int to_show = (ring_count < MAX_LINES_SHOWN) ? ring_count : MAX_LINES_SHOWN;
 8005378:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800537c:	f103 0314 	add.w	r3, r3, #20
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b08      	cmp	r3, #8
 8005384:	bfa8      	it	ge
 8005386:	2308      	movge	r3, #8
 8005388:	f507 5297 	add.w	r2, r7, #4832	@ 0x12e0
 800538c:	f102 021c 	add.w	r2, r2, #28
 8005390:	6013      	str	r3, [r2, #0]
  for (int i=to_show-1; i>=0; --i){
 8005392:	f507 5397 	add.w	r3, r7, #4832	@ 0x12e0
 8005396:	f103 031c 	add.w	r3, r3, #28
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3b01      	subs	r3, #1
 800539e:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 80053a2:	f102 0204 	add.w	r2, r2, #4
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	e056      	b.n	8005458 <Scores_ShowScreen+0x428>
 80053aa:	bf00      	nop
 80053ac:	0800f6d4 	.word	0x0800f6d4
 80053b0:	0800f614 	.word	0x0800f614
 80053b4:	20000258 	.word	0x20000258
 80053b8:	0800f6b4 	.word	0x0800f6b4
 80053bc:	0800f6f0 	.word	0x0800f6f0
    const char* s = ring[(ring_count-1 - i) % MAX_LINES_SHOWN];
 80053c0:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 80053c4:	f103 0314 	add.w	r3, r3, #20
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	1e5a      	subs	r2, r3, #1
 80053cc:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 80053d0:	f103 0304 	add.w	r3, r3, #4
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	425a      	negs	r2, r3
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	f002 0207 	and.w	r2, r2, #7
 80053e2:	bf58      	it	pl
 80053e4:	4253      	negpl	r3, r2
 80053e6:	f507 5287 	add.w	r2, r7, #4320	@ 0x10e0
 80053ea:	f102 0218 	add.w	r2, r2, #24
 80053ee:	019b      	lsls	r3, r3, #6
 80053f0:	4413      	add	r3, r2
 80053f2:	f507 5297 	add.w	r2, r7, #4832	@ 0x12e0
 80053f6:	f102 0218 	add.w	r2, r2, #24
 80053fa:	6013      	str	r3, [r2, #0]
    DrawTextC(s, 20, y, COLOR_WHITE, COLOR_BLUE);
 80053fc:	231f      	movs	r3, #31
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005404:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 8005408:	f102 0208 	add.w	r2, r2, #8
 800540c:	6812      	ldr	r2, [r2, #0]
 800540e:	2114      	movs	r1, #20
 8005410:	f507 5097 	add.w	r0, r7, #4832	@ 0x12e0
 8005414:	f100 0018 	add.w	r0, r0, #24
 8005418:	6800      	ldr	r0, [r0, #0]
 800541a:	f7fc fb9c 	bl	8001b56 <DrawTextC>
    y += 10;                     /* antes 18 */
 800541e:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005422:	f103 0308 	add.w	r3, r3, #8
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	330a      	adds	r3, #10
 800542a:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 800542e:	f102 0208 	add.w	r2, r2, #8
 8005432:	6013      	str	r3, [r2, #0]
    if (y > (LCD_H-24)) break;
 8005434:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005438:	f103 0308 	add.w	r3, r3, #8
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2bd8      	cmp	r3, #216	@ 0xd8
 8005440:	dc12      	bgt.n	8005468 <Scores_ShowScreen+0x438>
  for (int i=to_show-1; i>=0; --i){
 8005442:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 8005446:	f103 0304 	add.w	r3, r3, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	3b01      	subs	r3, #1
 800544e:	f507 5298 	add.w	r2, r7, #4864	@ 0x1300
 8005452:	f102 0204 	add.w	r2, r2, #4
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	f507 5398 	add.w	r3, r7, #4864	@ 0x1300
 800545c:	f103 0304 	add.w	r3, r3, #4
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	daac      	bge.n	80053c0 <Scores_ShowScreen+0x390>
 8005466:	e000      	b.n	800546a <Scores_ShowScreen+0x43a>
    if (y > (LCD_H-24)) break;
 8005468:	bf00      	nop
  }
  DrawTextC("B: Volver", 20, LCD_H-20, COLOR_WHITE, COLOR_BLUE);
 800546a:	231f      	movs	r3, #31
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005472:	22dc      	movs	r2, #220	@ 0xdc
 8005474:	2114      	movs	r1, #20
 8005476:	4804      	ldr	r0, [pc, #16]	@ (8005488 <Scores_ShowScreen+0x458>)
 8005478:	f7fc fb6d 	bl	8001b56 <DrawTextC>
}
 800547c:	bf00      	nop
 800547e:	f507 5798 	add.w	r7, r7, #4864	@ 0x1300
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	0800f70c 	.word	0x0800f70c

0800548c <Help_ShowScreen>:

static void Help_ShowScreen(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af02      	add	r7, sp, #8
  LCD_Clear(COLOR_BLACK);
 8005492:	2000      	movs	r0, #0
 8005494:	f7fc f8fe 	bl	8001694 <LCD_Clear>
  UI_FillRect(10, 10, LCD_W-20, LCD_H-20, COLOR_BLUE);
 8005498:	231f      	movs	r3, #31
 800549a:	9300      	str	r3, [sp, #0]
 800549c:	23dc      	movs	r3, #220	@ 0xdc
 800549e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054a2:	210a      	movs	r1, #10
 80054a4:	200a      	movs	r0, #10
 80054a6:	f7fc fb6b 	bl	8001b80 <UI_FillRect>
  DrawTextC("HELP", 20, 16, COLOR_YELLOW, COLOR_BLUE);
 80054aa:	231f      	movs	r3, #31
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80054b2:	2210      	movs	r2, #16
 80054b4:	2114      	movs	r1, #20
 80054b6:	4810      	ldr	r0, [pc, #64]	@ (80054f8 <Help_ShowScreen+0x6c>)
 80054b8:	f7fc fb4d 	bl	8001b56 <DrawTextC>

  DrawTextC("Arriba / Abajo en el eje X.",      20, 40, COLOR_WHITE, COLOR_BLUE);
 80054bc:	231f      	movs	r3, #31
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054c4:	2228      	movs	r2, #40	@ 0x28
 80054c6:	2114      	movs	r1, #20
 80054c8:	480c      	ldr	r0, [pc, #48]	@ (80054fc <Help_ShowScreen+0x70>)
 80054ca:	f7fc fb44 	bl	8001b56 <DrawTextC>
  DrawTextC("Derecha / Izquierda en el eje Y.", 20, 52, COLOR_WHITE, COLOR_BLUE);
 80054ce:	231f      	movs	r3, #31
 80054d0:	9300      	str	r3, [sp, #0]
 80054d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054d6:	2234      	movs	r2, #52	@ 0x34
 80054d8:	2114      	movs	r1, #20
 80054da:	4809      	ldr	r0, [pc, #36]	@ (8005500 <Help_ShowScreen+0x74>)
 80054dc:	f7fc fb3b 	bl	8001b56 <DrawTextC>

  DrawTextC("B: Volver", 20, LCD_H-20, COLOR_WHITE, COLOR_BLUE);
 80054e0:	231f      	movs	r3, #31
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054e8:	22dc      	movs	r2, #220	@ 0xdc
 80054ea:	2114      	movs	r1, #20
 80054ec:	4805      	ldr	r0, [pc, #20]	@ (8005504 <Help_ShowScreen+0x78>)
 80054ee:	f7fc fb32 	bl	8001b56 <DrawTextC>
}
 80054f2:	bf00      	nop
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	0800f718 	.word	0x0800f718
 80054fc:	0800f720 	.word	0x0800f720
 8005500:	0800f73c 	.word	0x0800f73c
 8005504:	0800f70c 	.word	0x0800f70c

08005508 <Credits_ShowScreen>:

static void Credits_ShowScreen(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af02      	add	r7, sp, #8
  LCD_Clear(COLOR_BLACK);
 800550e:	2000      	movs	r0, #0
 8005510:	f7fc f8c0 	bl	8001694 <LCD_Clear>
  UI_FillRect(10, 10, LCD_W-20, LCD_H-20, COLOR_BLUE);
 8005514:	231f      	movs	r3, #31
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	23dc      	movs	r3, #220	@ 0xdc
 800551a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800551e:	210a      	movs	r1, #10
 8005520:	200a      	movs	r0, #10
 8005522:	f7fc fb2d 	bl	8001b80 <UI_FillRect>
  DrawTextC("CREDITOS", 20, 16, COLOR_YELLOW, COLOR_BLUE);
 8005526:	231f      	movs	r3, #31
 8005528:	9300      	str	r3, [sp, #0]
 800552a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800552e:	2210      	movs	r2, #16
 8005530:	2114      	movs	r1, #20
 8005532:	4810      	ldr	r0, [pc, #64]	@ (8005574 <Credits_ShowScreen+0x6c>)
 8005534:	f7fc fb0f 	bl	8001b56 <DrawTextC>

  DrawTextC("Willy Cuellar 23182.", 20, 40, COLOR_WHITE, COLOR_BLUE);
 8005538:	231f      	movs	r3, #31
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005540:	2228      	movs	r2, #40	@ 0x28
 8005542:	2114      	movs	r1, #20
 8005544:	480c      	ldr	r0, [pc, #48]	@ (8005578 <Credits_ShowScreen+0x70>)
 8005546:	f7fc fb06 	bl	8001b56 <DrawTextC>
  DrawTextC("Mario Cano 23589.",    20, 52, COLOR_WHITE, COLOR_BLUE);
 800554a:	231f      	movs	r3, #31
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005552:	2234      	movs	r2, #52	@ 0x34
 8005554:	2114      	movs	r1, #20
 8005556:	4809      	ldr	r0, [pc, #36]	@ (800557c <Credits_ShowScreen+0x74>)
 8005558:	f7fc fafd 	bl	8001b56 <DrawTextC>

  DrawTextC("B: Volver", 20, LCD_H-20, COLOR_WHITE, COLOR_BLUE);
 800555c:	231f      	movs	r3, #31
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005564:	22dc      	movs	r2, #220	@ 0xdc
 8005566:	2114      	movs	r1, #20
 8005568:	4805      	ldr	r0, [pc, #20]	@ (8005580 <Credits_ShowScreen+0x78>)
 800556a:	f7fc faf4 	bl	8001b56 <DrawTextC>
}
 800556e:	bf00      	nop
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	0800f760 	.word	0x0800f760
 8005578:	0800f76c 	.word	0x0800f76c
 800557c:	0800f784 	.word	0x0800f784
 8005580:	0800f70c 	.word	0x0800f70c

08005584 <Wait_B_ToGoMenu>:

/* Espera no bloqueante a B para volver al menú */
static bool Wait_B_ToGoMenu(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800558a:	b672      	cpsid	i
}
 800558c:	bf00      	nop
  PlayerInput i1, i2;
  __disable_irq(); Gamepad_GetP1(&i1); Gamepad_GetP2(&i2); __enable_irq();
 800558e:	f107 0308 	add.w	r3, r7, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f001 f958 	bl	8006848 <Gamepad_GetP1>
 8005598:	463b      	mov	r3, r7
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f96a 	bl	8006874 <Gamepad_GetP2>
  __ASM volatile ("cpsie i" : : : "memory");
 80055a0:	b662      	cpsie	i
}
 80055a2:	bf00      	nop
  HAL_Delay(1);
 80055a4:	2001      	movs	r0, #1
 80055a6:	f001 fc29 	bl	8006dfc <HAL_Delay>
  return (i1.B || i2.B);
 80055aa:	7b7b      	ldrb	r3, [r7, #13]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <Wait_B_ToGoMenu+0x32>
 80055b0:	797b      	ldrb	r3, [r7, #5]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <Wait_B_ToGoMenu+0x36>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <Wait_B_ToGoMenu+0x38>
 80055ba:	2300      	movs	r3, #0
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <SystemClock_Config>:

/* ===================== HAL init ===================== */
void SystemClock_Config(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b094      	sub	sp, #80	@ 0x50
 80055d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80055d2:	f107 031c 	add.w	r3, r7, #28
 80055d6:	2234      	movs	r2, #52	@ 0x34
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f008 fb2a 	bl	800dc34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80055e0:	f107 0308 	add.w	r3, r7, #8
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	609a      	str	r2, [r3, #8]
 80055ec:	60da      	str	r2, [r3, #12]
 80055ee:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80055f0:	2300      	movs	r3, #0
 80055f2:	607b      	str	r3, [r7, #4]
 80055f4:	4b27      	ldr	r3, [pc, #156]	@ (8005694 <SystemClock_Config+0xc8>)
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	4a26      	ldr	r2, [pc, #152]	@ (8005694 <SystemClock_Config+0xc8>)
 80055fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8005600:	4b24      	ldr	r3, [pc, #144]	@ (8005694 <SystemClock_Config+0xc8>)
 8005602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800560c:	2300      	movs	r3, #0
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	4b21      	ldr	r3, [pc, #132]	@ (8005698 <SystemClock_Config+0xcc>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005618:	4a1f      	ldr	r2, [pc, #124]	@ (8005698 <SystemClock_Config+0xcc>)
 800561a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	4b1d      	ldr	r3, [pc, #116]	@ (8005698 <SystemClock_Config+0xcc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	683b      	ldr	r3, [r7, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800562c:	2302      	movs	r3, #2
 800562e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005630:	2301      	movs	r3, #1
 8005632:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005634:	2310      	movs	r3, #16
 8005636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005638:	2302      	movs	r3, #2
 800563a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800563c:	2300      	movs	r3, #0
 800563e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005640:	2308      	movs	r3, #8
 8005642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8005644:	2350      	movs	r3, #80	@ 0x50
 8005646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005648:	2302      	movs	r3, #2
 800564a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }
 800564c:	f107 031c 	add.w	r3, r7, #28
 8005650:	4618      	mov	r0, r3
 8005652:	f002 fa19 	bl	8007a88 <HAL_RCC_OscConfig>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d001      	beq.n	8005660 <SystemClock_Config+0x94>
 800565c:	f000 f9a2 	bl	80059a4 <Error_Handler>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005660:	230f      	movs	r3, #15
 8005662:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;
 8005664:	2302      	movs	r3, #2
 8005666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8005668:	2300      	movs	r3, #0
 800566a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800566c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005670:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005672:	2300      	movs	r3, #0
 8005674:	61bb      	str	r3, [r7, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) { Error_Handler(); }
 8005676:	f107 0308 	add.w	r3, r7, #8
 800567a:	2102      	movs	r1, #2
 800567c:	4618      	mov	r0, r3
 800567e:	f001 ff3f 	bl	8007500 <HAL_RCC_ClockConfig>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d001      	beq.n	800568c <SystemClock_Config+0xc0>
 8005688:	f000 f98c 	bl	80059a4 <Error_Handler>
}
 800568c:	bf00      	nop
 800568e:	3750      	adds	r7, #80	@ 0x50
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40023800 	.word	0x40023800
 8005698:	40007000 	.word	0x40007000

0800569c <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  hspi1.Instance = SPI1;
 80056a0:	4b17      	ldr	r3, [pc, #92]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056a2:	4a18      	ldr	r2, [pc, #96]	@ (8005704 <MX_SPI1_Init+0x68>)
 80056a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80056a6:	4b16      	ldr	r3, [pc, #88]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80056ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80056ae:	4b14      	ldr	r3, [pc, #80]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80056b4:	4b12      	ldr	r3, [pc, #72]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80056ba:	4b11      	ldr	r3, [pc, #68]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056bc:	2200      	movs	r2, #0
 80056be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80056c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80056c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80056ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056d0:	2210      	movs	r2, #16
 80056d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056d4:	4b0a      	ldr	r3, [pc, #40]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80056da:	4b09      	ldr	r3, [pc, #36]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056dc:	2200      	movs	r2, #0
 80056de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056e0:	4b07      	ldr	r3, [pc, #28]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80056e6:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056e8:	220a      	movs	r2, #10
 80056ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK) { Error_Handler(); }
 80056ec:	4804      	ldr	r0, [pc, #16]	@ (8005700 <MX_SPI1_Init+0x64>)
 80056ee:	f002 fc69 	bl	8007fc4 <HAL_SPI_Init>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <MX_SPI1_Init+0x60>
 80056f8:	f000 f954 	bl	80059a4 <Error_Handler>
}
 80056fc:	bf00      	nop
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	200000e0 	.word	0x200000e0
 8005704:	40013000 	.word	0x40013000

08005708 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800570c:	4b15      	ldr	r3, [pc, #84]	@ (8005764 <MX_USART2_UART_Init+0x5c>)
 800570e:	4a16      	ldr	r2, [pc, #88]	@ (8005768 <MX_USART2_UART_Init+0x60>)
 8005710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005712:	4b14      	ldr	r3, [pc, #80]	@ (8005764 <MX_USART2_UART_Init+0x5c>)
 8005714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800571a:	4b12      	ldr	r3, [pc, #72]	@ (8005764 <MX_USART2_UART_Init+0x5c>)
 800571c:	2200      	movs	r2, #0
 800571e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005720:	4b10      	ldr	r3, [pc, #64]	@ (8005764 <MX_USART2_UART_Init+0x5c>)
 8005722:	2200      	movs	r2, #0
 8005724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005726:	4b0f      	ldr	r3, [pc, #60]	@ (8005764 <MX_USART2_UART_Init+0x5c>)
 8005728:	2200      	movs	r2, #0
 800572a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800572c:	4b0d      	ldr	r3, [pc, #52]	@ (8005764 <MX_USART2_UART_Init+0x5c>)
 800572e:	220c      	movs	r2, #12
 8005730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005732:	4b0c      	ldr	r3, [pc, #48]	@ (8005764 <MX_USART2_UART_Init+0x5c>)
 8005734:	2200      	movs	r2, #0
 8005736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005738:	4b0a      	ldr	r3, [pc, #40]	@ (8005764 <MX_USART2_UART_Init+0x5c>)
 800573a:	2200      	movs	r2, #0
 800573c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK) { Error_Handler(); }
 800573e:	4809      	ldr	r0, [pc, #36]	@ (8005764 <MX_USART2_UART_Init+0x5c>)
 8005740:	f003 ff15 	bl	800956e <HAL_UART_Init>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <MX_USART2_UART_Init+0x46>
 800574a:	f000 f92b 	bl	80059a4 <Error_Handler>
  HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800574e:	2200      	movs	r2, #0
 8005750:	2106      	movs	r1, #6
 8005752:	2026      	movs	r0, #38	@ 0x26
 8005754:	f001 fc51 	bl	8006ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005758:	2026      	movs	r0, #38	@ 0x26
 800575a:	f001 fc6a 	bl	8007032 <HAL_NVIC_EnableIRQ>
}
 800575e:	bf00      	nop
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200001c8 	.word	0x200001c8
 8005768:	40004400 	.word	0x40004400

0800576c <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8005770:	4b15      	ldr	r3, [pc, #84]	@ (80057c8 <MX_USART3_UART_Init+0x5c>)
 8005772:	4a16      	ldr	r2, [pc, #88]	@ (80057cc <MX_USART3_UART_Init+0x60>)
 8005774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005776:	4b14      	ldr	r3, [pc, #80]	@ (80057c8 <MX_USART3_UART_Init+0x5c>)
 8005778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800577c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800577e:	4b12      	ldr	r3, [pc, #72]	@ (80057c8 <MX_USART3_UART_Init+0x5c>)
 8005780:	2200      	movs	r2, #0
 8005782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005784:	4b10      	ldr	r3, [pc, #64]	@ (80057c8 <MX_USART3_UART_Init+0x5c>)
 8005786:	2200      	movs	r2, #0
 8005788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800578a:	4b0f      	ldr	r3, [pc, #60]	@ (80057c8 <MX_USART3_UART_Init+0x5c>)
 800578c:	2200      	movs	r2, #0
 800578e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005790:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <MX_USART3_UART_Init+0x5c>)
 8005792:	220c      	movs	r2, #12
 8005794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005796:	4b0c      	ldr	r3, [pc, #48]	@ (80057c8 <MX_USART3_UART_Init+0x5c>)
 8005798:	2200      	movs	r2, #0
 800579a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800579c:	4b0a      	ldr	r3, [pc, #40]	@ (80057c8 <MX_USART3_UART_Init+0x5c>)
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK) { Error_Handler(); }
 80057a2:	4809      	ldr	r0, [pc, #36]	@ (80057c8 <MX_USART3_UART_Init+0x5c>)
 80057a4:	f003 fee3 	bl	800956e <HAL_UART_Init>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <MX_USART3_UART_Init+0x46>
 80057ae:	f000 f8f9 	bl	80059a4 <Error_Handler>
  /* prioridad alta para el gamepad */
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 80057b2:	2200      	movs	r2, #0
 80057b4:	2101      	movs	r1, #1
 80057b6:	2027      	movs	r0, #39	@ 0x27
 80057b8:	f001 fc1f 	bl	8006ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 80057bc:	2027      	movs	r0, #39	@ 0x27
 80057be:	f001 fc38 	bl	8007032 <HAL_NVIC_EnableIRQ>
}
 80057c2:	bf00      	nop
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000210 	.word	0x20000210
 80057cc:	40004800 	.word	0x40004800

080057d0 <MX_TIM11_Init>:

static void MX_TIM11_Init(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b088      	sub	sp, #32
 80057d4:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 80057d6:	1d3b      	adds	r3, r7, #4
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	605a      	str	r2, [r3, #4]
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	60da      	str	r2, [r3, #12]
 80057e2:	611a      	str	r2, [r3, #16]
 80057e4:	615a      	str	r2, [r3, #20]
 80057e6:	619a      	str	r2, [r3, #24]

  __HAL_RCC_TIM11_CLK_ENABLE();
 80057e8:	2300      	movs	r3, #0
 80057ea:	603b      	str	r3, [r7, #0]
 80057ec:	4b24      	ldr	r3, [pc, #144]	@ (8005880 <MX_TIM11_Init+0xb0>)
 80057ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f0:	4a23      	ldr	r2, [pc, #140]	@ (8005880 <MX_TIM11_Init+0xb0>)
 80057f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80057f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80057f8:	4b21      	ldr	r3, [pc, #132]	@ (8005880 <MX_TIM11_Init+0xb0>)
 80057fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005800:	603b      	str	r3, [r7, #0]
 8005802:	683b      	ldr	r3, [r7, #0]

  htim11.Instance = TIM11;
 8005804:	4b1f      	ldr	r3, [pc, #124]	@ (8005884 <MX_TIM11_Init+0xb4>)
 8005806:	4a20      	ldr	r2, [pc, #128]	@ (8005888 <MX_TIM11_Init+0xb8>)
 8005808:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 800580a:	4b1e      	ldr	r3, [pc, #120]	@ (8005884 <MX_TIM11_Init+0xb4>)
 800580c:	2200      	movs	r2, #0
 800580e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005810:	4b1c      	ldr	r3, [pc, #112]	@ (8005884 <MX_TIM11_Init+0xb4>)
 8005812:	2200      	movs	r2, #0
 8005814:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8005816:	4b1b      	ldr	r3, [pc, #108]	@ (8005884 <MX_TIM11_Init+0xb4>)
 8005818:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800581c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800581e:	4b19      	ldr	r3, [pc, #100]	@ (8005884 <MX_TIM11_Init+0xb4>)
 8005820:	2200      	movs	r2, #0
 8005822:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005824:	4b17      	ldr	r3, [pc, #92]	@ (8005884 <MX_TIM11_Init+0xb4>)
 8005826:	2280      	movs	r2, #128	@ 0x80
 8005828:	619a      	str	r2, [r3, #24]

  if (HAL_TIM_Base_Init(&htim11) != HAL_OK) { Error_Handler(); }
 800582a:	4816      	ldr	r0, [pc, #88]	@ (8005884 <MX_TIM11_Init+0xb4>)
 800582c:	f003 f81c 	bl	8008868 <HAL_TIM_Base_Init>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <MX_TIM11_Init+0x6a>
 8005836:	f000 f8b5 	bl	80059a4 <Error_Handler>
  if (HAL_TIM_PWM_Init(&htim11)  != HAL_OK) { Error_Handler(); }
 800583a:	4812      	ldr	r0, [pc, #72]	@ (8005884 <MX_TIM11_Init+0xb4>)
 800583c:	f003 f903 	bl	8008a46 <HAL_TIM_PWM_Init>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d001      	beq.n	800584a <MX_TIM11_Init+0x7a>
 8005846:	f000 f8ad 	bl	80059a4 <Error_Handler>

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800584a:	2360      	movs	r3, #96	@ 0x60
 800584c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005852:	2300      	movs	r3, #0
 8005854:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) { Error_Handler(); }
 800585a:	1d3b      	adds	r3, r7, #4
 800585c:	2200      	movs	r2, #0
 800585e:	4619      	mov	r1, r3
 8005860:	4808      	ldr	r0, [pc, #32]	@ (8005884 <MX_TIM11_Init+0xb4>)
 8005862:	f003 fb01 	bl	8008e68 <HAL_TIM_PWM_ConfigChannel>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <MX_TIM11_Init+0xa0>
 800586c:	f000 f89a 	bl	80059a4 <Error_Handler>

  HAL_TIM_MspPostInit(&htim11);
 8005870:	4804      	ldr	r0, [pc, #16]	@ (8005884 <MX_TIM11_Init+0xb4>)
 8005872:	f000 fca1 	bl	80061b8 <HAL_TIM_MspPostInit>
}
 8005876:	bf00      	nop
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40023800 	.word	0x40023800
 8005884:	20000138 	.word	0x20000138
 8005888:	40014800 	.word	0x40014800

0800588c <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b08a      	sub	sp, #40	@ 0x28
 8005890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005892:	f107 0314 	add.w	r3, r7, #20
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	609a      	str	r2, [r3, #8]
 800589e:	60da      	str	r2, [r3, #12]
 80058a0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80058a2:	2300      	movs	r3, #0
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058aa:	4a3a      	ldr	r2, [pc, #232]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b2:	4b38      	ldr	r3, [pc, #224]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058be:	2300      	movs	r3, #0
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	4b34      	ldr	r3, [pc, #208]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058c6:	4a33      	ldr	r2, [pc, #204]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058c8:	f043 0304 	orr.w	r3, r3, #4
 80058cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80058ce:	4b31      	ldr	r3, [pc, #196]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80058da:	2300      	movs	r3, #0
 80058dc:	60bb      	str	r3, [r7, #8]
 80058de:	4b2d      	ldr	r3, [pc, #180]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e2:	4a2c      	ldr	r2, [pc, #176]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80058ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	60bb      	str	r3, [r7, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]
 80058fa:	4b26      	ldr	r3, [pc, #152]	@ (8005994 <MX_GPIO_Init+0x108>)
 80058fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fe:	4a25      	ldr	r2, [pc, #148]	@ (8005994 <MX_GPIO_Init+0x108>)
 8005900:	f043 0302 	orr.w	r3, r3, #2
 8005904:	6313      	str	r3, [r2, #48]	@ 0x30
 8005906:	4b23      	ldr	r3, [pc, #140]	@ (8005994 <MX_GPIO_Init+0x108>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	687b      	ldr	r3, [r7, #4]

  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8005912:	2200      	movs	r2, #0
 8005914:	2182      	movs	r1, #130	@ 0x82
 8005916:	4820      	ldr	r0, [pc, #128]	@ (8005998 <MX_GPIO_Init+0x10c>)
 8005918:	f001 fdd8 	bl	80074cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin|LCD_D0_Pin|LCD_D2_Pin, GPIO_PIN_RESET);
 800591c:	2200      	movs	r2, #0
 800591e:	f240 7113 	movw	r1, #1811	@ 0x713
 8005922:	481e      	ldr	r0, [pc, #120]	@ (800599c <MX_GPIO_Init+0x110>)
 8005924:	f001 fdd2 	bl	80074cc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin|LCD_D4_Pin|SD_SS_Pin, GPIO_PIN_RESET);
 8005928:	2200      	movs	r2, #0
 800592a:	f240 4179 	movw	r1, #1145	@ 0x479
 800592e:	481c      	ldr	r0, [pc, #112]	@ (80059a0 <MX_GPIO_Init+0x114>)
 8005930:	f001 fdcc 	bl	80074cc <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_D1_Pin;
 8005934:	2382      	movs	r3, #130	@ 0x82
 8005936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005938:	2301      	movs	r3, #1
 800593a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593c:	2300      	movs	r3, #0
 800593e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005940:	2302      	movs	r3, #2
 8005942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005944:	f107 0314 	add.w	r3, r7, #20
 8005948:	4619      	mov	r1, r3
 800594a:	4813      	ldr	r0, [pc, #76]	@ (8005998 <MX_GPIO_Init+0x10c>)
 800594c:	f001 fc2a 	bl	80071a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_RD_Pin|LCD_WR_Pin|LCD_RS_Pin|LCD_D7_Pin|LCD_D0_Pin|LCD_D2_Pin;
 8005950:	f240 7313 	movw	r3, #1811	@ 0x713
 8005954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005956:	2301      	movs	r3, #1
 8005958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800595e:	2302      	movs	r3, #2
 8005960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005962:	f107 0314 	add.w	r3, r7, #20
 8005966:	4619      	mov	r1, r3
 8005968:	480c      	ldr	r0, [pc, #48]	@ (800599c <MX_GPIO_Init+0x110>)
 800596a:	f001 fc1b 	bl	80071a4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_D6_Pin|LCD_D3_Pin|LCD_D5_Pin|LCD_D4_Pin|SD_SS_Pin;
 800596e:	f240 4379 	movw	r3, #1145	@ 0x479
 8005972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005974:	2301      	movs	r3, #1
 8005976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005978:	2300      	movs	r3, #0
 800597a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800597c:	2302      	movs	r3, #2
 800597e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005980:	f107 0314 	add.w	r3, r7, #20
 8005984:	4619      	mov	r1, r3
 8005986:	4806      	ldr	r0, [pc, #24]	@ (80059a0 <MX_GPIO_Init+0x114>)
 8005988:	f001 fc0c 	bl	80071a4 <HAL_GPIO_Init>
}
 800598c:	bf00      	nop
 800598e:	3728      	adds	r7, #40	@ 0x28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40023800 	.word	0x40023800
 8005998:	40020800 	.word	0x40020800
 800599c:	40020000 	.word	0x40020000
 80059a0:	40020400 	.word	0x40020400

080059a4 <Error_Handler>:

void Error_Handler(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80059a8:	b672      	cpsid	i
}
 80059aa:	bf00      	nop
  __disable_irq();
  while (1) { }
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <Error_Handler+0x8>

080059b0 <midi2hz>:
/* --- Modo actual --- */
static SongMode s_mode = MODE_NONE;

/* =================== Helpers =================== */
static uint32_t midi2hz(uint32_t m)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  if (m == 0) return 0;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <midi2hz+0x12>
 80059be:	2300      	movs	r3, #0
 80059c0:	e03b      	b.n	8005a3a <midi2hz+0x8a>
  float f = 440.0f * powf(2.0f, ((float)m - 69.0f) / 12.0f);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	ee07 3a90 	vmov	s15, r3
 80059c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059cc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005a44 <midi2hz+0x94>
 80059d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059d4:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 80059d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80059dc:	eef0 0a47 	vmov.f32	s1, s14
 80059e0:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80059e4:	f009 fa42 	bl	800ee6c <powf>
 80059e8:	eef0 7a40 	vmov.f32	s15, s0
 80059ec:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8005a48 <midi2hz+0x98>
 80059f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059f4:	edc7 7a03 	vstr	s15, [r7, #12]
  if (f < 1.0f) f = 1.0f;
 80059f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80059fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a08:	d502      	bpl.n	8005a10 <midi2hz+0x60>
 8005a0a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005a0e:	60fb      	str	r3, [r7, #12]
  if (f > 20000.0f) f = 20000.0f;
 8005a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a14:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005a4c <midi2hz+0x9c>
 8005a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a20:	dd01      	ble.n	8005a26 <midi2hz+0x76>
 8005a22:	4b0b      	ldr	r3, [pc, #44]	@ (8005a50 <midi2hz+0xa0>)
 8005a24:	60fb      	str	r3, [r7, #12]
  return (uint32_t)(f + 0.5f);
 8005a26:	edd7 7a03 	vldr	s15, [r7, #12]
 8005a2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005a2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a36:	ee17 3a90 	vmov	r3, s15
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	428a0000 	.word	0x428a0000
 8005a48:	43dc0000 	.word	0x43dc0000
 8005a4c:	469c4000 	.word	0x469c4000
 8005a50:	469c4000 	.word	0x469c4000

08005a54 <sched_next>:

static void sched_next(uint32_t dur_ms)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  if (!s_tim) return;
 8005a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ad0 <sched_next+0x7c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d030      	beq.n	8005ac6 <sched_next+0x72>
  if (dur_ms == 0) dur_ms = 1;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <sched_next+0x1a>
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	607b      	str	r3, [r7, #4]

  /* Base 10 kHz (0.1 ms/tick) => ARR = dur_ms*10 - 1 */
  uint32_t ticks_0p1ms = dur_ms * 10U;
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]
  if (ticks_0p1ms == 0) ticks_0p1ms = 1;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <sched_next+0x30>
 8005a80:	2301      	movs	r3, #1
 8005a82:	60fb      	str	r3, [r7, #12]
  if (ticks_0p1ms > 65535U) ticks_0p1ms = 65535U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a8a:	d302      	bcc.n	8005a92 <sched_next+0x3e>
 8005a8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005a90:	60fb      	str	r3, [r7, #12]

  __HAL_TIM_SET_AUTORELOAD(s_tim, (uint16_t)(ticks_0p1ms - 1));
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ad0 <sched_next+0x7c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	4b09      	ldr	r3, [pc, #36]	@ (8005ad0 <sched_next+0x7c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	60da      	str	r2, [r3, #12]
  __HAL_TIM_SET_COUNTER(s_tim, 0);
 8005ab0:	4b07      	ldr	r3, [pc, #28]	@ (8005ad0 <sched_next+0x7c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_Base_Start_IT(s_tim);
 8005aba:	4b05      	ldr	r3, [pc, #20]	@ (8005ad0 <sched_next+0x7c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f002 ff22 	bl	8008908 <HAL_TIM_Base_Start_IT>
 8005ac4:	e000      	b.n	8005ac8 <sched_next+0x74>
  if (!s_tim) return;
 8005ac6:	bf00      	nop
}
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	2000455c 	.word	0x2000455c

08005ad4 <find_tick_ms>:

/* =================== Parser SD (.c) =================== */
static bool find_tick_ms(FIL *fp)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b0a6      	sub	sp, #152	@ 0x98
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  DWORD pos = f_tell(fp);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  char buf[SONG_READ_BUFSZ];
  s_tick_ms = 62;
 8005ae4:	4b25      	ldr	r3, [pc, #148]	@ (8005b7c <find_tick_ms+0xa8>)
 8005ae6:	223e      	movs	r2, #62	@ 0x3e
 8005ae8:	601a      	str	r2, [r3, #0]

  for (int i=0; i<200; i++) {
 8005aea:	2300      	movs	r3, #0
 8005aec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005af0:	e031      	b.n	8005b56 <find_tick_ms+0x82>
    if (!f_gets(buf, sizeof(buf), fp)) break;
 8005af2:	f107 0310 	add.w	r3, r7, #16
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	2180      	movs	r1, #128	@ 0x80
 8005afa:	4618      	mov	r0, r3
 8005afc:	f007 fed5 	bl	800d8aa <f_gets>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d02c      	beq.n	8005b60 <find_tick_ms+0x8c>
    unsigned long t=0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
    if (sscanf(buf, " #define TICK_MS %lu", &t) == 1 ||
 8005b0a:	f107 020c 	add.w	r2, r7, #12
 8005b0e:	f107 0310 	add.w	r3, r7, #16
 8005b12:	491b      	ldr	r1, [pc, #108]	@ (8005b80 <find_tick_ms+0xac>)
 8005b14:	4618      	mov	r0, r3
 8005b16:	f008 f85f 	bl	800dbd8 <siscanf>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d00a      	beq.n	8005b36 <find_tick_ms+0x62>
        sscanf(buf, "#define TICK_MS %lu", &t) == 1)
 8005b20:	f107 020c 	add.w	r2, r7, #12
 8005b24:	f107 0310 	add.w	r3, r7, #16
 8005b28:	4916      	ldr	r1, [pc, #88]	@ (8005b84 <find_tick_ms+0xb0>)
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f008 f854 	bl	800dbd8 <siscanf>
 8005b30:	4603      	mov	r3, r0
    if (sscanf(buf, " #define TICK_MS %lu", &t) == 1 ||
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10a      	bne.n	8005b4c <find_tick_ms+0x78>
    {
      if (t > 0 && t < 1000) s_tick_ms = (uint32_t)t;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d013      	beq.n	8005b64 <find_tick_ms+0x90>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b42:	d20f      	bcs.n	8005b64 <find_tick_ms+0x90>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4a0d      	ldr	r2, [pc, #52]	@ (8005b7c <find_tick_ms+0xa8>)
 8005b48:	6013      	str	r3, [r2, #0]
      break;
 8005b4a:	e00b      	b.n	8005b64 <find_tick_ms+0x90>
  for (int i=0; i<200; i++) {
 8005b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b50:	3301      	adds	r3, #1
 8005b52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b56:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b5a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b5c:	ddc9      	ble.n	8005af2 <find_tick_ms+0x1e>
 8005b5e:	e002      	b.n	8005b66 <find_tick_ms+0x92>
    if (!f_gets(buf, sizeof(buf), fp)) break;
 8005b60:	bf00      	nop
 8005b62:	e000      	b.n	8005b66 <find_tick_ms+0x92>
      break;
 8005b64:	bf00      	nop
    }
  }
  f_lseek(fp, pos);
 8005b66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f007 fc79 	bl	800d462 <f_lseek>
  return true;
 8005b70:	2301      	movs	r3, #1
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3798      	adds	r7, #152	@ 0x98
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000034 	.word	0x20000034
 8005b80:	0800f798 	.word	0x0800f798
 8005b84:	0800f7b0 	.word	0x0800f7b0

08005b88 <load_to_ram>:

static bool load_to_ram(const char *path)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	f5ad 5d82 	sub.w	sp, sp, #4160	@ 0x1040
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005b96:	f843 0c44 	str.w	r0, [r3, #-68]
  FIL f;
  if (f_open(&f, path, FA_READ) != FR_OK) return false;
 8005b9a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005ba4:	3b18      	subs	r3, #24
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f851 1c44 	ldr.w	r1, [r1, #-68]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f006 fef5 	bl	800c99c <f_open>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <load_to_ram+0x34>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e09b      	b.n	8005cf4 <load_to_ram+0x16c>

  find_tick_ms(&f);
 8005bbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005bc0:	3b18      	subs	r3, #24
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7ff ff86 	bl	8005ad4 <find_tick_ms>
  s_note_count = 0;
 8005bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8005d00 <load_to_ram+0x178>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	801a      	strh	r2, [r3, #0]

  while (f_gets(s_linebuf, sizeof(s_linebuf), &f)) {
 8005bce:	e078      	b.n	8005cc2 <load_to_ram+0x13a>
    for (char *p = s_linebuf; *p; ++p) if (*p == ',') *p = ' ';
 8005bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8005d04 <load_to_ram+0x17c>)
 8005bd2:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005bd6:	f102 0204 	add.w	r2, r2, #4
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	e019      	b.n	8005c12 <load_to_ram+0x8a>
 8005bde:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005be2:	f103 0304 	add.w	r3, r3, #4
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b2c      	cmp	r3, #44	@ 0x2c
 8005bec:	d106      	bne.n	8005bfc <load_to_ram+0x74>
 8005bee:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005bf2:	f103 0304 	add.w	r3, r3, #4
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	701a      	strb	r2, [r3, #0]
 8005bfc:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005c00:	f103 0304 	add.w	r3, r3, #4
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8005c0c:	f102 0204 	add.w	r2, r2, #4
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005c16:	f103 0304 	add.w	r3, r3, #4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1dd      	bne.n	8005bde <load_to_ram+0x56>
    unsigned long m=0, tk=0;
 8005c22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005c26:	461a      	mov	r2, r3
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f842 3c3c 	str.w	r3, [r2, #-60]
 8005c2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005c32:	461a      	mov	r2, r3
 8005c34:	2300      	movs	r3, #0
 8005c36:	f842 3c40 	str.w	r3, [r2, #-64]
    int got = sscanf(s_linebuf, " { %lu %lu }", &m, &tk);
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005c42:	3a1c      	subs	r2, #28
 8005c44:	4930      	ldr	r1, [pc, #192]	@ (8005d08 <load_to_ram+0x180>)
 8005c46:	482f      	ldr	r0, [pc, #188]	@ (8005d04 <load_to_ram+0x17c>)
 8005c48:	f007 ffc6 	bl	800dbd8 <siscanf>
 8005c4c:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005c50:	6018      	str	r0, [r3, #0]
    if (got != 2) got = sscanf(s_linebuf, " %lu %lu", &m, &tk);
 8005c52:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d00b      	beq.n	8005c74 <load_to_ram+0xec>
 8005c5c:	f107 0308 	add.w	r3, r7, #8
 8005c60:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005c64:	3a1c      	subs	r2, #28
 8005c66:	4929      	ldr	r1, [pc, #164]	@ (8005d0c <load_to_ram+0x184>)
 8005c68:	4826      	ldr	r0, [pc, #152]	@ (8005d04 <load_to_ram+0x17c>)
 8005c6a:	f007 ffb5 	bl	800dbd8 <siscanf>
 8005c6e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005c72:	6018      	str	r0, [r3, #0]

    if (got == 2 && s_note_count < SONG_MAX_NOTES) {
 8005c74:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d121      	bne.n	8005cc2 <load_to_ram+0x13a>
 8005c7e:	4b20      	ldr	r3, [pc, #128]	@ (8005d00 <load_to_ram+0x178>)
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c86:	d21c      	bcs.n	8005cc2 <load_to_ram+0x13a>
      s_notes[s_note_count].midi  = (uint16_t)m;
 8005c88:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005c8c:	f853 1c3c 	ldr.w	r1, [r3, #-60]
 8005c90:	4b1b      	ldr	r3, [pc, #108]	@ (8005d00 <load_to_ram+0x178>)
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	461a      	mov	r2, r3
 8005c96:	b289      	uxth	r1, r1
 8005c98:	4b1d      	ldr	r3, [pc, #116]	@ (8005d10 <load_to_ram+0x188>)
 8005c9a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      s_notes[s_note_count].ticks = (uint16_t)tk;
 8005c9e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005ca2:	f853 2c40 	ldr.w	r2, [r3, #-64]
 8005ca6:	4b16      	ldr	r3, [pc, #88]	@ (8005d00 <load_to_ram+0x178>)
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b291      	uxth	r1, r2
 8005cac:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <load_to_ram+0x188>)
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	460a      	mov	r2, r1
 8005cb4:	805a      	strh	r2, [r3, #2]
      s_note_count++;
 8005cb6:	4b12      	ldr	r3, [pc, #72]	@ (8005d00 <load_to_ram+0x178>)
 8005cb8:	881b      	ldrh	r3, [r3, #0]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	4b10      	ldr	r3, [pc, #64]	@ (8005d00 <load_to_ram+0x178>)
 8005cc0:	801a      	strh	r2, [r3, #0]
  while (f_gets(s_linebuf, sizeof(s_linebuf), &f)) {
 8005cc2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005cc6:	3b18      	subs	r3, #24
 8005cc8:	461a      	mov	r2, r3
 8005cca:	2180      	movs	r1, #128	@ 0x80
 8005ccc:	480d      	ldr	r0, [pc, #52]	@ (8005d04 <load_to_ram+0x17c>)
 8005cce:	f007 fdec 	bl	800d8aa <f_gets>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f47f af7b 	bne.w	8005bd0 <load_to_ram+0x48>
    }
  }
  f_close(&f);
 8005cda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005cde:	3b18      	subs	r3, #24
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f007 fb94 	bl	800d40e <f_close>
  return (s_note_count > 0);
 8005ce6:	4b06      	ldr	r3, [pc, #24]	@ (8005d00 <load_to_ram+0x178>)
 8005ce8:	881b      	ldrh	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	bf14      	ite	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	2300      	moveq	r3, #0
 8005cf2:	b2db      	uxtb	r3, r3
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f507 5782 	add.w	r7, r7, #4160	@ 0x1040
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	20006560 	.word	0x20006560
 8005d04:	20006564 	.word	0x20006564
 8005d08:	0800f7c4 	.word	0x0800f7c4
 8005d0c:	0800f7d4 	.word	0x0800f7d4
 8005d10:	20004560 	.word	0x20004560

08005d14 <SongLoop_Init>:

/* =================== API =================== */
void SongLoop_Init(TIM_HandleTypeDef *htim_sched, uint32_t speed_x)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  s_tim = htim_sched;
 8005d1e:	4a28      	ldr	r2, [pc, #160]	@ (8005dc0 <SongLoop_Init+0xac>)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6013      	str	r3, [r2, #0]
  s_speed_x = (speed_x == 0) ? 1 : speed_x;
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <SongLoop_Init+0x1a>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	e000      	b.n	8005d30 <SongLoop_Init+0x1c>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	4a24      	ldr	r2, [pc, #144]	@ (8005dc4 <SongLoop_Init+0xb0>)
 8005d32:	6013      	str	r3, [r2, #0]

  /* Config TIM10 a 10 kHz (APB2=80 MHz => PSC=7999) */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	4b23      	ldr	r3, [pc, #140]	@ (8005dc8 <SongLoop_Init+0xb4>)
 8005d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d3c:	4a22      	ldr	r2, [pc, #136]	@ (8005dc8 <SongLoop_Init+0xb4>)
 8005d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d42:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d44:	4b20      	ldr	r3, [pc, #128]	@ (8005dc8 <SongLoop_Init+0xb4>)
 8005d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4c:	60fb      	str	r3, [r7, #12]
 8005d4e:	68fb      	ldr	r3, [r7, #12]

  s_tim->Instance               = TIM10;
 8005d50:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <SongLoop_Init+0xac>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a1d      	ldr	r2, [pc, #116]	@ (8005dcc <SongLoop_Init+0xb8>)
 8005d56:	601a      	str	r2, [r3, #0]
  s_tim->Init.Prescaler         = 7999;                        /* 80MHz/(7999+1)=10kHz */
 8005d58:	4b19      	ldr	r3, [pc, #100]	@ (8005dc0 <SongLoop_Init+0xac>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 8005d60:	605a      	str	r2, [r3, #4]
  s_tim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 8005d62:	4b17      	ldr	r3, [pc, #92]	@ (8005dc0 <SongLoop_Init+0xac>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
  s_tim->Init.Period            = 1000 - 1;                    /* placeholder */
 8005d6a:	4b15      	ldr	r3, [pc, #84]	@ (8005dc0 <SongLoop_Init+0xac>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005d72:	60da      	str	r2, [r3, #12]
  s_tim->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8005d74:	4b12      	ldr	r3, [pc, #72]	@ (8005dc0 <SongLoop_Init+0xac>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	611a      	str	r2, [r3, #16]
  s_tim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005d7c:	4b10      	ldr	r3, [pc, #64]	@ (8005dc0 <SongLoop_Init+0xac>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2280      	movs	r2, #128	@ 0x80
 8005d82:	619a      	str	r2, [r3, #24]
  HAL_TIM_Base_Init(s_tim);
 8005d84:	4b0e      	ldr	r3, [pc, #56]	@ (8005dc0 <SongLoop_Init+0xac>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f002 fd6d 	bl	8008868 <HAL_TIM_Base_Init>

  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8005d8e:	2200      	movs	r2, #0
 8005d90:	2103      	movs	r1, #3
 8005d92:	2019      	movs	r0, #25
 8005d94:	f001 f931 	bl	8006ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005d98:	2019      	movs	r0, #25
 8005d9a:	f001 f94a 	bl	8007032 <HAL_NVIC_EnableIRQ>

  s_mode = MODE_NONE;
 8005d9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd0 <SongLoop_Init+0xbc>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
  s_arr = NULL; s_arr_len = s_arr_idx = 0;
 8005da4:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <SongLoop_Init+0xc0>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd8 <SongLoop_Init+0xc4>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	4b09      	ldr	r3, [pc, #36]	@ (8005dd8 <SongLoop_Init+0xc4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a09      	ldr	r2, [pc, #36]	@ (8005ddc <SongLoop_Init+0xc8>)
 8005db6:	6013      	str	r3, [r2, #0]
}
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	2000455c 	.word	0x2000455c
 8005dc4:	20000030 	.word	0x20000030
 8005dc8:	40023800 	.word	0x40023800
 8005dcc:	40014400 	.word	0x40014400
 8005dd0:	200065f0 	.word	0x200065f0
 8005dd4:	200065e4 	.word	0x200065e4
 8005dd8:	200065ec 	.word	0x200065ec
 8005ddc:	200065e8 	.word	0x200065e8

08005de0 <SongLoop_Start>:

bool SongLoop_Start(const char *path)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  s_mode = MODE_NONE;
 8005de8:	4b24      	ldr	r3, [pc, #144]	@ (8005e7c <SongLoop_Start+0x9c>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
  s_note_index = 0;
 8005dee:	4b24      	ldr	r3, [pc, #144]	@ (8005e80 <SongLoop_Start+0xa0>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	801a      	strh	r2, [r3, #0]

  if (!load_to_ram(path)) {
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff fec7 	bl	8005b88 <load_to_ram>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	f083 0301 	eor.w	r3, r3, #1
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d004      	beq.n	8005e10 <SongLoop_Start+0x30>
    AudioPWM_SetFreq(0);
 8005e06:	2000      	movs	r0, #0
 8005e08:	f7fa fc8c 	bl	8000724 <AudioPWM_SetFreq>
    return false;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	e031      	b.n	8005e74 <SongLoop_Start+0x94>
  }

  s_mode = MODE_SD;
 8005e10:	4b1a      	ldr	r3, [pc, #104]	@ (8005e7c <SongLoop_Start+0x9c>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	701a      	strb	r2, [r3, #0]

  /* Primera nota (acelerada por s_speed_x) */
  uint16_t m  = s_notes[s_note_index].midi;
 8005e16:	4b1a      	ldr	r3, [pc, #104]	@ (8005e80 <SongLoop_Start+0xa0>)
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4b19      	ldr	r3, [pc, #100]	@ (8005e84 <SongLoop_Start+0xa4>)
 8005e1e:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005e22:	817b      	strh	r3, [r7, #10]
  uint16_t tk = s_notes[s_note_index].ticks;
 8005e24:	4b16      	ldr	r3, [pc, #88]	@ (8005e80 <SongLoop_Start+0xa0>)
 8005e26:	881b      	ldrh	r3, [r3, #0]
 8005e28:	4a16      	ldr	r2, [pc, #88]	@ (8005e84 <SongLoop_Start+0xa4>)
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	885b      	ldrh	r3, [r3, #2]
 8005e30:	813b      	strh	r3, [r7, #8]
  s_note_index++;
 8005e32:	4b13      	ldr	r3, [pc, #76]	@ (8005e80 <SongLoop_Start+0xa0>)
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	3301      	adds	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <SongLoop_Start+0xa0>)
 8005e3c:	801a      	strh	r2, [r3, #0]

  uint32_t dur = (uint32_t)tk * s_tick_ms / s_speed_x;
 8005e3e:	893b      	ldrh	r3, [r7, #8]
 8005e40:	4a11      	ldr	r2, [pc, #68]	@ (8005e88 <SongLoop_Start+0xa8>)
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	fb03 f202 	mul.w	r2, r3, r2
 8005e48:	4b10      	ldr	r3, [pc, #64]	@ (8005e8c <SongLoop_Start+0xac>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e50:	60fb      	str	r3, [r7, #12]
  if (dur == 0) dur = 1;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <SongLoop_Start+0x7c>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	60fb      	str	r3, [r7, #12]

  AudioPWM_SetFreq(midi2hz(m));
 8005e5c:	897b      	ldrh	r3, [r7, #10]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fda6 	bl	80059b0 <midi2hz>
 8005e64:	4603      	mov	r3, r0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fa fc5c 	bl	8000724 <AudioPWM_SetFreq>
  sched_next(dur);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff fdf1 	bl	8005a54 <sched_next>
  return true;
 8005e72:	2301      	movs	r3, #1
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3710      	adds	r7, #16
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	200065f0 	.word	0x200065f0
 8005e80:	20006562 	.word	0x20006562
 8005e84:	20004560 	.word	0x20004560
 8005e88:	20000034 	.word	0x20000034
 8005e8c:	20000030 	.word	0x20000030

08005e90 <SongLoop_Stop>:
  AudioPWM_SetFreq(midi2hz(m));
  sched_next(dur);
}

void SongLoop_Stop(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  if (s_tim) {
 8005e94:	4b10      	ldr	r3, [pc, #64]	@ (8005ed8 <SongLoop_Stop+0x48>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d004      	beq.n	8005ea6 <SongLoop_Stop+0x16>
    HAL_TIM_Base_Stop_IT(s_tim);
 8005e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ed8 <SongLoop_Stop+0x48>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f002 fda1 	bl	80089e8 <HAL_TIM_Base_Stop_IT>
  }
  AudioPWM_SetFreq(0);
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	f7fa fc3c 	bl	8000724 <AudioPWM_SetFreq>

  s_mode = MODE_NONE;
 8005eac:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <SongLoop_Stop+0x4c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	701a      	strb	r2, [r3, #0]

  /* Limpieza de índices */
  s_note_index = s_note_count = 0;
 8005eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <SongLoop_Stop+0x50>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	801a      	strh	r2, [r3, #0]
 8005eb8:	4b09      	ldr	r3, [pc, #36]	@ (8005ee0 <SongLoop_Stop+0x50>)
 8005eba:	881a      	ldrh	r2, [r3, #0]
 8005ebc:	4b09      	ldr	r3, [pc, #36]	@ (8005ee4 <SongLoop_Stop+0x54>)
 8005ebe:	801a      	strh	r2, [r3, #0]
  s_arr = NULL; s_arr_len = s_arr_idx = 0;
 8005ec0:	4b09      	ldr	r3, [pc, #36]	@ (8005ee8 <SongLoop_Stop+0x58>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	4b09      	ldr	r3, [pc, #36]	@ (8005eec <SongLoop_Stop+0x5c>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <SongLoop_Stop+0x5c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a07      	ldr	r2, [pc, #28]	@ (8005ef0 <SongLoop_Stop+0x60>)
 8005ed2:	6013      	str	r3, [r2, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	2000455c 	.word	0x2000455c
 8005edc:	200065f0 	.word	0x200065f0
 8005ee0:	20006560 	.word	0x20006560
 8005ee4:	20006562 	.word	0x20006562
 8005ee8:	200065e4 	.word	0x200065e4
 8005eec:	200065ec 	.word	0x200065ec
 8005ef0:	200065e8 	.word	0x200065e8

08005ef4 <TIM1_UP_TIM10_IRQHandler>:

/* =================== ISR (loop infinito) =================== */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
  /* Usamos s_tim como base del scheduler */
  if (!s_tim) return;
 8005efa:	4b57      	ldr	r3, [pc, #348]	@ (8006058 <TIM1_UP_TIM10_IRQHandler+0x164>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80a5 	beq.w	800604e <TIM1_UP_TIM10_IRQHandler+0x15a>

  if (__HAL_TIM_GET_FLAG(s_tim, TIM_FLAG_UPDATE) != RESET &&
 8005f04:	4b54      	ldr	r3, [pc, #336]	@ (8006058 <TIM1_UP_TIM10_IRQHandler+0x164>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	f040 809d 	bne.w	8006050 <TIM1_UP_TIM10_IRQHandler+0x15c>
      __HAL_TIM_GET_IT_SOURCE(s_tim, TIM_IT_UPDATE) != RESET)
 8005f16:	4b50      	ldr	r3, [pc, #320]	@ (8006058 <TIM1_UP_TIM10_IRQHandler+0x164>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f003 0301 	and.w	r3, r3, #1
  if (__HAL_TIM_GET_FLAG(s_tim, TIM_FLAG_UPDATE) != RESET &&
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	f040 8094 	bne.w	8006050 <TIM1_UP_TIM10_IRQHandler+0x15c>
  {
    __HAL_TIM_CLEAR_IT(s_tim, TIM_IT_UPDATE);
 8005f28:	4b4b      	ldr	r3, [pc, #300]	@ (8006058 <TIM1_UP_TIM10_IRQHandler+0x164>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f06f 0201 	mvn.w	r2, #1
 8005f32:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Stop_IT(s_tim);
 8005f34:	4b48      	ldr	r3, [pc, #288]	@ (8006058 <TIM1_UP_TIM10_IRQHandler+0x164>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f002 fd55 	bl	80089e8 <HAL_TIM_Base_Stop_IT>

    if (s_mode == MODE_SD) {
 8005f3e:	4b47      	ldr	r3, [pc, #284]	@ (800605c <TIM1_UP_TIM10_IRQHandler+0x168>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d137      	bne.n	8005fb6 <TIM1_UP_TIM10_IRQHandler+0xc2>
      if (s_note_index >= s_note_count) {
 8005f46:	4b46      	ldr	r3, [pc, #280]	@ (8006060 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8005f48:	881a      	ldrh	r2, [r3, #0]
 8005f4a:	4b46      	ldr	r3, [pc, #280]	@ (8006064 <TIM1_UP_TIM10_IRQHandler+0x170>)
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <TIM1_UP_TIM10_IRQHandler+0x64>
        s_note_index = 0;  /* LOOP SD */
 8005f52:	4b43      	ldr	r3, [pc, #268]	@ (8006060 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8005f54:	2200      	movs	r2, #0
 8005f56:	801a      	strh	r2, [r3, #0]
      }

      uint16_t m  = s_notes[s_note_index].midi;
 8005f58:	4b41      	ldr	r3, [pc, #260]	@ (8006060 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8005f5a:	881b      	ldrh	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4b42      	ldr	r3, [pc, #264]	@ (8006068 <TIM1_UP_TIM10_IRQHandler+0x174>)
 8005f60:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8005f64:	807b      	strh	r3, [r7, #2]
      uint16_t tk = s_notes[s_note_index].ticks;
 8005f66:	4b3e      	ldr	r3, [pc, #248]	@ (8006060 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	4a3f      	ldr	r2, [pc, #252]	@ (8006068 <TIM1_UP_TIM10_IRQHandler+0x174>)
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	885b      	ldrh	r3, [r3, #2]
 8005f72:	803b      	strh	r3, [r7, #0]
      s_note_index++;
 8005f74:	4b3a      	ldr	r3, [pc, #232]	@ (8006060 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8005f76:	881b      	ldrh	r3, [r3, #0]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	4b38      	ldr	r3, [pc, #224]	@ (8006060 <TIM1_UP_TIM10_IRQHandler+0x16c>)
 8005f7e:	801a      	strh	r2, [r3, #0]

      uint32_t dur = (uint32_t)tk * s_tick_ms / s_speed_x;
 8005f80:	883b      	ldrh	r3, [r7, #0]
 8005f82:	4a3a      	ldr	r2, [pc, #232]	@ (800606c <TIM1_UP_TIM10_IRQHandler+0x178>)
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	fb03 f202 	mul.w	r2, r3, r2
 8005f8a:	4b39      	ldr	r3, [pc, #228]	@ (8006070 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f92:	60fb      	str	r3, [r7, #12]
      if (dur == 0) dur = 1;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d101      	bne.n	8005f9e <TIM1_UP_TIM10_IRQHandler+0xaa>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]

      AudioPWM_SetFreq(midi2hz(m));
 8005f9e:	887b      	ldrh	r3, [r7, #2]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff fd05 	bl	80059b0 <midi2hz>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fa fbbb 	bl	8000724 <AudioPWM_SetFreq>
      sched_next(dur);
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff fd50 	bl	8005a54 <sched_next>
      return;
 8005fb4:	e04c      	b.n	8006050 <TIM1_UP_TIM10_IRQHandler+0x15c>
    }

    if (s_mode == MODE_ARRAY) {
 8005fb6:	4b29      	ldr	r3, [pc, #164]	@ (800605c <TIM1_UP_TIM10_IRQHandler+0x168>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d143      	bne.n	8006046 <TIM1_UP_TIM10_IRQHandler+0x152>
      if (s_arr_idx >= s_arr_len) {
 8005fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8006074 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8006078 <TIM1_UP_TIM10_IRQHandler+0x184>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d30d      	bcc.n	8005fe6 <TIM1_UP_TIM10_IRQHandler+0xf2>
        if (!s_arr_loop) { AudioPWM_SetFreq(0); s_mode = MODE_NONE; return; }
 8005fca:	4b2c      	ldr	r3, [pc, #176]	@ (800607c <TIM1_UP_TIM10_IRQHandler+0x188>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d106      	bne.n	8005fe0 <TIM1_UP_TIM10_IRQHandler+0xec>
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	f7fa fba6 	bl	8000724 <AudioPWM_SetFreq>
 8005fd8:	4b20      	ldr	r3, [pc, #128]	@ (800605c <TIM1_UP_TIM10_IRQHandler+0x168>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	e037      	b.n	8006050 <TIM1_UP_TIM10_IRQHandler+0x15c>
        s_arr_idx = 0;  /* LOOP ARRAY */
 8005fe0:	4b24      	ldr	r3, [pc, #144]	@ (8006074 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	601a      	str	r2, [r3, #0]
      }

      uint16_t m  = s_arr[s_arr_idx].midi;
 8005fe6:	4b26      	ldr	r3, [pc, #152]	@ (8006080 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b22      	ldr	r3, [pc, #136]	@ (8006074 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	80fb      	strh	r3, [r7, #6]
      uint16_t tk = s_arr[s_arr_idx].ticks;
 8005ff6:	4b22      	ldr	r3, [pc, #136]	@ (8006080 <TIM1_UP_TIM10_IRQHandler+0x18c>)
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8006074 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	885b      	ldrh	r3, [r3, #2]
 8006004:	80bb      	strh	r3, [r7, #4]
      s_arr_idx++;
 8006006:	4b1b      	ldr	r3, [pc, #108]	@ (8006074 <TIM1_UP_TIM10_IRQHandler+0x180>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3301      	adds	r3, #1
 800600c:	4a19      	ldr	r2, [pc, #100]	@ (8006074 <TIM1_UP_TIM10_IRQHandler+0x180>)
 800600e:	6013      	str	r3, [r2, #0]

      uint32_t dur = (uint32_t)tk * s_arr_tick / s_speed_x;
 8006010:	88bb      	ldrh	r3, [r7, #4]
 8006012:	4a1c      	ldr	r2, [pc, #112]	@ (8006084 <TIM1_UP_TIM10_IRQHandler+0x190>)
 8006014:	6812      	ldr	r2, [r2, #0]
 8006016:	fb03 f202 	mul.w	r2, r3, r2
 800601a:	4b15      	ldr	r3, [pc, #84]	@ (8006070 <TIM1_UP_TIM10_IRQHandler+0x17c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006022:	60bb      	str	r3, [r7, #8]
      if (dur == 0) dur = 1;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d101      	bne.n	800602e <TIM1_UP_TIM10_IRQHandler+0x13a>
 800602a:	2301      	movs	r3, #1
 800602c:	60bb      	str	r3, [r7, #8]

      AudioPWM_SetFreq(midi2hz(m));
 800602e:	88fb      	ldrh	r3, [r7, #6]
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fcbd 	bl	80059b0 <midi2hz>
 8006036:	4603      	mov	r3, r0
 8006038:	4618      	mov	r0, r3
 800603a:	f7fa fb73 	bl	8000724 <AudioPWM_SetFreq>
      sched_next(dur);
 800603e:	68b8      	ldr	r0, [r7, #8]
 8006040:	f7ff fd08 	bl	8005a54 <sched_next>
      return;
 8006044:	e004      	b.n	8006050 <TIM1_UP_TIM10_IRQHandler+0x15c>
    }

    /* Si llegamos aquí: no hay modo activo */
    AudioPWM_SetFreq(0);
 8006046:	2000      	movs	r0, #0
 8006048:	f7fa fb6c 	bl	8000724 <AudioPWM_SetFreq>
 800604c:	e000      	b.n	8006050 <TIM1_UP_TIM10_IRQHandler+0x15c>
  if (!s_tim) return;
 800604e:	bf00      	nop
  }
}
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	2000455c 	.word	0x2000455c
 800605c:	200065f0 	.word	0x200065f0
 8006060:	20006562 	.word	0x20006562
 8006064:	20006560 	.word	0x20006560
 8006068:	20004560 	.word	0x20004560
 800606c:	20000034 	.word	0x20000034
 8006070:	20000030 	.word	0x20000030
 8006074:	200065ec 	.word	0x200065ec
 8006078:	200065e8 	.word	0x200065e8
 800607c:	2000003c 	.word	0x2000003c
 8006080:	200065e4 	.word	0x200065e4
 8006084:	20000038 	.word	0x20000038

08006088 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800608e:	2300      	movs	r3, #0
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	4b10      	ldr	r3, [pc, #64]	@ (80060d4 <HAL_MspInit+0x4c>)
 8006094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006096:	4a0f      	ldr	r2, [pc, #60]	@ (80060d4 <HAL_MspInit+0x4c>)
 8006098:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800609c:	6453      	str	r3, [r2, #68]	@ 0x44
 800609e:	4b0d      	ldr	r3, [pc, #52]	@ (80060d4 <HAL_MspInit+0x4c>)
 80060a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060a6:	607b      	str	r3, [r7, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060aa:	2300      	movs	r3, #0
 80060ac:	603b      	str	r3, [r7, #0]
 80060ae:	4b09      	ldr	r3, [pc, #36]	@ (80060d4 <HAL_MspInit+0x4c>)
 80060b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b2:	4a08      	ldr	r2, [pc, #32]	@ (80060d4 <HAL_MspInit+0x4c>)
 80060b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80060ba:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <HAL_MspInit+0x4c>)
 80060bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060c2:	603b      	str	r3, [r7, #0]
 80060c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40023800 	.word	0x40023800

080060d8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08a      	sub	sp, #40	@ 0x28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060e0:	f107 0314 	add.w	r3, r7, #20
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	609a      	str	r2, [r3, #8]
 80060ec:	60da      	str	r2, [r3, #12]
 80060ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a19      	ldr	r2, [pc, #100]	@ (800615c <HAL_SPI_MspInit+0x84>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d12b      	bne.n	8006152 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80060fa:	2300      	movs	r3, #0
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	4b18      	ldr	r3, [pc, #96]	@ (8006160 <HAL_SPI_MspInit+0x88>)
 8006100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006102:	4a17      	ldr	r2, [pc, #92]	@ (8006160 <HAL_SPI_MspInit+0x88>)
 8006104:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006108:	6453      	str	r3, [r2, #68]	@ 0x44
 800610a:	4b15      	ldr	r3, [pc, #84]	@ (8006160 <HAL_SPI_MspInit+0x88>)
 800610c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800610e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	4b11      	ldr	r3, [pc, #68]	@ (8006160 <HAL_SPI_MspInit+0x88>)
 800611c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800611e:	4a10      	ldr	r2, [pc, #64]	@ (8006160 <HAL_SPI_MspInit+0x88>)
 8006120:	f043 0301 	orr.w	r3, r3, #1
 8006124:	6313      	str	r3, [r2, #48]	@ 0x30
 8006126:	4b0e      	ldr	r3, [pc, #56]	@ (8006160 <HAL_SPI_MspInit+0x88>)
 8006128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006132:	23e0      	movs	r3, #224	@ 0xe0
 8006134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006136:	2302      	movs	r3, #2
 8006138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613a:	2300      	movs	r3, #0
 800613c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800613e:	2303      	movs	r3, #3
 8006140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006142:	2305      	movs	r3, #5
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	4619      	mov	r1, r3
 800614c:	4805      	ldr	r0, [pc, #20]	@ (8006164 <HAL_SPI_MspInit+0x8c>)
 800614e:	f001 f829 	bl	80071a4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8006152:	bf00      	nop
 8006154:	3728      	adds	r7, #40	@ 0x28
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	40013000 	.word	0x40013000
 8006160:	40023800 	.word	0x40023800
 8006164:	40020000 	.word	0x40020000

08006168 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a0e      	ldr	r2, [pc, #56]	@ (80061b0 <HAL_TIM_Base_MspInit+0x48>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d115      	bne.n	80061a6 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM11_MspInit 0 */

    /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	4b0d      	ldr	r3, [pc, #52]	@ (80061b4 <HAL_TIM_Base_MspInit+0x4c>)
 8006180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006182:	4a0c      	ldr	r2, [pc, #48]	@ (80061b4 <HAL_TIM_Base_MspInit+0x4c>)
 8006184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006188:	6453      	str	r3, [r2, #68]	@ 0x44
 800618a:	4b0a      	ldr	r3, [pc, #40]	@ (80061b4 <HAL_TIM_Base_MspInit+0x4c>)
 800618c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8006196:	2200      	movs	r2, #0
 8006198:	2100      	movs	r1, #0
 800619a:	201a      	movs	r0, #26
 800619c:	f000 ff2d 	bl	8006ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80061a0:	201a      	movs	r0, #26
 80061a2:	f000 ff46 	bl	8007032 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM11_MspInit 1 */

  }

}
 80061a6:	bf00      	nop
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40014800 	.word	0x40014800
 80061b4:	40023800 	.word	0x40023800

080061b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061c0:	f107 030c 	add.w	r3, r7, #12
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
 80061c8:	605a      	str	r2, [r3, #4]
 80061ca:	609a      	str	r2, [r3, #8]
 80061cc:	60da      	str	r2, [r3, #12]
 80061ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a12      	ldr	r2, [pc, #72]	@ (8006220 <HAL_TIM_MspPostInit+0x68>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d11e      	bne.n	8006218 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM11_MspPostInit 0 */

    /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061da:	2300      	movs	r3, #0
 80061dc:	60bb      	str	r3, [r7, #8]
 80061de:	4b11      	ldr	r3, [pc, #68]	@ (8006224 <HAL_TIM_MspPostInit+0x6c>)
 80061e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e2:	4a10      	ldr	r2, [pc, #64]	@ (8006224 <HAL_TIM_MspPostInit+0x6c>)
 80061e4:	f043 0302 	orr.w	r3, r3, #2
 80061e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80061ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006224 <HAL_TIM_MspPostInit+0x6c>)
 80061ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ee:	f003 0302 	and.w	r3, r3, #2
 80061f2:	60bb      	str	r3, [r7, #8]
 80061f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PB9     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80061f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fc:	2302      	movs	r3, #2
 80061fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006204:	2302      	movs	r3, #2
 8006206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006208:	2303      	movs	r3, #3
 800620a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800620c:	f107 030c 	add.w	r3, r7, #12
 8006210:	4619      	mov	r1, r3
 8006212:	4805      	ldr	r0, [pc, #20]	@ (8006228 <HAL_TIM_MspPostInit+0x70>)
 8006214:	f000 ffc6 	bl	80071a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM11_MspPostInit 1 */

    /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8006218:	bf00      	nop
 800621a:	3720      	adds	r7, #32
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	40014800 	.word	0x40014800
 8006224:	40023800 	.word	0x40023800
 8006228:	40020400 	.word	0x40020400

0800622c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08c      	sub	sp, #48	@ 0x30
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006234:	f107 031c 	add.w	r3, r7, #28
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	605a      	str	r2, [r3, #4]
 800623e:	609a      	str	r2, [r3, #8]
 8006240:	60da      	str	r2, [r3, #12]
 8006242:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a3a      	ldr	r2, [pc, #232]	@ (8006334 <HAL_UART_MspInit+0x108>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d134      	bne.n	80062b8 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800624e:	2300      	movs	r3, #0
 8006250:	61bb      	str	r3, [r7, #24]
 8006252:	4b39      	ldr	r3, [pc, #228]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006256:	4a38      	ldr	r2, [pc, #224]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 8006258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800625c:	6413      	str	r3, [r2, #64]	@ 0x40
 800625e:	4b36      	ldr	r3, [pc, #216]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800626a:	2300      	movs	r3, #0
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	4b32      	ldr	r3, [pc, #200]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 8006270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006272:	4a31      	ldr	r2, [pc, #196]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	6313      	str	r3, [r2, #48]	@ 0x30
 800627a:	4b2f      	ldr	r3, [pc, #188]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 800627c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8006286:	230c      	movs	r3, #12
 8006288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800628a:	2302      	movs	r3, #2
 800628c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800628e:	2300      	movs	r3, #0
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006292:	2303      	movs	r3, #3
 8006294:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006296:	2307      	movs	r3, #7
 8006298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800629a:	f107 031c 	add.w	r3, r7, #28
 800629e:	4619      	mov	r1, r3
 80062a0:	4826      	ldr	r0, [pc, #152]	@ (800633c <HAL_UART_MspInit+0x110>)
 80062a2:	f000 ff7f 	bl	80071a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80062a6:	2200      	movs	r2, #0
 80062a8:	2100      	movs	r1, #0
 80062aa:	2026      	movs	r0, #38	@ 0x26
 80062ac:	f000 fea5 	bl	8006ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80062b0:	2026      	movs	r0, #38	@ 0x26
 80062b2:	f000 febe 	bl	8007032 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80062b6:	e039      	b.n	800632c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a20      	ldr	r2, [pc, #128]	@ (8006340 <HAL_UART_MspInit+0x114>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d134      	bne.n	800632c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 80062cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80062d2:	4b19      	ldr	r3, [pc, #100]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062da:	613b      	str	r3, [r7, #16]
 80062dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
 80062e2:	4b15      	ldr	r3, [pc, #84]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 80062e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e6:	4a14      	ldr	r2, [pc, #80]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 80062e8:	f043 0304 	orr.w	r3, r3, #4
 80062ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80062ee:	4b12      	ldr	r3, [pc, #72]	@ (8006338 <HAL_UART_MspInit+0x10c>)
 80062f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80062fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80062fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006300:	2302      	movs	r3, #2
 8006302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006304:	2300      	movs	r3, #0
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006308:	2303      	movs	r3, #3
 800630a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800630c:	2307      	movs	r3, #7
 800630e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006310:	f107 031c 	add.w	r3, r7, #28
 8006314:	4619      	mov	r1, r3
 8006316:	480b      	ldr	r0, [pc, #44]	@ (8006344 <HAL_UART_MspInit+0x118>)
 8006318:	f000 ff44 	bl	80071a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800631c:	2200      	movs	r2, #0
 800631e:	2100      	movs	r1, #0
 8006320:	2027      	movs	r0, #39	@ 0x27
 8006322:	f000 fe6a 	bl	8006ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006326:	2027      	movs	r0, #39	@ 0x27
 8006328:	f000 fe83 	bl	8007032 <HAL_NVIC_EnableIRQ>
}
 800632c:	bf00      	nop
 800632e:	3730      	adds	r7, #48	@ 0x30
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	40004400 	.word	0x40004400
 8006338:	40023800 	.word	0x40023800
 800633c:	40020000 	.word	0x40020000
 8006340:	40004800 	.word	0x40004800
 8006344:	40020800 	.word	0x40020800

08006348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800634c:	bf00      	nop
 800634e:	e7fd      	b.n	800634c <NMI_Handler+0x4>

08006350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <HardFault_Handler+0x4>

08006358 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800635c:	bf00      	nop
 800635e:	e7fd      	b.n	800635c <MemManage_Handler+0x4>

08006360 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <BusFault_Handler+0x4>

08006368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800636c:	bf00      	nop
 800636e:	e7fd      	b.n	800636c <UsageFault_Handler+0x4>

08006370 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006374:	bf00      	nop
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800637e:	b480      	push	{r7}
 8006380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006390:	bf00      	nop
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr
	...

0800639c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0){
 80063a0:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <SysTick_Handler+0x38>)
 80063a2:	881b      	ldrh	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <SysTick_Handler+0x18>
	Timer1--;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <SysTick_Handler+0x38>)
 80063aa:	881b      	ldrh	r3, [r3, #0]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	4b08      	ldr	r3, [pc, #32]	@ (80063d4 <SysTick_Handler+0x38>)
 80063b2:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 > 0){
 80063b4:	4b08      	ldr	r3, [pc, #32]	@ (80063d8 <SysTick_Handler+0x3c>)
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <SysTick_Handler+0x2c>
	Timer2--;
 80063bc:	4b06      	ldr	r3, [pc, #24]	@ (80063d8 <SysTick_Handler+0x3c>)
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	b29a      	uxth	r2, r3
 80063c4:	4b04      	ldr	r3, [pc, #16]	@ (80063d8 <SysTick_Handler+0x3c>)
 80063c6:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80063c8:	f000 fcf8 	bl	8006dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80063cc:	f000 fe4b 	bl	8007066 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 80063d0:	bf00      	nop
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200000d8 	.word	0x200000d8
 80063d8:	200000da 	.word	0x200000da

080063dc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80063e0:	4802      	ldr	r0, [pc, #8]	@ (80063ec <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80063e2:	f002 fc51 	bl	8008c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80063e6:	bf00      	nop
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000138 	.word	0x20000138

080063f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80063f4:	4802      	ldr	r0, [pc, #8]	@ (8006400 <USART2_IRQHandler+0x10>)
 80063f6:	f003 f92f 	bl	8009658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80063fa:	bf00      	nop
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	200001c8 	.word	0x200001c8

08006404 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006408:	4802      	ldr	r0, [pc, #8]	@ (8006414 <USART3_IRQHandler+0x10>)
 800640a:	f003 f925 	bl	8009658 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800640e:	bf00      	nop
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	20000210 	.word	0x20000210

08006418 <_sbrk>:
 8006418:	b580      	push	{r7, lr}
 800641a:	b086      	sub	sp, #24
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	4a14      	ldr	r2, [pc, #80]	@ (8006474 <_sbrk+0x5c>)
 8006422:	4b15      	ldr	r3, [pc, #84]	@ (8006478 <_sbrk+0x60>)
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	4b13      	ldr	r3, [pc, #76]	@ (800647c <_sbrk+0x64>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d102      	bne.n	800643a <_sbrk+0x22>
 8006434:	4b11      	ldr	r3, [pc, #68]	@ (800647c <_sbrk+0x64>)
 8006436:	4a12      	ldr	r2, [pc, #72]	@ (8006480 <_sbrk+0x68>)
 8006438:	601a      	str	r2, [r3, #0]
 800643a:	4b10      	ldr	r3, [pc, #64]	@ (800647c <_sbrk+0x64>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4413      	add	r3, r2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	429a      	cmp	r2, r3
 8006446:	d207      	bcs.n	8006458 <_sbrk+0x40>
 8006448:	f007 fc1c 	bl	800dc84 <__errno>
 800644c:	4603      	mov	r3, r0
 800644e:	220c      	movs	r2, #12
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	f04f 33ff 	mov.w	r3, #4294967295
 8006456:	e009      	b.n	800646c <_sbrk+0x54>
 8006458:	4b08      	ldr	r3, [pc, #32]	@ (800647c <_sbrk+0x64>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	4b07      	ldr	r3, [pc, #28]	@ (800647c <_sbrk+0x64>)
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4413      	add	r3, r2
 8006466:	4a05      	ldr	r2, [pc, #20]	@ (800647c <_sbrk+0x64>)
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	4618      	mov	r0, r3
 800646e:	3718      	adds	r7, #24
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20020000 	.word	0x20020000
 8006478:	00000400 	.word	0x00000400
 800647c:	200065f4 	.word	0x200065f4
 8006480:	20006ab0 	.word	0x20006ab0

08006484 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006488:	4b06      	ldr	r3, [pc, #24]	@ (80064a4 <SystemInit+0x20>)
 800648a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648e:	4a05      	ldr	r2, [pc, #20]	@ (80064a4 <SystemInit+0x20>)
 8006490:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006494:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006498:	bf00      	nop
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	e000ed00 	.word	0xe000ed00

080064a8 <calc_dir>:
static char     segbuf[INPUT_RX_BUFSZ];
static uint16_t seglen = 0;
static uint8_t  rx_byte;

static inline DirMask calc_dir(uint16_t X, uint16_t Y)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	460a      	mov	r2, r1
 80064b2:	80fb      	strh	r3, [r7, #6]
 80064b4:	4613      	mov	r3, r2
 80064b6:	80bb      	strh	r3, [r7, #4]
  DirMask d = DIR_NONE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	73fb      	strb	r3, [r7, #15]
  if (X >= TH_HIGH || X >= MAX_SAMPLE) d = (DirMask)(d | DIR_UP);
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80064c2:	d204      	bcs.n	80064ce <calc_dir+0x26>
 80064c4:	88fb      	ldrh	r3, [r7, #6]
 80064c6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d904      	bls.n	80064d8 <calc_dir+0x30>
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	f043 0301 	orr.w	r3, r3, #1
 80064d4:	73fb      	strb	r3, [r7, #15]
 80064d6:	e008      	b.n	80064ea <calc_dir+0x42>
  else if (X < TH_LOW)                 d = (DirMask)(d | DIR_DOWN);
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	f240 52db 	movw	r2, #1499	@ 0x5db
 80064de:	4293      	cmp	r3, r2
 80064e0:	d803      	bhi.n	80064ea <calc_dir+0x42>
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	f043 0302 	orr.w	r3, r3, #2
 80064e8:	73fb      	strb	r3, [r7, #15]
  if (Y >= TH_HIGH)                    d = (DirMask)(d | DIR_RIGHT);
 80064ea:	88bb      	ldrh	r3, [r7, #4]
 80064ec:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80064f0:	d304      	bcc.n	80064fc <calc_dir+0x54>
 80064f2:	7bfb      	ldrb	r3, [r7, #15]
 80064f4:	f043 0308 	orr.w	r3, r3, #8
 80064f8:	73fb      	strb	r3, [r7, #15]
 80064fa:	e008      	b.n	800650e <calc_dir+0x66>
  else if (Y < TH_LOW)                 d = (DirMask)(d | DIR_LEFT);
 80064fc:	88bb      	ldrh	r3, [r7, #4]
 80064fe:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006502:	4293      	cmp	r3, r2
 8006504:	d803      	bhi.n	800650e <calc_dir+0x66>
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	f043 0304 	orr.w	r3, r3, #4
 800650c:	73fb      	strb	r3, [r7, #15]
  return d;
 800650e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <apply>:

static void apply(uint8_t id, uint16_t X, uint16_t Y, uint8_t A, uint8_t B)
{
 800651c:	b590      	push	{r4, r7, lr}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	4604      	mov	r4, r0
 8006524:	4608      	mov	r0, r1
 8006526:	4611      	mov	r1, r2
 8006528:	461a      	mov	r2, r3
 800652a:	4623      	mov	r3, r4
 800652c:	71fb      	strb	r3, [r7, #7]
 800652e:	4603      	mov	r3, r0
 8006530:	80bb      	strh	r3, [r7, #4]
 8006532:	460b      	mov	r3, r1
 8006534:	807b      	strh	r3, [r7, #2]
 8006536:	4613      	mov	r3, r2
 8006538:	71bb      	strb	r3, [r7, #6]
  PlayerInput *p = (id==1)? (PlayerInput*)&s_p1 : (PlayerInput*)&s_p2;
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d101      	bne.n	8006544 <apply+0x28>
 8006540:	4b15      	ldr	r3, [pc, #84]	@ (8006598 <apply+0x7c>)
 8006542:	e000      	b.n	8006546 <apply+0x2a>
 8006544:	4b15      	ldr	r3, [pc, #84]	@ (800659c <apply+0x80>)
 8006546:	60fb      	str	r3, [r7, #12]
  p->X=X; p->Y=Y; p->A=A?1:0; p->B=B?1:0; p->dir=calc_dir(X,Y);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	88ba      	ldrh	r2, [r7, #4]
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	887a      	ldrh	r2, [r7, #2]
 8006552:	805a      	strh	r2, [r3, #2]
 8006554:	79bb      	ldrb	r3, [r7, #6]
 8006556:	2b00      	cmp	r3, #0
 8006558:	bf14      	ite	ne
 800655a:	2301      	movne	r3, #1
 800655c:	2300      	moveq	r3, #0
 800655e:	b2db      	uxtb	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	711a      	strb	r2, [r3, #4]
 8006566:	f897 3020 	ldrb.w	r3, [r7, #32]
 800656a:	2b00      	cmp	r3, #0
 800656c:	bf14      	ite	ne
 800656e:	2301      	movne	r3, #1
 8006570:	2300      	moveq	r3, #0
 8006572:	b2db      	uxtb	r3, r3
 8006574:	461a      	mov	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	715a      	strb	r2, [r3, #5]
 800657a:	887a      	ldrh	r2, [r7, #2]
 800657c:	88bb      	ldrh	r3, [r7, #4]
 800657e:	4611      	mov	r1, r2
 8006580:	4618      	mov	r0, r3
 8006582:	f7ff ff91 	bl	80064a8 <calc_dir>
 8006586:	4603      	mov	r3, r0
 8006588:	461a      	mov	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	719a      	strb	r2, [r3, #6]
}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	bd90      	pop	{r4, r7, pc}
 8006596:	bf00      	nop
 8006598:	200065fc 	.word	0x200065fc
 800659c:	20006604 	.word	0x20006604

080065a0 <parse_segment>:

static void parse_segment(const char *s, uint16_t n)
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b0cf      	sub	sp, #316	@ 0x13c
 80065a4:	af04      	add	r7, sp, #16
 80065a6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065aa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80065ae:	6018      	str	r0, [r3, #0]
 80065b0:	460a      	mov	r2, r1
 80065b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065b6:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80065ba:	801a      	strh	r2, [r3, #0]
  int id=0, x=0, y=0, sw=0, a=0, b=0;
 80065bc:	2300      	movs	r3, #0
 80065be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80065c8:	2300      	movs	r3, #0
 80065ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80065ce:	2300      	movs	r3, #0
 80065d0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80065d4:	2300      	movs	r3, #0
 80065d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
  char tmp[INPUT_RX_BUFSZ];
  if (n >= sizeof(tmp)) n = sizeof(tmp) - 1;
 80065e0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065e4:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	2bff      	cmp	r3, #255	@ 0xff
 80065ec:	d905      	bls.n	80065fa <parse_segment+0x5a>
 80065ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065f2:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 80065f6:	22ff      	movs	r2, #255	@ 0xff
 80065f8:	801a      	strh	r2, [r3, #0]
  memcpy(tmp, s, n); tmp[n]='\0';
 80065fa:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80065fe:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 8006602:	881a      	ldrh	r2, [r3, #0]
 8006604:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8006608:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800660c:	f107 0008 	add.w	r0, r7, #8
 8006610:	6819      	ldr	r1, [r3, #0]
 8006612:	f007 fb63 	bl	800dcdc <memcpy>
 8006616:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800661a:	f5a3 7393 	sub.w	r3, r3, #294	@ 0x126
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8006624:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 8006628:	2100      	movs	r1, #0
 800662a:	54d1      	strb	r1, [r2, r3]
  char *pc = strchr(tmp, ';'); if (pc) *pc = '\0';
 800662c:	f107 0308 	add.w	r3, r7, #8
 8006630:	213b      	movs	r1, #59	@ 0x3b
 8006632:	4618      	mov	r0, r3
 8006634:	f007 fb06 	bl	800dc44 <strchr>
 8006638:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
 800663c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <parse_segment+0xac>
 8006644:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8006648:	2200      	movs	r2, #0
 800664a:	701a      	strb	r2, [r3, #0]

  int matched = sscanf(tmp, "M%d:X%dY%dSW%dA%dB%d", &id, &x, &y, &sw, &a, &b);
 800664c:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8006650:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8006654:	f107 0008 	add.w	r0, r7, #8
 8006658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665c:	9303      	str	r3, [sp, #12]
 800665e:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8006662:	9302      	str	r3, [sp, #8]
 8006664:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006668:	9301      	str	r3, [sp, #4]
 800666a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	460b      	mov	r3, r1
 8006672:	4934      	ldr	r1, [pc, #208]	@ (8006744 <parse_segment+0x1a4>)
 8006674:	f007 fab0 	bl	800dbd8 <siscanf>
 8006678:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
  if (matched < 6) {
 800667c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006680:	2b05      	cmp	r3, #5
 8006682:	dc1b      	bgt.n	80066bc <parse_segment+0x11c>
    matched = sscanf(tmp, " M%d : X%d Y%d SW%d A%d B%d", &id, &x, &y, &sw, &a, &b);
 8006684:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8006688:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 800668c:	f107 0008 	add.w	r0, r7, #8
 8006690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 800669a:	9302      	str	r3, [sp, #8]
 800669c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80066a0:	9301      	str	r3, [sp, #4]
 80066a2:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	460b      	mov	r3, r1
 80066aa:	4927      	ldr	r1, [pc, #156]	@ (8006748 <parse_segment+0x1a8>)
 80066ac:	f007 fa94 	bl	800dbd8 <siscanf>
 80066b0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
    if (matched < 6) return;
 80066b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	dd3b      	ble.n	8006734 <parse_segment+0x194>
  }
  if (id!=1 && id!=2) return;
 80066bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d003      	beq.n	80066cc <parse_segment+0x12c>
 80066c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80066c8:	2b02      	cmp	r3, #2
 80066ca:	d135      	bne.n	8006738 <parse_segment+0x198>

  if (x<0) x=0; if (x>4095) x=4095;
 80066cc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	da02      	bge.n	80066da <parse_segment+0x13a>
 80066d4:	2300      	movs	r3, #0
 80066d6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80066da:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80066de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066e2:	db03      	blt.n	80066ec <parse_segment+0x14c>
 80066e4:	f640 73ff 	movw	r3, #4095	@ 0xfff
 80066e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  if (y<0) y=0; if (y>4095) y=4095;
 80066ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	da02      	bge.n	80066fa <parse_segment+0x15a>
 80066f4:	2300      	movs	r3, #0
 80066f6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80066fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006702:	db03      	blt.n	800670c <parse_segment+0x16c>
 8006704:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8006708:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  apply((uint8_t)id, (uint16_t)x, (uint16_t)y, (uint8_t)a, (uint8_t)b);
 800670c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006710:	b2d8      	uxtb	r0, r3
 8006712:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8006716:	b299      	uxth	r1, r3
 8006718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800671c:	b29a      	uxth	r2, r3
 800671e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006722:	b2dc      	uxtb	r4, r3
 8006724:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8006728:	b2db      	uxtb	r3, r3
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	4623      	mov	r3, r4
 800672e:	f7ff fef5 	bl	800651c <apply>
 8006732:	e002      	b.n	800673a <parse_segment+0x19a>
    if (matched < 6) return;
 8006734:	bf00      	nop
 8006736:	e000      	b.n	800673a <parse_segment+0x19a>
  if (id!=1 && id!=2) return;
 8006738:	bf00      	nop
}
 800673a:	f507 7796 	add.w	r7, r7, #300	@ 0x12c
 800673e:	46bd      	mov	sp, r7
 8006740:	bd90      	pop	{r4, r7, pc}
 8006742:	bf00      	nop
 8006744:	0800f7e0 	.word	0x0800f7e0
 8006748:	0800f7f8 	.word	0x0800f7f8

0800674c <on_byte>:

static void on_byte(uint8_t b)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	71fb      	strb	r3, [r7, #7]
  if (seglen >= INPUT_RX_BUFSZ-1) seglen = 0;
 8006756:	4b1a      	ldr	r3, [pc, #104]	@ (80067c0 <on_byte+0x74>)
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	2bfe      	cmp	r3, #254	@ 0xfe
 800675c:	d902      	bls.n	8006764 <on_byte+0x18>
 800675e:	4b18      	ldr	r3, [pc, #96]	@ (80067c0 <on_byte+0x74>)
 8006760:	2200      	movs	r2, #0
 8006762:	801a      	strh	r2, [r3, #0]
  segbuf[seglen++] = (char)b;
 8006764:	4b16      	ldr	r3, [pc, #88]	@ (80067c0 <on_byte+0x74>)
 8006766:	881b      	ldrh	r3, [r3, #0]
 8006768:	1c5a      	adds	r2, r3, #1
 800676a:	b291      	uxth	r1, r2
 800676c:	4a14      	ldr	r2, [pc, #80]	@ (80067c0 <on_byte+0x74>)
 800676e:	8011      	strh	r1, [r2, #0]
 8006770:	4619      	mov	r1, r3
 8006772:	4a14      	ldr	r2, [pc, #80]	@ (80067c4 <on_byte+0x78>)
 8006774:	79fb      	ldrb	r3, [r7, #7]
 8006776:	5453      	strb	r3, [r2, r1]

  if (b == ';') { parse_segment(segbuf, seglen); seglen = 0; }
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	2b3b      	cmp	r3, #59	@ 0x3b
 800677c:	d109      	bne.n	8006792 <on_byte+0x46>
 800677e:	4b10      	ldr	r3, [pc, #64]	@ (80067c0 <on_byte+0x74>)
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	4619      	mov	r1, r3
 8006784:	480f      	ldr	r0, [pc, #60]	@ (80067c4 <on_byte+0x78>)
 8006786:	f7ff ff0b 	bl	80065a0 <parse_segment>
 800678a:	4b0d      	ldr	r3, [pc, #52]	@ (80067c0 <on_byte+0x74>)
 800678c:	2200      	movs	r2, #0
 800678e:	801a      	strh	r2, [r3, #0]
  else if (b == '\n' || b == '\r') { if (seglen>0) { parse_segment(segbuf, seglen); seglen=0; } }
}
 8006790:	e012      	b.n	80067b8 <on_byte+0x6c>
  else if (b == '\n' || b == '\r') { if (seglen>0) { parse_segment(segbuf, seglen); seglen=0; } }
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	2b0a      	cmp	r3, #10
 8006796:	d002      	beq.n	800679e <on_byte+0x52>
 8006798:	79fb      	ldrb	r3, [r7, #7]
 800679a:	2b0d      	cmp	r3, #13
 800679c:	d10c      	bne.n	80067b8 <on_byte+0x6c>
 800679e:	4b08      	ldr	r3, [pc, #32]	@ (80067c0 <on_byte+0x74>)
 80067a0:	881b      	ldrh	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <on_byte+0x6c>
 80067a6:	4b06      	ldr	r3, [pc, #24]	@ (80067c0 <on_byte+0x74>)
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	4619      	mov	r1, r3
 80067ac:	4805      	ldr	r0, [pc, #20]	@ (80067c4 <on_byte+0x78>)
 80067ae:	f7ff fef7 	bl	80065a0 <parse_segment>
 80067b2:	4b03      	ldr	r3, [pc, #12]	@ (80067c0 <on_byte+0x74>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	801a      	strh	r2, [r3, #0]
}
 80067b8:	bf00      	nop
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	2000670c 	.word	0x2000670c
 80067c4:	2000660c 	.word	0x2000660c

080067c8 <Gamepad_Init>:

void Gamepad_Init(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  s_uart = huart;
 80067d0:	4a08      	ldr	r2, [pc, #32]	@ (80067f4 <Gamepad_Init+0x2c>)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6013      	str	r3, [r2, #0]
  seglen = 0;
 80067d6:	4b08      	ldr	r3, [pc, #32]	@ (80067f8 <Gamepad_Init+0x30>)
 80067d8:	2200      	movs	r2, #0
 80067da:	801a      	strh	r2, [r3, #0]
  HAL_UART_Receive_IT(s_uart, &rx_byte, 1);
 80067dc:	4b05      	ldr	r3, [pc, #20]	@ (80067f4 <Gamepad_Init+0x2c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2201      	movs	r2, #1
 80067e2:	4906      	ldr	r1, [pc, #24]	@ (80067fc <Gamepad_Init+0x34>)
 80067e4:	4618      	mov	r0, r3
 80067e6:	f002 ff12 	bl	800960e <HAL_UART_Receive_IT>
}
 80067ea:	bf00      	nop
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	200065f8 	.word	0x200065f8
 80067f8:	2000670c 	.word	0x2000670c
 80067fc:	2000670e 	.word	0x2000670e

08006800 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  if (s_uart && huart->Instance == s_uart->Instance) {
 8006808:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <HAL_UART_RxCpltCallback+0x40>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d012      	beq.n	8006836 <HAL_UART_RxCpltCallback+0x36>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <HAL_UART_RxCpltCallback+0x40>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d10b      	bne.n	8006836 <HAL_UART_RxCpltCallback+0x36>
    on_byte(rx_byte);
 800681e:	4b09      	ldr	r3, [pc, #36]	@ (8006844 <HAL_UART_RxCpltCallback+0x44>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff ff92 	bl	800674c <on_byte>
    HAL_UART_Receive_IT(s_uart, &rx_byte, 1);
 8006828:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <HAL_UART_RxCpltCallback+0x40>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2201      	movs	r2, #1
 800682e:	4905      	ldr	r1, [pc, #20]	@ (8006844 <HAL_UART_RxCpltCallback+0x44>)
 8006830:	4618      	mov	r0, r3
 8006832:	f002 feec 	bl	800960e <HAL_UART_Receive_IT>
  }
}
 8006836:	bf00      	nop
 8006838:	3708      	adds	r7, #8
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	200065f8 	.word	0x200065f8
 8006844:	2000670e 	.word	0x2000670e

08006848 <Gamepad_GetP1>:

void Gamepad_GetP1(PlayerInput *out) { if (out) *out = s_p1; }
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d006      	beq.n	8006864 <Gamepad_GetP1+0x1c>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4905      	ldr	r1, [pc, #20]	@ (8006870 <Gamepad_GetP1+0x28>)
 800685a:	461a      	mov	r2, r3
 800685c:	460b      	mov	r3, r1
 800685e:	cb03      	ldmia	r3!, {r0, r1}
 8006860:	6010      	str	r0, [r2, #0]
 8006862:	6051      	str	r1, [r2, #4]
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	200065fc 	.word	0x200065fc

08006874 <Gamepad_GetP2>:
void Gamepad_GetP2(PlayerInput *out) { if (out) *out = s_p2; }
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d006      	beq.n	8006890 <Gamepad_GetP2+0x1c>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4905      	ldr	r1, [pc, #20]	@ (800689c <Gamepad_GetP2+0x28>)
 8006886:	461a      	mov	r2, r3
 8006888:	460b      	mov	r3, r1
 800688a:	cb03      	ldmia	r3!, {r0, r1}
 800688c:	6010      	str	r0, [r2, #0]
 800688e:	6051      	str	r1, [r2, #4]
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	20006604 	.word	0x20006604

080068a0 <draw_bg>:
static uint8_t  menu_idx = 0;
static uint8_t  helados_on = 1;
static uint32_t tBlink = 0;

// --- helpers gráficos ---
static void draw_bg(void){ LCD_Bitmap(0,0,LCD_W,LCD_H,fondo); }
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	4b06      	ldr	r3, [pc, #24]	@ (80068c0 <draw_bg+0x20>)
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	23f0      	movs	r3, #240	@ 0xf0
 80068ac:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80068b0:	2100      	movs	r1, #0
 80068b2:	2000      	movs	r0, #0
 80068b4:	f7fb f81e 	bl	80018f4 <LCD_Bitmap>
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	0800f868 	.word	0x0800f868

080068c4 <draw_helados>:
static void draw_helados(int y){
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	6078      	str	r0, [r7, #4]
  LCD_Bitmap(LEFT_X,  y, ICON_W, ICON_H, Helado);
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4b09      	ldr	r3, [pc, #36]	@ (80068f4 <draw_helados+0x30>)
 80068d0:	9300      	str	r3, [sp, #0]
 80068d2:	230b      	movs	r3, #11
 80068d4:	220a      	movs	r2, #10
 80068d6:	206e      	movs	r0, #110	@ 0x6e
 80068d8:	f7fb f80c 	bl	80018f4 <LCD_Bitmap>
  LCD_Bitmap(RIGHT_X, y, ICON_W, ICON_H, Helado);
 80068dc:	6879      	ldr	r1, [r7, #4]
 80068de:	4b05      	ldr	r3, [pc, #20]	@ (80068f4 <draw_helados+0x30>)
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	230b      	movs	r3, #11
 80068e4:	220a      	movs	r2, #10
 80068e6:	20c8      	movs	r0, #200	@ 0xc8
 80068e8:	f7fb f804 	bl	80018f4 <LCD_Bitmap>
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	08035180 	.word	0x08035180

080068f8 <patch_bg>:
static void patch_bg(int x,int y,int w,int h){
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af02      	add	r7, sp, #8
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
  if (x<0||y<0||x+w>LCD_W||y+h>LCD_H) return;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	db31      	blt.n	8006970 <patch_bg+0x78>
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	2b00      	cmp	r3, #0
 8006910:	db2e      	blt.n	8006970 <patch_bg+0x78>
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4413      	add	r3, r2
 8006918:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800691c:	dc28      	bgt.n	8006970 <patch_bg+0x78>
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	4413      	add	r3, r2
 8006924:	2bf0      	cmp	r3, #240	@ 0xf0
 8006926:	dc23      	bgt.n	8006970 <patch_bg+0x78>
  for (int r=0;r<h;r++){
 8006928:	2300      	movs	r3, #0
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	e01b      	b.n	8006966 <patch_bg+0x6e>
    const uint8_t*src=&fondo[((y+r)*LCD_W+x)*BYTES_PP];
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	441a      	add	r2, r3
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	019b      	lsls	r3, r3, #6
 800693c:	461a      	mov	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	4a0c      	ldr	r2, [pc, #48]	@ (8006978 <patch_bg+0x80>)
 8006946:	4413      	add	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
    LCD_Bitmap(x, y+r, w, 1, (uint8_t*)src);
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	4413      	add	r3, r2
 8006952:	4619      	mov	r1, r3
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	9300      	str	r3, [sp, #0]
 800695a:	2301      	movs	r3, #1
 800695c:	f7fa ffca 	bl	80018f4 <LCD_Bitmap>
  for (int r=0;r<h;r++){
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	3301      	adds	r3, #1
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	429a      	cmp	r2, r3
 800696c:	dbdf      	blt.n	800692e <patch_bg+0x36>
 800696e:	e000      	b.n	8006972 <patch_bg+0x7a>
  if (x<0||y<0||x+w>LCD_W||y+h>LCD_H) return;
 8006970:	bf00      	nop
  }
}
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	0800f868 	.word	0x0800f868

0800697c <move_selection>:
static void move_selection(int new_idx)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  if (new_idx<0) new_idx=OPT_COUNT-1;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	da01      	bge.n	800698e <move_selection+0x12>
 800698a:	2303      	movs	r3, #3
 800698c:	607b      	str	r3, [r7, #4]
  if (new_idx>=OPT_COUNT) new_idx=0;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b03      	cmp	r3, #3
 8006992:	dd01      	ble.n	8006998 <move_selection+0x1c>
 8006994:	2300      	movs	r3, #0
 8006996:	607b      	str	r3, [r7, #4]
  if (new_idx==(int)menu_idx) return;
 8006998:	4b16      	ldr	r3, [pc, #88]	@ (80069f4 <move_selection+0x78>)
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	461a      	mov	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d023      	beq.n	80069ec <move_selection+0x70>

  int y_old=OPT_Y[menu_idx], y_new=OPT_Y[new_idx];
 80069a4:	4b13      	ldr	r3, [pc, #76]	@ (80069f4 <move_selection+0x78>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	4b13      	ldr	r3, [pc, #76]	@ (80069f8 <move_selection+0x7c>)
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	4a11      	ldr	r2, [pc, #68]	@ (80069f8 <move_selection+0x7c>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ba:	60bb      	str	r3, [r7, #8]
  patch_bg(LEFT_X, y_old, ICON_W, ICON_H);
 80069bc:	230b      	movs	r3, #11
 80069be:	220a      	movs	r2, #10
 80069c0:	68f9      	ldr	r1, [r7, #12]
 80069c2:	206e      	movs	r0, #110	@ 0x6e
 80069c4:	f7ff ff98 	bl	80068f8 <patch_bg>
  patch_bg(RIGHT_X,y_old, ICON_W, ICON_H);
 80069c8:	230b      	movs	r3, #11
 80069ca:	220a      	movs	r2, #10
 80069cc:	68f9      	ldr	r1, [r7, #12]
 80069ce:	20c8      	movs	r0, #200	@ 0xc8
 80069d0:	f7ff ff92 	bl	80068f8 <patch_bg>

  menu_idx=(uint8_t)new_idx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	b2da      	uxtb	r2, r3
 80069d8:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <move_selection+0x78>)
 80069da:	701a      	strb	r2, [r3, #0]
  if (helados_on) draw_helados(y_new);
 80069dc:	4b07      	ldr	r3, [pc, #28]	@ (80069fc <move_selection+0x80>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d004      	beq.n	80069ee <move_selection+0x72>
 80069e4:	68b8      	ldr	r0, [r7, #8]
 80069e6:	f7ff ff6d 	bl	80068c4 <draw_helados>
 80069ea:	e000      	b.n	80069ee <move_selection+0x72>
  if (new_idx==(int)menu_idx) return;
 80069ec:	bf00      	nop
}
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	2000671c 	.word	0x2000671c
 80069f8:	0804a5c0 	.word	0x0804a5c0
 80069fc:	20000044 	.word	0x20000044

08006a00 <process_player>:

// --- entrada con latch ---
static int process_player(DirMask d, NavLatch *st, uint32_t *last)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	4603      	mov	r3, r0
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
 8006a0c:	73fb      	strb	r3, [r7, #15]
  uint32_t now = HAL_GetTick();
 8006a0e:	f000 f9e9 	bl	8006de4 <HAL_GetTick>
 8006a12:	6178      	str	r0, [r7, #20]
  bool up   = (d & DIR_UP)   && !(d & DIR_DOWN);
 8006a14:	7bfb      	ldrb	r3, [r7, #15]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <process_player+0x2c>
 8006a1e:	7bfb      	ldrb	r3, [r7, #15]
 8006a20:	f003 0302 	and.w	r3, r3, #2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <process_player+0x2c>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <process_player+0x2e>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	74fb      	strb	r3, [r7, #19]
 8006a30:	7cfb      	ldrb	r3, [r7, #19]
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	74fb      	strb	r3, [r7, #19]
  bool down = (d & DIR_DOWN) && !(d & DIR_UP);
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d006      	beq.n	8006a50 <process_player+0x50>
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	f003 0301 	and.w	r3, r3, #1
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <process_player+0x50>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <process_player+0x52>
 8006a50:	2300      	movs	r3, #0
 8006a52:	74bb      	strb	r3, [r7, #18]
 8006a54:	7cbb      	ldrb	r3, [r7, #18]
 8006a56:	f003 0301 	and.w	r3, r3, #1
 8006a5a:	74bb      	strb	r3, [r7, #18]
  bool neutral = !(up||down);
 8006a5c:	7cfb      	ldrb	r3, [r7, #19]
 8006a5e:	f083 0301 	eor.w	r3, r3, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d007      	beq.n	8006a78 <process_player+0x78>
 8006a68:	7cbb      	ldrb	r3, [r7, #18]
 8006a6a:	f083 0301 	eor.w	r3, r3, #1
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <process_player+0x78>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e000      	b.n	8006a7a <process_player+0x7a>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	747b      	strb	r3, [r7, #17]
 8006a7c:	7c7b      	ldrb	r3, [r7, #17]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	747b      	strb	r3, [r7, #17]

  if (neutral) { *st= NAV_NEUTRAL; return 0; }
 8006a84:	7c7b      	ldrb	r3, [r7, #17]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d004      	beq.n	8006a94 <process_player+0x94>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	701a      	strb	r2, [r3, #0]
 8006a90:	2300      	movs	r3, #0
 8006a92:	e020      	b.n	8006ad6 <process_player+0xd6>
  if ((int32_t)(now - *last) < (int32_t)NAV_DEBOUNCE_MS) return 0;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	697a      	ldr	r2, [r7, #20]
 8006a9a:	1ad3      	subs	r3, r2, r3
 8006a9c:	2b4f      	cmp	r3, #79	@ 0x4f
 8006a9e:	dc01      	bgt.n	8006aa4 <process_player+0xa4>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	e018      	b.n	8006ad6 <process_player+0xd6>

  if (*st == NAV_NEUTRAL) {
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d113      	bne.n	8006ad4 <process_player+0xd4>
    *last = now;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	601a      	str	r2, [r3, #0]
    if (up)   { *st = NAV_HELD_UP;   return -1; }
 8006ab2:	7cfb      	ldrb	r3, [r7, #19]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <process_player+0xc4>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2201      	movs	r2, #1
 8006abc:	701a      	strb	r2, [r3, #0]
 8006abe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ac2:	e008      	b.n	8006ad6 <process_player+0xd6>
    if (down) { *st = NAV_HELD_DOWN; return +1; }
 8006ac4:	7cbb      	ldrb	r3, [r7, #18]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <process_player+0xd4>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2202      	movs	r2, #2
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <process_player+0xd6>
  }
  return 0;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <action_edge>:

static uint8_t prevA1=0, prevA2=0;
static bool action_edge(uint8_t a_now, uint8_t *prev)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	6039      	str	r1, [r7, #0]
 8006ae8:	71fb      	strb	r3, [r7, #7]
  bool edge = a_now && !(*prev);
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d005      	beq.n	8006afc <action_edge+0x1e>
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d101      	bne.n	8006afc <action_edge+0x1e>
 8006af8:	2301      	movs	r3, #1
 8006afa:	e000      	b.n	8006afe <action_edge+0x20>
 8006afc:	2300      	movs	r3, #0
 8006afe:	73fb      	strb	r3, [r7, #15]
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
  *prev = a_now;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	79fa      	ldrb	r2, [r7, #7]
 8006b0c:	701a      	strb	r2, [r3, #0]
  return edge;
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <Menu_Init>:

// --- API ---
void Menu_Init(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
  menu_idx = 0; helados_on = 1; tBlink = HAL_GetTick();
 8006b20:	4b0b      	ldr	r3, [pc, #44]	@ (8006b50 <Menu_Init+0x34>)
 8006b22:	2200      	movs	r2, #0
 8006b24:	701a      	strb	r2, [r3, #0]
 8006b26:	4b0b      	ldr	r3, [pc, #44]	@ (8006b54 <Menu_Init+0x38>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
 8006b2c:	f000 f95a 	bl	8006de4 <HAL_GetTick>
 8006b30:	4603      	mov	r3, r0
 8006b32:	4a09      	ldr	r2, [pc, #36]	@ (8006b58 <Menu_Init+0x3c>)
 8006b34:	6013      	str	r3, [r2, #0]
  draw_bg();
 8006b36:	f7ff feb3 	bl	80068a0 <draw_bg>
  draw_helados(OPT_Y[menu_idx]);
 8006b3a:	4b05      	ldr	r3, [pc, #20]	@ (8006b50 <Menu_Init+0x34>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4b06      	ldr	r3, [pc, #24]	@ (8006b5c <Menu_Init+0x40>)
 8006b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff febc 	bl	80068c4 <draw_helados>
}
 8006b4c:	bf00      	nop
 8006b4e:	bd80      	pop	{r7, pc}
 8006b50:	2000671c 	.word	0x2000671c
 8006b54:	20000044 	.word	0x20000044
 8006b58:	20006720 	.word	0x20006720
 8006b5c:	0804a5c0 	.word	0x0804a5c0

08006b60 <Menu_Tick>:

void Menu_Tick(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b08a      	sub	sp, #40	@ 0x28
 8006b64:	af00      	add	r7, sp, #0
  // blink por parches
  uint32_t now = HAL_GetTick();
 8006b66:	f000 f93d 	bl	8006de4 <HAL_GetTick>
 8006b6a:	6238      	str	r0, [r7, #32]
  if ((now - tBlink) >= BLINK_MS) {
 8006b6c:	4b30      	ldr	r3, [pc, #192]	@ (8006c30 <Menu_Tick+0xd0>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6a3a      	ldr	r2, [r7, #32]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006b78:	d324      	bcc.n	8006bc4 <Menu_Tick+0x64>
    tBlink = now; helados_on ^= 1;
 8006b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8006c30 <Menu_Tick+0xd0>)
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	4b2c      	ldr	r3, [pc, #176]	@ (8006c34 <Menu_Tick+0xd4>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	f083 0301 	eor.w	r3, r3, #1
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8006c34 <Menu_Tick+0xd4>)
 8006b8c:	701a      	strb	r2, [r3, #0]
    int y = OPT_Y[menu_idx];
 8006b8e:	4b2a      	ldr	r3, [pc, #168]	@ (8006c38 <Menu_Tick+0xd8>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	4b29      	ldr	r3, [pc, #164]	@ (8006c3c <Menu_Tick+0xdc>)
 8006b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9a:	61fb      	str	r3, [r7, #28]
    if (helados_on) draw_helados(y);
 8006b9c:	4b25      	ldr	r3, [pc, #148]	@ (8006c34 <Menu_Tick+0xd4>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <Menu_Tick+0x4c>
 8006ba4:	69f8      	ldr	r0, [r7, #28]
 8006ba6:	f7ff fe8d 	bl	80068c4 <draw_helados>
 8006baa:	e00b      	b.n	8006bc4 <Menu_Tick+0x64>
    else { patch_bg(LEFT_X,y,ICON_W,ICON_H); patch_bg(RIGHT_X,y,ICON_W,ICON_H); }
 8006bac:	230b      	movs	r3, #11
 8006bae:	220a      	movs	r2, #10
 8006bb0:	69f9      	ldr	r1, [r7, #28]
 8006bb2:	206e      	movs	r0, #110	@ 0x6e
 8006bb4:	f7ff fea0 	bl	80068f8 <patch_bg>
 8006bb8:	230b      	movs	r3, #11
 8006bba:	220a      	movs	r2, #10
 8006bbc:	69f9      	ldr	r1, [r7, #28]
 8006bbe:	20c8      	movs	r0, #200	@ 0xc8
 8006bc0:	f7ff fe9a 	bl	80068f8 <patch_bg>
  }

  // entrada P1+P2
  PlayerInput p1, p2; Gamepad_GetP1(&p1); Gamepad_GetP2(&p2);
 8006bc4:	f107 030c 	add.w	r3, r7, #12
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7ff fe3d 	bl	8006848 <Gamepad_GetP1>
 8006bce:	1d3b      	adds	r3, r7, #4
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7ff fe4f 	bl	8006874 <Gamepad_GetP2>
  int a1 = process_player(p1.dir, &nav_state_p1, &last_tick_p1);
 8006bd6:	7cbb      	ldrb	r3, [r7, #18]
 8006bd8:	4a19      	ldr	r2, [pc, #100]	@ (8006c40 <Menu_Tick+0xe0>)
 8006bda:	491a      	ldr	r1, [pc, #104]	@ (8006c44 <Menu_Tick+0xe4>)
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff ff0f 	bl	8006a00 <process_player>
 8006be2:	61b8      	str	r0, [r7, #24]
  int a2 = process_player(p2.dir, &nav_state_p2, &last_tick_p2);
 8006be4:	7abb      	ldrb	r3, [r7, #10]
 8006be6:	4a18      	ldr	r2, [pc, #96]	@ (8006c48 <Menu_Tick+0xe8>)
 8006be8:	4918      	ldr	r1, [pc, #96]	@ (8006c4c <Menu_Tick+0xec>)
 8006bea:	4618      	mov	r0, r3
 8006bec:	f7ff ff08 	bl	8006a00 <process_player>
 8006bf0:	6178      	str	r0, [r7, #20]

  int act = a1; if (act==0) act = a2;  // evita doble salto en un mismo frame
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d101      	bne.n	8006c00 <Menu_Tick+0xa0>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (act<0) move_selection((int)menu_idx - 1);
 8006c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da06      	bge.n	8006c14 <Menu_Tick+0xb4>
 8006c06:	4b0c      	ldr	r3, [pc, #48]	@ (8006c38 <Menu_Tick+0xd8>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f7ff feb5 	bl	800697c <move_selection>
  else if (act>0) move_selection((int)menu_idx + 1);
}
 8006c12:	e008      	b.n	8006c26 <Menu_Tick+0xc6>
  else if (act>0) move_selection((int)menu_idx + 1);
 8006c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dd05      	ble.n	8006c26 <Menu_Tick+0xc6>
 8006c1a:	4b07      	ldr	r3, [pc, #28]	@ (8006c38 <Menu_Tick+0xd8>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff feab 	bl	800697c <move_selection>
}
 8006c26:	bf00      	nop
 8006c28:	3728      	adds	r7, #40	@ 0x28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20006720 	.word	0x20006720
 8006c34:	20000044 	.word	0x20000044
 8006c38:	2000671c 	.word	0x2000671c
 8006c3c:	0804a5c0 	.word	0x0804a5c0
 8006c40:	20006714 	.word	0x20006714
 8006c44:	2000670f 	.word	0x2000670f
 8006c48:	20006718 	.word	0x20006718
 8006c4c:	20006710 	.word	0x20006710

08006c50 <Menu_GetIndex>:

int Menu_GetIndex(void) { return (int)menu_idx; }
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	4b03      	ldr	r3, [pc, #12]	@ (8006c64 <Menu_GetIndex+0x14>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	4618      	mov	r0, r3
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	2000671c 	.word	0x2000671c

08006c68 <Menu_ActionPressed>:

bool Menu_ActionPressed(void)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
  PlayerInput p1,p2; Gamepad_GetP1(&p1); Gamepad_GetP2(&p2);
 8006c6e:	f107 030c 	add.w	r3, r7, #12
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7ff fde8 	bl	8006848 <Gamepad_GetP1>
 8006c78:	1d3b      	adds	r3, r7, #4
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff fdfa 	bl	8006874 <Gamepad_GetP2>
  bool e1 = action_edge(p1.A, &prevA1);
 8006c80:	7c3b      	ldrb	r3, [r7, #16]
 8006c82:	490e      	ldr	r1, [pc, #56]	@ (8006cbc <Menu_ActionPressed+0x54>)
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff ff2a 	bl	8006ade <action_edge>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75fb      	strb	r3, [r7, #23]
  bool e2 = action_edge(p2.A, &prevA2);
 8006c8e:	7a3b      	ldrb	r3, [r7, #8]
 8006c90:	490b      	ldr	r1, [pc, #44]	@ (8006cc0 <Menu_ActionPressed+0x58>)
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff ff23 	bl	8006ade <action_edge>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	75bb      	strb	r3, [r7, #22]
  return (e1 || e2);
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d102      	bne.n	8006ca8 <Menu_ActionPressed+0x40>
 8006ca2:	7dbb      	ldrb	r3, [r7, #22]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d001      	beq.n	8006cac <Menu_ActionPressed+0x44>
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e000      	b.n	8006cae <Menu_ActionPressed+0x46>
 8006cac:	2300      	movs	r3, #0
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	b2db      	uxtb	r3, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20006724 	.word	0x20006724
 8006cc0:	20006725 	.word	0x20006725

08006cc4 <Reset_Handler>:
 8006cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006cfc <LoopFillZerobss+0xe>
 8006cc8:	f7ff fbdc 	bl	8006484 <SystemInit>
 8006ccc:	480c      	ldr	r0, [pc, #48]	@ (8006d00 <LoopFillZerobss+0x12>)
 8006cce:	490d      	ldr	r1, [pc, #52]	@ (8006d04 <LoopFillZerobss+0x16>)
 8006cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8006d08 <LoopFillZerobss+0x1a>)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e002      	b.n	8006cdc <LoopCopyDataInit>

08006cd6 <CopyDataInit>:
 8006cd6:	58d4      	ldr	r4, [r2, r3]
 8006cd8:	50c4      	str	r4, [r0, r3]
 8006cda:	3304      	adds	r3, #4

08006cdc <LoopCopyDataInit>:
 8006cdc:	18c4      	adds	r4, r0, r3
 8006cde:	428c      	cmp	r4, r1
 8006ce0:	d3f9      	bcc.n	8006cd6 <CopyDataInit>
 8006ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8006d0c <LoopFillZerobss+0x1e>)
 8006ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8006d10 <LoopFillZerobss+0x22>)
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e001      	b.n	8006cee <LoopFillZerobss>

08006cea <FillZerobss>:
 8006cea:	6013      	str	r3, [r2, #0]
 8006cec:	3204      	adds	r2, #4

08006cee <LoopFillZerobss>:
 8006cee:	42a2      	cmp	r2, r4
 8006cf0:	d3fb      	bcc.n	8006cea <FillZerobss>
 8006cf2:	f006 ffcd 	bl	800dc90 <__libc_init_array>
 8006cf6:	f7fb f96b 	bl	8001fd0 <main>
 8006cfa:	4770      	bx	lr
 8006cfc:	20020000 	.word	0x20020000
 8006d00:	20000000 	.word	0x20000000
 8006d04:	200000b4 	.word	0x200000b4
 8006d08:	0804ab88 	.word	0x0804ab88
 8006d0c:	200000b4 	.word	0x200000b4
 8006d10:	20006ab0 	.word	0x20006ab0

08006d14 <ADC_IRQHandler>:
 8006d14:	e7fe      	b.n	8006d14 <ADC_IRQHandler>
	...

08006d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006d58 <HAL_Init+0x40>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a0d      	ldr	r2, [pc, #52]	@ (8006d58 <HAL_Init+0x40>)
 8006d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006d28:	4b0b      	ldr	r3, [pc, #44]	@ (8006d58 <HAL_Init+0x40>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006d58 <HAL_Init+0x40>)
 8006d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d34:	4b08      	ldr	r3, [pc, #32]	@ (8006d58 <HAL_Init+0x40>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a07      	ldr	r2, [pc, #28]	@ (8006d58 <HAL_Init+0x40>)
 8006d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d40:	2003      	movs	r0, #3
 8006d42:	f000 f94f 	bl	8006fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d46:	200f      	movs	r0, #15
 8006d48:	f000 f808 	bl	8006d5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d4c:	f7ff f99c 	bl	8006088 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40023c00 	.word	0x40023c00

08006d5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d64:	4b12      	ldr	r3, [pc, #72]	@ (8006db0 <HAL_InitTick+0x54>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	4b12      	ldr	r3, [pc, #72]	@ (8006db4 <HAL_InitTick+0x58>)
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 f967 	bl	800704e <HAL_SYSTICK_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e00e      	b.n	8006da8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b0f      	cmp	r3, #15
 8006d8e:	d80a      	bhi.n	8006da6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d90:	2200      	movs	r2, #0
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	f000 f92f 	bl	8006ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d9c:	4a06      	ldr	r2, [pc, #24]	@ (8006db8 <HAL_InitTick+0x5c>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e000      	b.n	8006da8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3708      	adds	r7, #8
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	20000040 	.word	0x20000040
 8006db4:	2000004c 	.word	0x2000004c
 8006db8:	20000048 	.word	0x20000048

08006dbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006dc0:	4b06      	ldr	r3, [pc, #24]	@ (8006ddc <HAL_IncTick+0x20>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <HAL_IncTick+0x24>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4413      	add	r3, r2
 8006dcc:	4a04      	ldr	r2, [pc, #16]	@ (8006de0 <HAL_IncTick+0x24>)
 8006dce:	6013      	str	r3, [r2, #0]
}
 8006dd0:	bf00      	nop
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop
 8006ddc:	2000004c 	.word	0x2000004c
 8006de0:	20006728 	.word	0x20006728

08006de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006de4:	b480      	push	{r7}
 8006de6:	af00      	add	r7, sp, #0
  return uwTick;
 8006de8:	4b03      	ldr	r3, [pc, #12]	@ (8006df8 <HAL_GetTick+0x14>)
 8006dea:	681b      	ldr	r3, [r3, #0]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	20006728 	.word	0x20006728

08006dfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e04:	f7ff ffee 	bl	8006de4 <HAL_GetTick>
 8006e08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d005      	beq.n	8006e22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e16:	4b0a      	ldr	r3, [pc, #40]	@ (8006e40 <HAL_Delay+0x44>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006e22:	bf00      	nop
 8006e24:	f7ff ffde 	bl	8006de4 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d8f7      	bhi.n	8006e24 <HAL_Delay+0x28>
  {
  }
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	2000004c 	.word	0x2000004c

08006e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e54:	4b0c      	ldr	r3, [pc, #48]	@ (8006e88 <__NVIC_SetPriorityGrouping+0x44>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006e60:	4013      	ands	r3, r2
 8006e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e76:	4a04      	ldr	r2, [pc, #16]	@ (8006e88 <__NVIC_SetPriorityGrouping+0x44>)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	60d3      	str	r3, [r2, #12]
}
 8006e7c:	bf00      	nop
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	e000ed00 	.word	0xe000ed00

08006e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e90:	4b04      	ldr	r3, [pc, #16]	@ (8006ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	0a1b      	lsrs	r3, r3, #8
 8006e96:	f003 0307 	and.w	r3, r3, #7
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	e000ed00 	.word	0xe000ed00

08006ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	db0b      	blt.n	8006ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	f003 021f 	and.w	r2, r3, #31
 8006ec0:	4907      	ldr	r1, [pc, #28]	@ (8006ee0 <__NVIC_EnableIRQ+0x38>)
 8006ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	2001      	movs	r0, #1
 8006eca:	fa00 f202 	lsl.w	r2, r0, r2
 8006ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	e000e100 	.word	0xe000e100

08006ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	db0a      	blt.n	8006f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	490c      	ldr	r1, [pc, #48]	@ (8006f30 <__NVIC_SetPriority+0x4c>)
 8006efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f02:	0112      	lsls	r2, r2, #4
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	440b      	add	r3, r1
 8006f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f0c:	e00a      	b.n	8006f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4908      	ldr	r1, [pc, #32]	@ (8006f34 <__NVIC_SetPriority+0x50>)
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	3b04      	subs	r3, #4
 8006f1c:	0112      	lsls	r2, r2, #4
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	440b      	add	r3, r1
 8006f22:	761a      	strb	r2, [r3, #24]
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	e000e100 	.word	0xe000e100
 8006f34:	e000ed00 	.word	0xe000ed00

08006f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	@ 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f1c3 0307 	rsb	r3, r3, #7
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	bf28      	it	cs
 8006f56:	2304      	movcs	r3, #4
 8006f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	2b06      	cmp	r3, #6
 8006f60:	d902      	bls.n	8006f68 <NVIC_EncodePriority+0x30>
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	3b03      	subs	r3, #3
 8006f66:	e000      	b.n	8006f6a <NVIC_EncodePriority+0x32>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	fa02 f303 	lsl.w	r3, r2, r3
 8006f76:	43da      	mvns	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	401a      	ands	r2, r3
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f80:	f04f 31ff 	mov.w	r1, #4294967295
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8a:	43d9      	mvns	r1, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f90:	4313      	orrs	r3, r2
         );
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3724      	adds	r7, #36	@ 0x24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
	...

08006fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006fb0:	d301      	bcc.n	8006fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e00f      	b.n	8006fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe0 <SysTick_Config+0x40>)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fbe:	210f      	movs	r1, #15
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	f7ff ff8e 	bl	8006ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fc8:	4b05      	ldr	r3, [pc, #20]	@ (8006fe0 <SysTick_Config+0x40>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fce:	4b04      	ldr	r3, [pc, #16]	@ (8006fe0 <SysTick_Config+0x40>)
 8006fd0:	2207      	movs	r2, #7
 8006fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	e000e010 	.word	0xe000e010

08006fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff ff29 	bl	8006e44 <__NVIC_SetPriorityGrouping>
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	4603      	mov	r3, r0
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800700c:	f7ff ff3e 	bl	8006e8c <__NVIC_GetPriorityGrouping>
 8007010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	6978      	ldr	r0, [r7, #20]
 8007018:	f7ff ff8e 	bl	8006f38 <NVIC_EncodePriority>
 800701c:	4602      	mov	r2, r0
 800701e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff ff5d 	bl	8006ee4 <__NVIC_SetPriority>
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	4603      	mov	r3, r0
 800703a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800703c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff ff31 	bl	8006ea8 <__NVIC_EnableIRQ>
}
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7ff ffa2 	bl	8006fa0 <SysTick_Config>
 800705c:	4603      	mov	r3, r0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800706a:	f000 f802 	bl	8007072 <HAL_SYSTICK_Callback>
}
 800706e:	bf00      	nop
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8007072:	b480      	push	{r7}
 8007074:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8007076:	bf00      	nop
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800708c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800708e:	f7ff fea9 	bl	8006de4 <HAL_GetTick>
 8007092:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800709a:	b2db      	uxtb	r3, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d008      	beq.n	80070b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2280      	movs	r2, #128	@ 0x80
 80070a4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e052      	b.n	8007158 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0216 	bic.w	r2, r2, #22
 80070c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	695a      	ldr	r2, [r3, #20]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d103      	bne.n	80070e2 <HAL_DMA_Abort+0x62>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f022 0208 	bic.w	r2, r2, #8
 80070f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f022 0201 	bic.w	r2, r2, #1
 8007100:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007102:	e013      	b.n	800712c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007104:	f7ff fe6e 	bl	8006de4 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b05      	cmp	r3, #5
 8007110:	d90c      	bls.n	800712c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2220      	movs	r2, #32
 8007116:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2203      	movs	r2, #3
 800711c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e015      	b.n	8007158 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d1e4      	bne.n	8007104 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800713e:	223f      	movs	r2, #63	@ 0x3f
 8007140:	409a      	lsls	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007156:	2300      	movs	r3, #0
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d004      	beq.n	800717e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2280      	movs	r2, #128	@ 0x80
 8007178:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e00c      	b.n	8007198 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2205      	movs	r2, #5
 8007182:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0201 	bic.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b089      	sub	sp, #36	@ 0x24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80071ba:	2300      	movs	r3, #0
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	e165      	b.n	800748c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80071c0:	2201      	movs	r2, #1
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	4013      	ands	r3, r2
 80071d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	429a      	cmp	r2, r3
 80071da:	f040 8154 	bne.w	8007486 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	f003 0303 	and.w	r3, r3, #3
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d005      	beq.n	80071f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d130      	bne.n	8007258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	2203      	movs	r2, #3
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	43db      	mvns	r3, r3
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	4013      	ands	r3, r2
 800720c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	fa02 f303 	lsl.w	r3, r2, r3
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	4313      	orrs	r3, r2
 800721e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800722c:	2201      	movs	r2, #1
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	fa02 f303 	lsl.w	r3, r2, r3
 8007234:	43db      	mvns	r3, r3
 8007236:	69ba      	ldr	r2, [r7, #24]
 8007238:	4013      	ands	r3, r2
 800723a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	091b      	lsrs	r3, r3, #4
 8007242:	f003 0201 	and.w	r2, r3, #1
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	fa02 f303 	lsl.w	r3, r2, r3
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	4313      	orrs	r3, r2
 8007250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f003 0303 	and.w	r3, r3, #3
 8007260:	2b03      	cmp	r3, #3
 8007262:	d017      	beq.n	8007294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	2203      	movs	r2, #3
 8007270:	fa02 f303 	lsl.w	r3, r2, r3
 8007274:	43db      	mvns	r3, r3
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	4013      	ands	r3, r2
 800727a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	fa02 f303 	lsl.w	r3, r2, r3
 8007288:	69ba      	ldr	r2, [r7, #24]
 800728a:	4313      	orrs	r3, r2
 800728c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69ba      	ldr	r2, [r7, #24]
 8007292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f003 0303 	and.w	r3, r3, #3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d123      	bne.n	80072e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	08da      	lsrs	r2, r3, #3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3208      	adds	r2, #8
 80072a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	f003 0307 	and.w	r3, r3, #7
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	220f      	movs	r2, #15
 80072b8:	fa02 f303 	lsl.w	r3, r2, r3
 80072bc:	43db      	mvns	r3, r3
 80072be:	69ba      	ldr	r2, [r7, #24]
 80072c0:	4013      	ands	r3, r2
 80072c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	691a      	ldr	r2, [r3, #16]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	f003 0307 	and.w	r3, r3, #7
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	69ba      	ldr	r2, [r7, #24]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	08da      	lsrs	r2, r3, #3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	3208      	adds	r2, #8
 80072e2:	69b9      	ldr	r1, [r7, #24]
 80072e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80072ee:	69fb      	ldr	r3, [r7, #28]
 80072f0:	005b      	lsls	r3, r3, #1
 80072f2:	2203      	movs	r2, #3
 80072f4:	fa02 f303 	lsl.w	r3, r2, r3
 80072f8:	43db      	mvns	r3, r3
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	4013      	ands	r3, r2
 80072fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	f003 0203 	and.w	r2, r3, #3
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	fa02 f303 	lsl.w	r3, r2, r3
 8007310:	69ba      	ldr	r2, [r7, #24]
 8007312:	4313      	orrs	r3, r2
 8007314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 80ae 	beq.w	8007486 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	4b5d      	ldr	r3, [pc, #372]	@ (80074a4 <HAL_GPIO_Init+0x300>)
 8007330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007332:	4a5c      	ldr	r2, [pc, #368]	@ (80074a4 <HAL_GPIO_Init+0x300>)
 8007334:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007338:	6453      	str	r3, [r2, #68]	@ 0x44
 800733a:	4b5a      	ldr	r3, [pc, #360]	@ (80074a4 <HAL_GPIO_Init+0x300>)
 800733c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800733e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007346:	4a58      	ldr	r2, [pc, #352]	@ (80074a8 <HAL_GPIO_Init+0x304>)
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	089b      	lsrs	r3, r3, #2
 800734c:	3302      	adds	r3, #2
 800734e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	220f      	movs	r2, #15
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	43db      	mvns	r3, r3
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	4013      	ands	r3, r2
 8007368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a4f      	ldr	r2, [pc, #316]	@ (80074ac <HAL_GPIO_Init+0x308>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d025      	beq.n	80073be <HAL_GPIO_Init+0x21a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a4e      	ldr	r2, [pc, #312]	@ (80074b0 <HAL_GPIO_Init+0x30c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d01f      	beq.n	80073ba <HAL_GPIO_Init+0x216>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a4d      	ldr	r2, [pc, #308]	@ (80074b4 <HAL_GPIO_Init+0x310>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d019      	beq.n	80073b6 <HAL_GPIO_Init+0x212>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a4c      	ldr	r2, [pc, #304]	@ (80074b8 <HAL_GPIO_Init+0x314>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d013      	beq.n	80073b2 <HAL_GPIO_Init+0x20e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a4b      	ldr	r2, [pc, #300]	@ (80074bc <HAL_GPIO_Init+0x318>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d00d      	beq.n	80073ae <HAL_GPIO_Init+0x20a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a4a      	ldr	r2, [pc, #296]	@ (80074c0 <HAL_GPIO_Init+0x31c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d007      	beq.n	80073aa <HAL_GPIO_Init+0x206>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a49      	ldr	r2, [pc, #292]	@ (80074c4 <HAL_GPIO_Init+0x320>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d101      	bne.n	80073a6 <HAL_GPIO_Init+0x202>
 80073a2:	2306      	movs	r3, #6
 80073a4:	e00c      	b.n	80073c0 <HAL_GPIO_Init+0x21c>
 80073a6:	2307      	movs	r3, #7
 80073a8:	e00a      	b.n	80073c0 <HAL_GPIO_Init+0x21c>
 80073aa:	2305      	movs	r3, #5
 80073ac:	e008      	b.n	80073c0 <HAL_GPIO_Init+0x21c>
 80073ae:	2304      	movs	r3, #4
 80073b0:	e006      	b.n	80073c0 <HAL_GPIO_Init+0x21c>
 80073b2:	2303      	movs	r3, #3
 80073b4:	e004      	b.n	80073c0 <HAL_GPIO_Init+0x21c>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e002      	b.n	80073c0 <HAL_GPIO_Init+0x21c>
 80073ba:	2301      	movs	r3, #1
 80073bc:	e000      	b.n	80073c0 <HAL_GPIO_Init+0x21c>
 80073be:	2300      	movs	r3, #0
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	f002 0203 	and.w	r2, r2, #3
 80073c6:	0092      	lsls	r2, r2, #2
 80073c8:	4093      	lsls	r3, r2
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073d0:	4935      	ldr	r1, [pc, #212]	@ (80074a8 <HAL_GPIO_Init+0x304>)
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	089b      	lsrs	r3, r3, #2
 80073d6:	3302      	adds	r3, #2
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80073de:	4b3a      	ldr	r3, [pc, #232]	@ (80074c8 <HAL_GPIO_Init+0x324>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	43db      	mvns	r3, r3
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	4013      	ands	r3, r2
 80073ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007402:	4a31      	ldr	r2, [pc, #196]	@ (80074c8 <HAL_GPIO_Init+0x324>)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007408:	4b2f      	ldr	r3, [pc, #188]	@ (80074c8 <HAL_GPIO_Init+0x324>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	43db      	mvns	r3, r3
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	4013      	ands	r3, r2
 8007416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d003      	beq.n	800742c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	4313      	orrs	r3, r2
 800742a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800742c:	4a26      	ldr	r2, [pc, #152]	@ (80074c8 <HAL_GPIO_Init+0x324>)
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007432:	4b25      	ldr	r3, [pc, #148]	@ (80074c8 <HAL_GPIO_Init+0x324>)
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	43db      	mvns	r3, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	4013      	ands	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800744e:	69ba      	ldr	r2, [r7, #24]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4313      	orrs	r3, r2
 8007454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007456:	4a1c      	ldr	r2, [pc, #112]	@ (80074c8 <HAL_GPIO_Init+0x324>)
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800745c:	4b1a      	ldr	r3, [pc, #104]	@ (80074c8 <HAL_GPIO_Init+0x324>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	43db      	mvns	r3, r3
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	4013      	ands	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007480:	4a11      	ldr	r2, [pc, #68]	@ (80074c8 <HAL_GPIO_Init+0x324>)
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	3301      	adds	r3, #1
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	f67f ae96 	bls.w	80071c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	3724      	adds	r7, #36	@ 0x24
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40023800 	.word	0x40023800
 80074a8:	40013800 	.word	0x40013800
 80074ac:	40020000 	.word	0x40020000
 80074b0:	40020400 	.word	0x40020400
 80074b4:	40020800 	.word	0x40020800
 80074b8:	40020c00 	.word	0x40020c00
 80074bc:	40021000 	.word	0x40021000
 80074c0:	40021400 	.word	0x40021400
 80074c4:	40021800 	.word	0x40021800
 80074c8:	40013c00 	.word	0x40013c00

080074cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	807b      	strh	r3, [r7, #2]
 80074d8:	4613      	mov	r3, r2
 80074da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074dc:	787b      	ldrb	r3, [r7, #1]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d003      	beq.n	80074ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074e2:	887a      	ldrh	r2, [r7, #2]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074e8:	e003      	b.n	80074f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074ea:	887b      	ldrh	r3, [r7, #2]
 80074ec:	041a      	lsls	r2, r3, #16
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	619a      	str	r2, [r3, #24]
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
	...

08007500 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e0cc      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007514:	4b68      	ldr	r3, [pc, #416]	@ (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d90c      	bls.n	800753c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007522:	4b65      	ldr	r3, [pc, #404]	@ (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	b2d2      	uxtb	r2, r2
 8007528:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800752a:	4b63      	ldr	r3, [pc, #396]	@ (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 030f 	and.w	r3, r3, #15
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	429a      	cmp	r2, r3
 8007536:	d001      	beq.n	800753c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e0b8      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0302 	and.w	r3, r3, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	d020      	beq.n	800758a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007554:	4b59      	ldr	r3, [pc, #356]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	4a58      	ldr	r2, [pc, #352]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 800755a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800755e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d005      	beq.n	8007578 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800756c:	4b53      	ldr	r3, [pc, #332]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	4a52      	ldr	r2, [pc, #328]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007576:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007578:	4b50      	ldr	r3, [pc, #320]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	494d      	ldr	r1, [pc, #308]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007586:	4313      	orrs	r3, r2
 8007588:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d044      	beq.n	8007620 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d107      	bne.n	80075ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800759e:	4b47      	ldr	r3, [pc, #284]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d119      	bne.n	80075de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e07f      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b02      	cmp	r3, #2
 80075b4:	d003      	beq.n	80075be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d107      	bne.n	80075ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80075be:	4b3f      	ldr	r3, [pc, #252]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d109      	bne.n	80075de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e06f      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075ce:	4b3b      	ldr	r3, [pc, #236]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075da:	2301      	movs	r3, #1
 80075dc:	e067      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075de:	4b37      	ldr	r3, [pc, #220]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f023 0203 	bic.w	r2, r3, #3
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	4934      	ldr	r1, [pc, #208]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 80075ec:	4313      	orrs	r3, r2
 80075ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075f0:	f7ff fbf8 	bl	8006de4 <HAL_GetTick>
 80075f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075f6:	e00a      	b.n	800760e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075f8:	f7ff fbf4 	bl	8006de4 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007606:	4293      	cmp	r3, r2
 8007608:	d901      	bls.n	800760e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e04f      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800760e:	4b2b      	ldr	r3, [pc, #172]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 020c 	and.w	r2, r3, #12
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	429a      	cmp	r2, r3
 800761e:	d1eb      	bne.n	80075f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007620:	4b25      	ldr	r3, [pc, #148]	@ (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 030f 	and.w	r3, r3, #15
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d20c      	bcs.n	8007648 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800762e:	4b22      	ldr	r3, [pc, #136]	@ (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	b2d2      	uxtb	r2, r2
 8007634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007636:	4b20      	ldr	r3, [pc, #128]	@ (80076b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 030f 	and.w	r3, r3, #15
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d001      	beq.n	8007648 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e032      	b.n	80076ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d008      	beq.n	8007666 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007654:	4b19      	ldr	r3, [pc, #100]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4916      	ldr	r1, [pc, #88]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007662:	4313      	orrs	r3, r2
 8007664:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0308 	and.w	r3, r3, #8
 800766e:	2b00      	cmp	r3, #0
 8007670:	d009      	beq.n	8007686 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007672:	4b12      	ldr	r3, [pc, #72]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	490e      	ldr	r1, [pc, #56]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 8007682:	4313      	orrs	r3, r2
 8007684:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007686:	f000 f855 	bl	8007734 <HAL_RCC_GetSysClockFreq>
 800768a:	4602      	mov	r2, r0
 800768c:	4b0b      	ldr	r3, [pc, #44]	@ (80076bc <HAL_RCC_ClockConfig+0x1bc>)
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	091b      	lsrs	r3, r3, #4
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	490a      	ldr	r1, [pc, #40]	@ (80076c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007698:	5ccb      	ldrb	r3, [r1, r3]
 800769a:	fa22 f303 	lsr.w	r3, r2, r3
 800769e:	4a09      	ldr	r2, [pc, #36]	@ (80076c4 <HAL_RCC_ClockConfig+0x1c4>)
 80076a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80076a2:	4b09      	ldr	r3, [pc, #36]	@ (80076c8 <HAL_RCC_ClockConfig+0x1c8>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7ff fb58 	bl	8006d5c <HAL_InitTick>

  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40023c00 	.word	0x40023c00
 80076bc:	40023800 	.word	0x40023800
 80076c0:	0804a5a8 	.word	0x0804a5a8
 80076c4:	20000040 	.word	0x20000040
 80076c8:	20000048 	.word	0x20000048

080076cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076d0:	4b03      	ldr	r3, [pc, #12]	@ (80076e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80076d2:	681b      	ldr	r3, [r3, #0]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr
 80076de:	bf00      	nop
 80076e0:	20000040 	.word	0x20000040

080076e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80076e8:	f7ff fff0 	bl	80076cc <HAL_RCC_GetHCLKFreq>
 80076ec:	4602      	mov	r2, r0
 80076ee:	4b05      	ldr	r3, [pc, #20]	@ (8007704 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	0a9b      	lsrs	r3, r3, #10
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	4903      	ldr	r1, [pc, #12]	@ (8007708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076fa:	5ccb      	ldrb	r3, [r1, r3]
 80076fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007700:	4618      	mov	r0, r3
 8007702:	bd80      	pop	{r7, pc}
 8007704:	40023800 	.word	0x40023800
 8007708:	0804a5b8 	.word	0x0804a5b8

0800770c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007710:	f7ff ffdc 	bl	80076cc <HAL_RCC_GetHCLKFreq>
 8007714:	4602      	mov	r2, r0
 8007716:	4b05      	ldr	r3, [pc, #20]	@ (800772c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007718:	689b      	ldr	r3, [r3, #8]
 800771a:	0b5b      	lsrs	r3, r3, #13
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	4903      	ldr	r1, [pc, #12]	@ (8007730 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007722:	5ccb      	ldrb	r3, [r1, r3]
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007728:	4618      	mov	r0, r3
 800772a:	bd80      	pop	{r7, pc}
 800772c:	40023800 	.word	0x40023800
 8007730:	0804a5b8 	.word	0x0804a5b8

08007734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007738:	b0a6      	sub	sp, #152	@ 0x98
 800773a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800773c:	2300      	movs	r3, #0
 800773e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8007742:	2300      	movs	r3, #0
 8007744:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800775a:	4bc8      	ldr	r3, [pc, #800]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 030c 	and.w	r3, r3, #12
 8007762:	2b0c      	cmp	r3, #12
 8007764:	f200 817e 	bhi.w	8007a64 <HAL_RCC_GetSysClockFreq+0x330>
 8007768:	a201      	add	r2, pc, #4	@ (adr r2, 8007770 <HAL_RCC_GetSysClockFreq+0x3c>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	080077a5 	.word	0x080077a5
 8007774:	08007a65 	.word	0x08007a65
 8007778:	08007a65 	.word	0x08007a65
 800777c:	08007a65 	.word	0x08007a65
 8007780:	080077ad 	.word	0x080077ad
 8007784:	08007a65 	.word	0x08007a65
 8007788:	08007a65 	.word	0x08007a65
 800778c:	08007a65 	.word	0x08007a65
 8007790:	080077b5 	.word	0x080077b5
 8007794:	08007a65 	.word	0x08007a65
 8007798:	08007a65 	.word	0x08007a65
 800779c:	08007a65 	.word	0x08007a65
 80077a0:	0800791f 	.word	0x0800791f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077a4:	4bb6      	ldr	r3, [pc, #728]	@ (8007a80 <HAL_RCC_GetSysClockFreq+0x34c>)
 80077a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80077aa:	e15f      	b.n	8007a6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077ac:	4bb5      	ldr	r3, [pc, #724]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0x350>)
 80077ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80077b2:	e15b      	b.n	8007a6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077b4:	4bb1      	ldr	r3, [pc, #708]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077c0:	4bae      	ldr	r3, [pc, #696]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d031      	beq.n	8007830 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077cc:	4bab      	ldr	r3, [pc, #684]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	099b      	lsrs	r3, r3, #6
 80077d2:	2200      	movs	r2, #0
 80077d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077de:	663b      	str	r3, [r7, #96]	@ 0x60
 80077e0:	2300      	movs	r3, #0
 80077e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80077e4:	4ba7      	ldr	r3, [pc, #668]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0x350>)
 80077e6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80077ea:	462a      	mov	r2, r5
 80077ec:	fb03 f202 	mul.w	r2, r3, r2
 80077f0:	2300      	movs	r3, #0
 80077f2:	4621      	mov	r1, r4
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	4aa2      	ldr	r2, [pc, #648]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0x350>)
 80077fc:	4621      	mov	r1, r4
 80077fe:	fba1 1202 	umull	r1, r2, r1, r2
 8007802:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007804:	460a      	mov	r2, r1
 8007806:	67ba      	str	r2, [r7, #120]	@ 0x78
 8007808:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800780a:	4413      	add	r3, r2
 800780c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800780e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007812:	2200      	movs	r2, #0
 8007814:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007816:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8007818:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800781c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007820:	f7f8 fd9e 	bl	8000360 <__aeabi_uldivmod>
 8007824:	4602      	mov	r2, r0
 8007826:	460b      	mov	r3, r1
 8007828:	4613      	mov	r3, r2
 800782a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800782e:	e064      	b.n	80078fa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007830:	4b92      	ldr	r3, [pc, #584]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	099b      	lsrs	r3, r3, #6
 8007836:	2200      	movs	r2, #0
 8007838:	653b      	str	r3, [r7, #80]	@ 0x50
 800783a:	657a      	str	r2, [r7, #84]	@ 0x54
 800783c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800783e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007844:	2300      	movs	r3, #0
 8007846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007848:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800784c:	4622      	mov	r2, r4
 800784e:	462b      	mov	r3, r5
 8007850:	f04f 0000 	mov.w	r0, #0
 8007854:	f04f 0100 	mov.w	r1, #0
 8007858:	0159      	lsls	r1, r3, #5
 800785a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800785e:	0150      	lsls	r0, r2, #5
 8007860:	4602      	mov	r2, r0
 8007862:	460b      	mov	r3, r1
 8007864:	4621      	mov	r1, r4
 8007866:	1a51      	subs	r1, r2, r1
 8007868:	6139      	str	r1, [r7, #16]
 800786a:	4629      	mov	r1, r5
 800786c:	eb63 0301 	sbc.w	r3, r3, r1
 8007870:	617b      	str	r3, [r7, #20]
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	f04f 0300 	mov.w	r3, #0
 800787a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800787e:	4659      	mov	r1, fp
 8007880:	018b      	lsls	r3, r1, #6
 8007882:	4651      	mov	r1, sl
 8007884:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007888:	4651      	mov	r1, sl
 800788a:	018a      	lsls	r2, r1, #6
 800788c:	4651      	mov	r1, sl
 800788e:	ebb2 0801 	subs.w	r8, r2, r1
 8007892:	4659      	mov	r1, fp
 8007894:	eb63 0901 	sbc.w	r9, r3, r1
 8007898:	f04f 0200 	mov.w	r2, #0
 800789c:	f04f 0300 	mov.w	r3, #0
 80078a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078ac:	4690      	mov	r8, r2
 80078ae:	4699      	mov	r9, r3
 80078b0:	4623      	mov	r3, r4
 80078b2:	eb18 0303 	adds.w	r3, r8, r3
 80078b6:	60bb      	str	r3, [r7, #8]
 80078b8:	462b      	mov	r3, r5
 80078ba:	eb49 0303 	adc.w	r3, r9, r3
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	f04f 0200 	mov.w	r2, #0
 80078c4:	f04f 0300 	mov.w	r3, #0
 80078c8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80078cc:	4629      	mov	r1, r5
 80078ce:	028b      	lsls	r3, r1, #10
 80078d0:	4621      	mov	r1, r4
 80078d2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078d6:	4621      	mov	r1, r4
 80078d8:	028a      	lsls	r2, r1, #10
 80078da:	4610      	mov	r0, r2
 80078dc:	4619      	mov	r1, r3
 80078de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078e2:	2200      	movs	r2, #0
 80078e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80078e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80078e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078ec:	f7f8 fd38 	bl	8000360 <__aeabi_uldivmod>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4613      	mov	r3, r2
 80078f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80078fa:	4b60      	ldr	r3, [pc, #384]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	0c1b      	lsrs	r3, r3, #16
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	3301      	adds	r3, #1
 8007906:	005b      	lsls	r3, r3, #1
 8007908:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800790c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007910:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007914:	fbb2 f3f3 	udiv	r3, r2, r3
 8007918:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800791c:	e0a6      	b.n	8007a6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800791e:	4b57      	ldr	r3, [pc, #348]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007926:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800792a:	4b54      	ldr	r3, [pc, #336]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d02a      	beq.n	800798c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007936:	4b51      	ldr	r3, [pc, #324]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	099b      	lsrs	r3, r3, #6
 800793c:	2200      	movs	r2, #0
 800793e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007940:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007944:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007948:	2100      	movs	r1, #0
 800794a:	4b4e      	ldr	r3, [pc, #312]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0x350>)
 800794c:	fb03 f201 	mul.w	r2, r3, r1
 8007950:	2300      	movs	r3, #0
 8007952:	fb00 f303 	mul.w	r3, r0, r3
 8007956:	4413      	add	r3, r2
 8007958:	4a4a      	ldr	r2, [pc, #296]	@ (8007a84 <HAL_RCC_GetSysClockFreq+0x350>)
 800795a:	fba0 1202 	umull	r1, r2, r0, r2
 800795e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007960:	460a      	mov	r2, r1
 8007962:	673a      	str	r2, [r7, #112]	@ 0x70
 8007964:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007966:	4413      	add	r3, r2
 8007968:	677b      	str	r3, [r7, #116]	@ 0x74
 800796a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800796e:	2200      	movs	r2, #0
 8007970:	633b      	str	r3, [r7, #48]	@ 0x30
 8007972:	637a      	str	r2, [r7, #52]	@ 0x34
 8007974:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007978:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800797c:	f7f8 fcf0 	bl	8000360 <__aeabi_uldivmod>
 8007980:	4602      	mov	r2, r0
 8007982:	460b      	mov	r3, r1
 8007984:	4613      	mov	r3, r2
 8007986:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800798a:	e05b      	b.n	8007a44 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800798c:	4b3b      	ldr	r3, [pc, #236]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	099b      	lsrs	r3, r3, #6
 8007992:	2200      	movs	r2, #0
 8007994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007996:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799e:	623b      	str	r3, [r7, #32]
 80079a0:	2300      	movs	r3, #0
 80079a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80079a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079a8:	4642      	mov	r2, r8
 80079aa:	464b      	mov	r3, r9
 80079ac:	f04f 0000 	mov.w	r0, #0
 80079b0:	f04f 0100 	mov.w	r1, #0
 80079b4:	0159      	lsls	r1, r3, #5
 80079b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80079ba:	0150      	lsls	r0, r2, #5
 80079bc:	4602      	mov	r2, r0
 80079be:	460b      	mov	r3, r1
 80079c0:	4641      	mov	r1, r8
 80079c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80079c6:	4649      	mov	r1, r9
 80079c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	f04f 0300 	mov.w	r3, #0
 80079d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80079d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80079dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80079e0:	ebb2 040a 	subs.w	r4, r2, sl
 80079e4:	eb63 050b 	sbc.w	r5, r3, fp
 80079e8:	f04f 0200 	mov.w	r2, #0
 80079ec:	f04f 0300 	mov.w	r3, #0
 80079f0:	00eb      	lsls	r3, r5, #3
 80079f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079f6:	00e2      	lsls	r2, r4, #3
 80079f8:	4614      	mov	r4, r2
 80079fa:	461d      	mov	r5, r3
 80079fc:	4643      	mov	r3, r8
 80079fe:	18e3      	adds	r3, r4, r3
 8007a00:	603b      	str	r3, [r7, #0]
 8007a02:	464b      	mov	r3, r9
 8007a04:	eb45 0303 	adc.w	r3, r5, r3
 8007a08:	607b      	str	r3, [r7, #4]
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007a16:	4629      	mov	r1, r5
 8007a18:	028b      	lsls	r3, r1, #10
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007a20:	4621      	mov	r1, r4
 8007a22:	028a      	lsls	r2, r1, #10
 8007a24:	4610      	mov	r0, r2
 8007a26:	4619      	mov	r1, r3
 8007a28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	61bb      	str	r3, [r7, #24]
 8007a30:	61fa      	str	r2, [r7, #28]
 8007a32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a36:	f7f8 fc93 	bl	8000360 <__aeabi_uldivmod>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4613      	mov	r3, r2
 8007a40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007a44:	4b0d      	ldr	r3, [pc, #52]	@ (8007a7c <HAL_RCC_GetSysClockFreq+0x348>)
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	0f1b      	lsrs	r3, r3, #28
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8007a52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007a62:	e003      	b.n	8007a6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007a64:	4b06      	ldr	r3, [pc, #24]	@ (8007a80 <HAL_RCC_GetSysClockFreq+0x34c>)
 8007a66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8007a6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007a6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3798      	adds	r7, #152	@ 0x98
 8007a74:	46bd      	mov	sp, r7
 8007a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40023800 	.word	0x40023800
 8007a80:	00f42400 	.word	0x00f42400
 8007a84:	017d7840 	.word	0x017d7840

08007a88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b086      	sub	sp, #24
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e28d      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8083 	beq.w	8007bae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007aa8:	4b94      	ldr	r3, [pc, #592]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	f003 030c 	and.w	r3, r3, #12
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d019      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007ab4:	4b91      	ldr	r3, [pc, #580]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f003 030c 	and.w	r3, r3, #12
        || \
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d106      	bne.n	8007ace <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007ac0:	4b8e      	ldr	r3, [pc, #568]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ac8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007acc:	d00c      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ace:	4b8b      	ldr	r3, [pc, #556]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8007ad6:	2b0c      	cmp	r3, #12
 8007ad8:	d112      	bne.n	8007b00 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ada:	4b88      	ldr	r3, [pc, #544]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ae2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ae6:	d10b      	bne.n	8007b00 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae8:	4b84      	ldr	r3, [pc, #528]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d05b      	beq.n	8007bac <HAL_RCC_OscConfig+0x124>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d157      	bne.n	8007bac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e25a      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b08:	d106      	bne.n	8007b18 <HAL_RCC_OscConfig+0x90>
 8007b0a:	4b7c      	ldr	r3, [pc, #496]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a7b      	ldr	r2, [pc, #492]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	e01d      	b.n	8007b54 <HAL_RCC_OscConfig+0xcc>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCC_OscConfig+0xb4>
 8007b22:	4b76      	ldr	r3, [pc, #472]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a75      	ldr	r2, [pc, #468]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	4b73      	ldr	r3, [pc, #460]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a72      	ldr	r2, [pc, #456]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e00b      	b.n	8007b54 <HAL_RCC_OscConfig+0xcc>
 8007b3c:	4b6f      	ldr	r3, [pc, #444]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a6e      	ldr	r2, [pc, #440]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	4b6c      	ldr	r3, [pc, #432]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a6b      	ldr	r2, [pc, #428]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d013      	beq.n	8007b84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b5c:	f7ff f942 	bl	8006de4 <HAL_GetTick>
 8007b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b62:	e008      	b.n	8007b76 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b64:	f7ff f93e 	bl	8006de4 <HAL_GetTick>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	1ad3      	subs	r3, r2, r3
 8007b6e:	2b64      	cmp	r3, #100	@ 0x64
 8007b70:	d901      	bls.n	8007b76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	e21f      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b76:	4b61      	ldr	r3, [pc, #388]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d0f0      	beq.n	8007b64 <HAL_RCC_OscConfig+0xdc>
 8007b82:	e014      	b.n	8007bae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b84:	f7ff f92e 	bl	8006de4 <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b8c:	f7ff f92a 	bl	8006de4 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b64      	cmp	r3, #100	@ 0x64
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e20b      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b9e:	4b57      	ldr	r3, [pc, #348]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f0      	bne.n	8007b8c <HAL_RCC_OscConfig+0x104>
 8007baa:	e000      	b.n	8007bae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d06f      	beq.n	8007c9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007bba:	4b50      	ldr	r3, [pc, #320]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f003 030c 	and.w	r3, r3, #12
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d017      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f003 030c 	and.w	r3, r3, #12
        || \
 8007bce:	2b08      	cmp	r3, #8
 8007bd0:	d105      	bne.n	8007bde <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bde:	4b47      	ldr	r3, [pc, #284]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8007be6:	2b0c      	cmp	r3, #12
 8007be8:	d11c      	bne.n	8007c24 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bea:	4b44      	ldr	r3, [pc, #272]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d116      	bne.n	8007c24 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bf6:	4b41      	ldr	r3, [pc, #260]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0302 	and.w	r3, r3, #2
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d005      	beq.n	8007c0e <HAL_RCC_OscConfig+0x186>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d001      	beq.n	8007c0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e1d3      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	00db      	lsls	r3, r3, #3
 8007c1c:	4937      	ldr	r1, [pc, #220]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c22:	e03a      	b.n	8007c9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d020      	beq.n	8007c6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c2c:	4b34      	ldr	r3, [pc, #208]	@ (8007d00 <HAL_RCC_OscConfig+0x278>)
 8007c2e:	2201      	movs	r2, #1
 8007c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c32:	f7ff f8d7 	bl	8006de4 <HAL_GetTick>
 8007c36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c38:	e008      	b.n	8007c4c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c3a:	f7ff f8d3 	bl	8006de4 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e1b4      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0302 	and.w	r3, r3, #2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0f0      	beq.n	8007c3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c58:	4b28      	ldr	r3, [pc, #160]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	4925      	ldr	r1, [pc, #148]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	600b      	str	r3, [r1, #0]
 8007c6c:	e015      	b.n	8007c9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c6e:	4b24      	ldr	r3, [pc, #144]	@ (8007d00 <HAL_RCC_OscConfig+0x278>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c74:	f7ff f8b6 	bl	8006de4 <HAL_GetTick>
 8007c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c7a:	e008      	b.n	8007c8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c7c:	f7ff f8b2 	bl	8006de4 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d901      	bls.n	8007c8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e193      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1f0      	bne.n	8007c7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d036      	beq.n	8007d14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d016      	beq.n	8007cdc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cae:	4b15      	ldr	r3, [pc, #84]	@ (8007d04 <HAL_RCC_OscConfig+0x27c>)
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cb4:	f7ff f896 	bl	8006de4 <HAL_GetTick>
 8007cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cbc:	f7ff f892 	bl	8006de4 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e173      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cce:	4b0b      	ldr	r3, [pc, #44]	@ (8007cfc <HAL_RCC_OscConfig+0x274>)
 8007cd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d0f0      	beq.n	8007cbc <HAL_RCC_OscConfig+0x234>
 8007cda:	e01b      	b.n	8007d14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cdc:	4b09      	ldr	r3, [pc, #36]	@ (8007d04 <HAL_RCC_OscConfig+0x27c>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce2:	f7ff f87f 	bl	8006de4 <HAL_GetTick>
 8007ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ce8:	e00e      	b.n	8007d08 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cea:	f7ff f87b 	bl	8006de4 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d907      	bls.n	8007d08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e15c      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
 8007cfc:	40023800 	.word	0x40023800
 8007d00:	42470000 	.word	0x42470000
 8007d04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d08:	4b8a      	ldr	r3, [pc, #552]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007d0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1ea      	bne.n	8007cea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 8097 	beq.w	8007e50 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d22:	2300      	movs	r3, #0
 8007d24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d26:	4b83      	ldr	r3, [pc, #524]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10f      	bne.n	8007d52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d32:	2300      	movs	r3, #0
 8007d34:	60bb      	str	r3, [r7, #8]
 8007d36:	4b7f      	ldr	r3, [pc, #508]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d42:	4b7c      	ldr	r3, [pc, #496]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d4a:	60bb      	str	r3, [r7, #8]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d52:	4b79      	ldr	r3, [pc, #484]	@ (8007f38 <HAL_RCC_OscConfig+0x4b0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d118      	bne.n	8007d90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d5e:	4b76      	ldr	r3, [pc, #472]	@ (8007f38 <HAL_RCC_OscConfig+0x4b0>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a75      	ldr	r2, [pc, #468]	@ (8007f38 <HAL_RCC_OscConfig+0x4b0>)
 8007d64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d6a:	f7ff f83b 	bl	8006de4 <HAL_GetTick>
 8007d6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d70:	e008      	b.n	8007d84 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d72:	f7ff f837 	bl	8006de4 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d901      	bls.n	8007d84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e118      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d84:	4b6c      	ldr	r3, [pc, #432]	@ (8007f38 <HAL_RCC_OscConfig+0x4b0>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0f0      	beq.n	8007d72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d106      	bne.n	8007da6 <HAL_RCC_OscConfig+0x31e>
 8007d98:	4b66      	ldr	r3, [pc, #408]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d9c:	4a65      	ldr	r2, [pc, #404]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007d9e:	f043 0301 	orr.w	r3, r3, #1
 8007da2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007da4:	e01c      	b.n	8007de0 <HAL_RCC_OscConfig+0x358>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b05      	cmp	r3, #5
 8007dac:	d10c      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x340>
 8007dae:	4b61      	ldr	r3, [pc, #388]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db2:	4a60      	ldr	r2, [pc, #384]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007db4:	f043 0304 	orr.w	r3, r3, #4
 8007db8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dba:	4b5e      	ldr	r3, [pc, #376]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dbe:	4a5d      	ldr	r2, [pc, #372]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007dc0:	f043 0301 	orr.w	r3, r3, #1
 8007dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dc6:	e00b      	b.n	8007de0 <HAL_RCC_OscConfig+0x358>
 8007dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dcc:	4a59      	ldr	r2, [pc, #356]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007dce:	f023 0301 	bic.w	r3, r3, #1
 8007dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dd4:	4b57      	ldr	r3, [pc, #348]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dd8:	4a56      	ldr	r2, [pc, #344]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007dda:	f023 0304 	bic.w	r3, r3, #4
 8007dde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d015      	beq.n	8007e14 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de8:	f7fe fffc 	bl	8006de4 <HAL_GetTick>
 8007dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dee:	e00a      	b.n	8007e06 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007df0:	f7fe fff8 	bl	8006de4 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e0d7      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e06:	4b4b      	ldr	r3, [pc, #300]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007e08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0ee      	beq.n	8007df0 <HAL_RCC_OscConfig+0x368>
 8007e12:	e014      	b.n	8007e3e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e14:	f7fe ffe6 	bl	8006de4 <HAL_GetTick>
 8007e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e1a:	e00a      	b.n	8007e32 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e1c:	f7fe ffe2 	bl	8006de4 <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e0c1      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e32:	4b40      	ldr	r3, [pc, #256]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1ee      	bne.n	8007e1c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d105      	bne.n	8007e50 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e44:	4b3b      	ldr	r3, [pc, #236]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e48:	4a3a      	ldr	r2, [pc, #232]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f000 80ad 	beq.w	8007fb4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e5a:	4b36      	ldr	r3, [pc, #216]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f003 030c 	and.w	r3, r3, #12
 8007e62:	2b08      	cmp	r3, #8
 8007e64:	d060      	beq.n	8007f28 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d145      	bne.n	8007efa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e6e:	4b33      	ldr	r3, [pc, #204]	@ (8007f3c <HAL_RCC_OscConfig+0x4b4>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e74:	f7fe ffb6 	bl	8006de4 <HAL_GetTick>
 8007e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e7a:	e008      	b.n	8007e8e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e7c:	f7fe ffb2 	bl	8006de4 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d901      	bls.n	8007e8e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	e093      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e8e:	4b29      	ldr	r3, [pc, #164]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d1f0      	bne.n	8007e7c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69da      	ldr	r2, [r3, #28]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6a1b      	ldr	r3, [r3, #32]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea8:	019b      	lsls	r3, r3, #6
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eb0:	085b      	lsrs	r3, r3, #1
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	041b      	lsls	r3, r3, #16
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebc:	061b      	lsls	r3, r3, #24
 8007ebe:	431a      	orrs	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec4:	071b      	lsls	r3, r3, #28
 8007ec6:	491b      	ldr	r1, [pc, #108]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8007f3c <HAL_RCC_OscConfig+0x4b4>)
 8007ece:	2201      	movs	r2, #1
 8007ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed2:	f7fe ff87 	bl	8006de4 <HAL_GetTick>
 8007ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eda:	f7fe ff83 	bl	8006de4 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e064      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eec:	4b11      	ldr	r3, [pc, #68]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0f0      	beq.n	8007eda <HAL_RCC_OscConfig+0x452>
 8007ef8:	e05c      	b.n	8007fb4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007efa:	4b10      	ldr	r3, [pc, #64]	@ (8007f3c <HAL_RCC_OscConfig+0x4b4>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f00:	f7fe ff70 	bl	8006de4 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f06:	e008      	b.n	8007f1a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f08:	f7fe ff6c 	bl	8006de4 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e04d      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f1a:	4b06      	ldr	r3, [pc, #24]	@ (8007f34 <HAL_RCC_OscConfig+0x4ac>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1f0      	bne.n	8007f08 <HAL_RCC_OscConfig+0x480>
 8007f26:	e045      	b.n	8007fb4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	2b01      	cmp	r3, #1
 8007f2e:	d107      	bne.n	8007f40 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e040      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
 8007f34:	40023800 	.word	0x40023800
 8007f38:	40007000 	.word	0x40007000
 8007f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f40:	4b1f      	ldr	r3, [pc, #124]	@ (8007fc0 <HAL_RCC_OscConfig+0x538>)
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d030      	beq.n	8007fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f58:	429a      	cmp	r2, r3
 8007f5a:	d129      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d122      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007f70:	4013      	ands	r3, r2
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d119      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d10f      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d107      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007faa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d001      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e000      	b.n	8007fb6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8007fb4:	2300      	movs	r3, #0
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	3718      	adds	r7, #24
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	40023800 	.word	0x40023800

08007fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e07b      	b.n	80080ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d108      	bne.n	8007ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fe6:	d009      	beq.n	8007ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	61da      	str	r2, [r3, #28]
 8007fee:	e005      	b.n	8007ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008008:	b2db      	uxtb	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d106      	bne.n	800801c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7fe f85e 	bl	80060d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2202      	movs	r2, #2
 8008020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008032:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f003 0302 	and.w	r3, r3, #2
 8008058:	431a      	orrs	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	431a      	orrs	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800806c:	431a      	orrs	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69db      	ldr	r3, [r3, #28]
 8008072:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008076:	431a      	orrs	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008080:	ea42 0103 	orr.w	r1, r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008088:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	430a      	orrs	r2, r1
 8008092:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	0c1b      	lsrs	r3, r3, #16
 800809a:	f003 0104 	and.w	r1, r3, #4
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a2:	f003 0210 	and.w	r2, r3, #16
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	69da      	ldr	r2, [r3, #28]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b088      	sub	sp, #32
 80080da:	af00      	add	r7, sp, #0
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	603b      	str	r3, [r7, #0]
 80080e2:	4613      	mov	r3, r2
 80080e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080e6:	f7fe fe7d 	bl	8006de4 <HAL_GetTick>
 80080ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d001      	beq.n	8008100 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80080fc:	2302      	movs	r3, #2
 80080fe:	e12a      	b.n	8008356 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d002      	beq.n	800810c <HAL_SPI_Transmit+0x36>
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e122      	b.n	8008356 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008116:	2b01      	cmp	r3, #1
 8008118:	d101      	bne.n	800811e <HAL_SPI_Transmit+0x48>
 800811a:	2302      	movs	r3, #2
 800811c:	e11b      	b.n	8008356 <HAL_SPI_Transmit+0x280>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2203      	movs	r2, #3
 800812a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2200      	movs	r2, #0
 8008132:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	88fa      	ldrh	r2, [r7, #6]
 800813e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	88fa      	ldrh	r2, [r7, #6]
 8008144:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2200      	movs	r2, #0
 8008156:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800816c:	d10f      	bne.n	800818e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800817c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800818c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008198:	2b40      	cmp	r3, #64	@ 0x40
 800819a:	d007      	beq.n	80081ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081b4:	d152      	bne.n	800825c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <HAL_SPI_Transmit+0xee>
 80081be:	8b7b      	ldrh	r3, [r7, #26]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d145      	bne.n	8008250 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081c8:	881a      	ldrh	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d4:	1c9a      	adds	r2, r3, #2
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80081de:	b29b      	uxth	r3, r3
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80081e8:	e032      	b.n	8008250 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	d112      	bne.n	800821e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081fc:	881a      	ldrh	r2, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008208:	1c9a      	adds	r2, r3, #2
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008212:	b29b      	uxth	r3, r3
 8008214:	3b01      	subs	r3, #1
 8008216:	b29a      	uxth	r2, r3
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800821c:	e018      	b.n	8008250 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800821e:	f7fe fde1 	bl	8006de4 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	683a      	ldr	r2, [r7, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d803      	bhi.n	8008236 <HAL_SPI_Transmit+0x160>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008234:	d102      	bne.n	800823c <HAL_SPI_Transmit+0x166>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d109      	bne.n	8008250 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800824c:	2303      	movs	r3, #3
 800824e:	e082      	b.n	8008356 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008254:	b29b      	uxth	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1c7      	bne.n	80081ea <HAL_SPI_Transmit+0x114>
 800825a:	e053      	b.n	8008304 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d002      	beq.n	800826a <HAL_SPI_Transmit+0x194>
 8008264:	8b7b      	ldrh	r3, [r7, #26]
 8008266:	2b01      	cmp	r3, #1
 8008268:	d147      	bne.n	80082fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	330c      	adds	r3, #12
 8008274:	7812      	ldrb	r2, [r2, #0]
 8008276:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008286:	b29b      	uxth	r3, r3
 8008288:	3b01      	subs	r3, #1
 800828a:	b29a      	uxth	r2, r3
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008290:	e033      	b.n	80082fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b02      	cmp	r3, #2
 800829e:	d113      	bne.n	80082c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	330c      	adds	r3, #12
 80082aa:	7812      	ldrb	r2, [r2, #0]
 80082ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b2:	1c5a      	adds	r2, r3, #1
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80082c6:	e018      	b.n	80082fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082c8:	f7fe fd8c 	bl	8006de4 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	683a      	ldr	r2, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d803      	bhi.n	80082e0 <HAL_SPI_Transmit+0x20a>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082de:	d102      	bne.n	80082e6 <HAL_SPI_Transmit+0x210>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d109      	bne.n	80082fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80082f6:	2303      	movs	r3, #3
 80082f8:	e02d      	b.n	8008356 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1c6      	bne.n	8008292 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	68f8      	ldr	r0, [r7, #12]
 800830a:	f000 fa59 	bl	80087c0 <SPI_EndRxTxTransaction>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2220      	movs	r2, #32
 8008318:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10a      	bne.n	8008338 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008322:	2300      	movs	r3, #0
 8008324:	617b      	str	r3, [r7, #20]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	617b      	str	r3, [r7, #20]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800834c:	2b00      	cmp	r3, #0
 800834e:	d001      	beq.n	8008354 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8008350:	2301      	movs	r3, #1
 8008352:	e000      	b.n	8008356 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8008354:	2300      	movs	r3, #0
  }
}
 8008356:	4618      	mov	r0, r3
 8008358:	3720      	adds	r7, #32
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b08a      	sub	sp, #40	@ 0x28
 8008362:	af00      	add	r7, sp, #0
 8008364:	60f8      	str	r0, [r7, #12]
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800836c:	2301      	movs	r3, #1
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008370:	f7fe fd38 	bl	8006de4 <HAL_GetTick>
 8008374:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800837c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008384:	887b      	ldrh	r3, [r7, #2]
 8008386:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008388:	7ffb      	ldrb	r3, [r7, #31]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d00c      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x4a>
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008394:	d106      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d102      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x46>
 800839e:	7ffb      	ldrb	r3, [r7, #31]
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d001      	beq.n	80083a8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80083a4:	2302      	movs	r3, #2
 80083a6:	e17f      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d005      	beq.n	80083ba <HAL_SPI_TransmitReceive+0x5c>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d002      	beq.n	80083ba <HAL_SPI_TransmitReceive+0x5c>
 80083b4:	887b      	ldrh	r3, [r7, #2]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e174      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d101      	bne.n	80083cc <HAL_SPI_TransmitReceive+0x6e>
 80083c8:	2302      	movs	r3, #2
 80083ca:	e16d      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x34a>
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d003      	beq.n	80083e8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2205      	movs	r2, #5
 80083e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	887a      	ldrh	r2, [r7, #2]
 80083f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	887a      	ldrh	r2, [r7, #2]
 80083fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	887a      	ldrh	r2, [r7, #2]
 800840a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	887a      	ldrh	r2, [r7, #2]
 8008410:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008428:	2b40      	cmp	r3, #64	@ 0x40
 800842a:	d007      	beq.n	800843c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800843a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008444:	d17e      	bne.n	8008544 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <HAL_SPI_TransmitReceive+0xf6>
 800844e:	8afb      	ldrh	r3, [r7, #22]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d16c      	bne.n	800852e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008458:	881a      	ldrh	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008464:	1c9a      	adds	r2, r3, #2
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800846e:	b29b      	uxth	r3, r3
 8008470:	3b01      	subs	r3, #1
 8008472:	b29a      	uxth	r2, r3
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008478:	e059      	b.n	800852e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	689b      	ldr	r3, [r3, #8]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b02      	cmp	r3, #2
 8008486:	d11b      	bne.n	80084c0 <HAL_SPI_TransmitReceive+0x162>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800848c:	b29b      	uxth	r3, r3
 800848e:	2b00      	cmp	r3, #0
 8008490:	d016      	beq.n	80084c0 <HAL_SPI_TransmitReceive+0x162>
 8008492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008494:	2b01      	cmp	r3, #1
 8008496:	d113      	bne.n	80084c0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849c:	881a      	ldrh	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a8:	1c9a      	adds	r2, r3, #2
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 0301 	and.w	r3, r3, #1
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d119      	bne.n	8008502 <HAL_SPI_TransmitReceive+0x1a4>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d014      	beq.n	8008502 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e2:	b292      	uxth	r2, r2
 80084e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ea:	1c9a      	adds	r2, r3, #2
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084fe:	2301      	movs	r3, #1
 8008500:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008502:	f7fe fc6f 	bl	8006de4 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	6a3b      	ldr	r3, [r7, #32]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800850e:	429a      	cmp	r2, r3
 8008510:	d80d      	bhi.n	800852e <HAL_SPI_TransmitReceive+0x1d0>
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008518:	d009      	beq.n	800852e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800852a:	2303      	movs	r3, #3
 800852c:	e0bc      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008532:	b29b      	uxth	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1a0      	bne.n	800847a <HAL_SPI_TransmitReceive+0x11c>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800853c:	b29b      	uxth	r3, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d19b      	bne.n	800847a <HAL_SPI_TransmitReceive+0x11c>
 8008542:	e082      	b.n	800864a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <HAL_SPI_TransmitReceive+0x1f4>
 800854c:	8afb      	ldrh	r3, [r7, #22]
 800854e:	2b01      	cmp	r3, #1
 8008550:	d171      	bne.n	8008636 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	330c      	adds	r3, #12
 800855c:	7812      	ldrb	r2, [r2, #0]
 800855e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008564:	1c5a      	adds	r2, r3, #1
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800856e:	b29b      	uxth	r3, r3
 8008570:	3b01      	subs	r3, #1
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008578:	e05d      	b.n	8008636 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f003 0302 	and.w	r3, r3, #2
 8008584:	2b02      	cmp	r3, #2
 8008586:	d11c      	bne.n	80085c2 <HAL_SPI_TransmitReceive+0x264>
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800858c:	b29b      	uxth	r3, r3
 800858e:	2b00      	cmp	r3, #0
 8008590:	d017      	beq.n	80085c2 <HAL_SPI_TransmitReceive+0x264>
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	2b01      	cmp	r3, #1
 8008596:	d114      	bne.n	80085c2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	330c      	adds	r3, #12
 80085a2:	7812      	ldrb	r2, [r2, #0]
 80085a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	3b01      	subs	r3, #1
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085be:	2300      	movs	r3, #0
 80085c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f003 0301 	and.w	r3, r3, #1
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d119      	bne.n	8008604 <HAL_SPI_TransmitReceive+0x2a6>
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d014      	beq.n	8008604 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68da      	ldr	r2, [r3, #12]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e4:	b2d2      	uxtb	r2, r2
 80085e6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	3b01      	subs	r3, #1
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008600:	2301      	movs	r3, #1
 8008602:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008604:	f7fe fbee 	bl	8006de4 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008610:	429a      	cmp	r2, r3
 8008612:	d803      	bhi.n	800861c <HAL_SPI_TransmitReceive+0x2be>
 8008614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d102      	bne.n	8008622 <HAL_SPI_TransmitReceive+0x2c4>
 800861c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008632:	2303      	movs	r3, #3
 8008634:	e038      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d19c      	bne.n	800857a <HAL_SPI_TransmitReceive+0x21c>
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008644:	b29b      	uxth	r3, r3
 8008646:	2b00      	cmp	r3, #0
 8008648:	d197      	bne.n	800857a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800864a:	6a3a      	ldr	r2, [r7, #32]
 800864c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 f8b6 	bl	80087c0 <SPI_EndRxTxTransaction>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d008      	beq.n	800866c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2220      	movs	r2, #32
 800865e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e01d      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	689b      	ldr	r3, [r3, #8]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10a      	bne.n	800868a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008674:	2300      	movs	r3, #0
 8008676:	613b      	str	r3, [r7, #16]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	613b      	str	r3, [r7, #16]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	689b      	ldr	r3, [r3, #8]
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d001      	beq.n	80086a6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80086a6:	2300      	movs	r3, #0
  }
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3728      	adds	r7, #40	@ 0x28
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	603b      	str	r3, [r7, #0]
 80086bc:	4613      	mov	r3, r2
 80086be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80086c0:	f7fe fb90 	bl	8006de4 <HAL_GetTick>
 80086c4:	4602      	mov	r2, r0
 80086c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	4413      	add	r3, r2
 80086ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80086d0:	f7fe fb88 	bl	8006de4 <HAL_GetTick>
 80086d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80086d6:	4b39      	ldr	r3, [pc, #228]	@ (80087bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	015b      	lsls	r3, r3, #5
 80086dc:	0d1b      	lsrs	r3, r3, #20
 80086de:	69fa      	ldr	r2, [r7, #28]
 80086e0:	fb02 f303 	mul.w	r3, r2, r3
 80086e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086e6:	e055      	b.n	8008794 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ee:	d051      	beq.n	8008794 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80086f0:	f7fe fb78 	bl	8006de4 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	69fa      	ldr	r2, [r7, #28]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d902      	bls.n	8008706 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d13d      	bne.n	8008782 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008714:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800871e:	d111      	bne.n	8008744 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008728:	d004      	beq.n	8008734 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008732:	d107      	bne.n	8008744 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008742:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800874c:	d10f      	bne.n	800876e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681a      	ldr	r2, [r3, #0]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	681a      	ldr	r2, [r3, #0]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800876c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e018      	b.n	80087b4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d102      	bne.n	800878e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	61fb      	str	r3, [r7, #28]
 800878c:	e002      	b.n	8008794 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	3b01      	subs	r3, #1
 8008792:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	689a      	ldr	r2, [r3, #8]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	4013      	ands	r3, r2
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	bf0c      	ite	eq
 80087a4:	2301      	moveq	r3, #1
 80087a6:	2300      	movne	r3, #0
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	461a      	mov	r2, r3
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d19a      	bne.n	80086e8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3720      	adds	r7, #32
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	20000040 	.word	0x20000040

080087c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af02      	add	r7, sp, #8
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2201      	movs	r2, #1
 80087d4:	2102      	movs	r1, #2
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f7ff ff6a 	bl	80086b0 <SPI_WaitFlagStateUntilTimeout>
 80087dc:	4603      	mov	r3, r0
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d007      	beq.n	80087f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087e6:	f043 0220 	orr.w	r2, r3, #32
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e032      	b.n	8008858 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80087f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008860 <SPI_EndRxTxTransaction+0xa0>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008864 <SPI_EndRxTxTransaction+0xa4>)
 80087f8:	fba2 2303 	umull	r2, r3, r2, r3
 80087fc:	0d5b      	lsrs	r3, r3, #21
 80087fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008802:	fb02 f303 	mul.w	r3, r2, r3
 8008806:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008810:	d112      	bne.n	8008838 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2200      	movs	r2, #0
 800881a:	2180      	movs	r1, #128	@ 0x80
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f7ff ff47 	bl	80086b0 <SPI_WaitFlagStateUntilTimeout>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d016      	beq.n	8008856 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800882c:	f043 0220 	orr.w	r2, r3, #32
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e00f      	b.n	8008858 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00a      	beq.n	8008854 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	3b01      	subs	r3, #1
 8008842:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800884e:	2b80      	cmp	r3, #128	@ 0x80
 8008850:	d0f2      	beq.n	8008838 <SPI_EndRxTxTransaction+0x78>
 8008852:	e000      	b.n	8008856 <SPI_EndRxTxTransaction+0x96>
        break;
 8008854:	bf00      	nop
  }

  return HAL_OK;
 8008856:	2300      	movs	r3, #0
}
 8008858:	4618      	mov	r0, r3
 800885a:	3718      	adds	r7, #24
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}
 8008860:	20000040 	.word	0x20000040
 8008864:	165e9f81 	.word	0x165e9f81

08008868 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e041      	b.n	80088fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7fd fc6a 	bl	8006168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4619      	mov	r1, r3
 80088a6:	4610      	mov	r0, r2
 80088a8:	f000 fbd2 	bl	8009050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008908:	b480      	push	{r7}
 800890a:	b085      	sub	sp, #20
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008916:	b2db      	uxtb	r3, r3
 8008918:	2b01      	cmp	r3, #1
 800891a:	d001      	beq.n	8008920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e04e      	b.n	80089be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	68da      	ldr	r2, [r3, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0201 	orr.w	r2, r2, #1
 8008936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a23      	ldr	r2, [pc, #140]	@ (80089cc <HAL_TIM_Base_Start_IT+0xc4>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d022      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800894a:	d01d      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a1f      	ldr	r2, [pc, #124]	@ (80089d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d018      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a1e      	ldr	r2, [pc, #120]	@ (80089d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d013      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a1c      	ldr	r2, [pc, #112]	@ (80089d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d00e      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a1b      	ldr	r2, [pc, #108]	@ (80089dc <HAL_TIM_Base_Start_IT+0xd4>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d009      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a19      	ldr	r2, [pc, #100]	@ (80089e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d004      	beq.n	8008988 <HAL_TIM_Base_Start_IT+0x80>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a18      	ldr	r2, [pc, #96]	@ (80089e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d111      	bne.n	80089ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2b06      	cmp	r3, #6
 8008998:	d010      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f042 0201 	orr.w	r2, r2, #1
 80089a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089aa:	e007      	b.n	80089bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0201 	orr.w	r2, r2, #1
 80089ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	40010000 	.word	0x40010000
 80089d0:	40000400 	.word	0x40000400
 80089d4:	40000800 	.word	0x40000800
 80089d8:	40000c00 	.word	0x40000c00
 80089dc:	40010400 	.word	0x40010400
 80089e0:	40014000 	.word	0x40014000
 80089e4:	40001800 	.word	0x40001800

080089e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f022 0201 	bic.w	r2, r2, #1
 80089fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6a1a      	ldr	r2, [r3, #32]
 8008a06:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008a0a:	4013      	ands	r3, r2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d10f      	bne.n	8008a30 <HAL_TIM_Base_Stop_IT+0x48>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	f240 4344 	movw	r3, #1092	@ 0x444
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d107      	bne.n	8008a30 <HAL_TIM_Base_Stop_IT+0x48>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f022 0201 	bic.w	r2, r2, #1
 8008a2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e041      	b.n	8008adc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d106      	bne.n	8008a72 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f839 	bl	8008ae4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3304      	adds	r3, #4
 8008a82:	4619      	mov	r1, r3
 8008a84:	4610      	mov	r0, r2
 8008a86:	f000 fae3 	bl	8009050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d109      	bne.n	8008b1c <HAL_TIM_PWM_Start+0x24>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	bf14      	ite	ne
 8008b14:	2301      	movne	r3, #1
 8008b16:	2300      	moveq	r3, #0
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	e022      	b.n	8008b62 <HAL_TIM_PWM_Start+0x6a>
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d109      	bne.n	8008b36 <HAL_TIM_PWM_Start+0x3e>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	bf14      	ite	ne
 8008b2e:	2301      	movne	r3, #1
 8008b30:	2300      	moveq	r3, #0
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	e015      	b.n	8008b62 <HAL_TIM_PWM_Start+0x6a>
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d109      	bne.n	8008b50 <HAL_TIM_PWM_Start+0x58>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	bf14      	ite	ne
 8008b48:	2301      	movne	r3, #1
 8008b4a:	2300      	moveq	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	e008      	b.n	8008b62 <HAL_TIM_PWM_Start+0x6a>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	bf14      	ite	ne
 8008b5c:	2301      	movne	r3, #1
 8008b5e:	2300      	moveq	r3, #0
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d001      	beq.n	8008b6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e07c      	b.n	8008c64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d104      	bne.n	8008b7a <HAL_TIM_PWM_Start+0x82>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2202      	movs	r2, #2
 8008b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b78:	e013      	b.n	8008ba2 <HAL_TIM_PWM_Start+0xaa>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d104      	bne.n	8008b8a <HAL_TIM_PWM_Start+0x92>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b88:	e00b      	b.n	8008ba2 <HAL_TIM_PWM_Start+0xaa>
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d104      	bne.n	8008b9a <HAL_TIM_PWM_Start+0xa2>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b98:	e003      	b.n	8008ba2 <HAL_TIM_PWM_Start+0xaa>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	6839      	ldr	r1, [r7, #0]
 8008baa:	4618      	mov	r0, r3
 8008bac:	f000 fca6 	bl	80094fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c6c <HAL_TIM_PWM_Start+0x174>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0xcc>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8008c70 <HAL_TIM_PWM_Start+0x178>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d101      	bne.n	8008bc8 <HAL_TIM_PWM_Start+0xd0>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e000      	b.n	8008bca <HAL_TIM_PWM_Start+0xd2>
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d007      	beq.n	8008bde <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a22      	ldr	r2, [pc, #136]	@ (8008c6c <HAL_TIM_PWM_Start+0x174>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d022      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x136>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bf0:	d01d      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x136>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8008c74 <HAL_TIM_PWM_Start+0x17c>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d018      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x136>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a1d      	ldr	r2, [pc, #116]	@ (8008c78 <HAL_TIM_PWM_Start+0x180>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d013      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x136>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8008c7c <HAL_TIM_PWM_Start+0x184>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d00e      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x136>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a16      	ldr	r2, [pc, #88]	@ (8008c70 <HAL_TIM_PWM_Start+0x178>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d009      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x136>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a18      	ldr	r2, [pc, #96]	@ (8008c80 <HAL_TIM_PWM_Start+0x188>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d004      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x136>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a16      	ldr	r2, [pc, #88]	@ (8008c84 <HAL_TIM_PWM_Start+0x18c>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d111      	bne.n	8008c52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b06      	cmp	r3, #6
 8008c3e:	d010      	beq.n	8008c62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0201 	orr.w	r2, r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c50:	e007      	b.n	8008c62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f042 0201 	orr.w	r2, r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	40010000 	.word	0x40010000
 8008c70:	40010400 	.word	0x40010400
 8008c74:	40000400 	.word	0x40000400
 8008c78:	40000800 	.word	0x40000800
 8008c7c:	40000c00 	.word	0x40000c00
 8008c80:	40014000 	.word	0x40014000
 8008c84:	40001800 	.word	0x40001800

08008c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d020      	beq.n	8008cec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f003 0302 	and.w	r3, r3, #2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d01b      	beq.n	8008cec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0202 	mvn.w	r2, #2
 8008cbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699b      	ldr	r3, [r3, #24]
 8008cca:	f003 0303 	and.w	r3, r3, #3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f99e 	bl	8009014 <HAL_TIM_IC_CaptureCallback>
 8008cd8:	e005      	b.n	8008ce6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f990 	bl	8009000 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f9a1 	bl	8009028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f003 0304 	and.w	r3, r3, #4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d020      	beq.n	8008d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01b      	beq.n	8008d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f06f 0204 	mvn.w	r2, #4
 8008d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2202      	movs	r2, #2
 8008d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	699b      	ldr	r3, [r3, #24]
 8008d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d003      	beq.n	8008d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 f978 	bl	8009014 <HAL_TIM_IC_CaptureCallback>
 8008d24:	e005      	b.n	8008d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f96a 	bl	8009000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 f97b 	bl	8009028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	f003 0308 	and.w	r3, r3, #8
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d020      	beq.n	8008d84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f003 0308 	and.w	r3, r3, #8
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01b      	beq.n	8008d84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f06f 0208 	mvn.w	r2, #8
 8008d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2204      	movs	r2, #4
 8008d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	69db      	ldr	r3, [r3, #28]
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d003      	beq.n	8008d72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 f952 	bl	8009014 <HAL_TIM_IC_CaptureCallback>
 8008d70:	e005      	b.n	8008d7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f944 	bl	8009000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 f955 	bl	8009028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	f003 0310 	and.w	r3, r3, #16
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d020      	beq.n	8008dd0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f003 0310 	and.w	r3, r3, #16
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d01b      	beq.n	8008dd0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f06f 0210 	mvn.w	r2, #16
 8008da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2208      	movs	r2, #8
 8008da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f92c 	bl	8009014 <HAL_TIM_IC_CaptureCallback>
 8008dbc:	e005      	b.n	8008dca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f91e 	bl	8009000 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f92f 	bl	8009028 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00c      	beq.n	8008df4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f003 0301 	and.w	r3, r3, #1
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d007      	beq.n	8008df4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f06f 0201 	mvn.w	r2, #1
 8008dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f8fc 	bl	8008fec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00c      	beq.n	8008e18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d007      	beq.n	8008e18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fba1 	bl	800955a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00c      	beq.n	8008e3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d007      	beq.n	8008e3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f000 f900 	bl	800903c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f003 0320 	and.w	r3, r3, #32
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00c      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f003 0320 	and.w	r3, r3, #32
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d007      	beq.n	8008e60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0220 	mvn.w	r2, #32
 8008e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fb73 	bl	8009546 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e0ae      	b.n	8008fe4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2b0c      	cmp	r3, #12
 8008e92:	f200 809f 	bhi.w	8008fd4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008e96:	a201      	add	r2, pc, #4	@ (adr r2, 8008e9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008ed1 	.word	0x08008ed1
 8008ea0:	08008fd5 	.word	0x08008fd5
 8008ea4:	08008fd5 	.word	0x08008fd5
 8008ea8:	08008fd5 	.word	0x08008fd5
 8008eac:	08008f11 	.word	0x08008f11
 8008eb0:	08008fd5 	.word	0x08008fd5
 8008eb4:	08008fd5 	.word	0x08008fd5
 8008eb8:	08008fd5 	.word	0x08008fd5
 8008ebc:	08008f53 	.word	0x08008f53
 8008ec0:	08008fd5 	.word	0x08008fd5
 8008ec4:	08008fd5 	.word	0x08008fd5
 8008ec8:	08008fd5 	.word	0x08008fd5
 8008ecc:	08008f93 	.word	0x08008f93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 f960 	bl	800919c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0208 	orr.w	r2, r2, #8
 8008eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699a      	ldr	r2, [r3, #24]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0204 	bic.w	r2, r2, #4
 8008efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6999      	ldr	r1, [r3, #24]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	619a      	str	r2, [r3, #24]
      break;
 8008f0e:	e064      	b.n	8008fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 f9b0 	bl	800927c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6999      	ldr	r1, [r3, #24]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	021a      	lsls	r2, r3, #8
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	619a      	str	r2, [r3, #24]
      break;
 8008f50:	e043      	b.n	8008fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fa05 	bl	8009368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69da      	ldr	r2, [r3, #28]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f042 0208 	orr.w	r2, r2, #8
 8008f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69da      	ldr	r2, [r3, #28]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0204 	bic.w	r2, r2, #4
 8008f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69d9      	ldr	r1, [r3, #28]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	61da      	str	r2, [r3, #28]
      break;
 8008f90:	e023      	b.n	8008fda <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 fa59 	bl	8009450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69da      	ldr	r2, [r3, #28]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69da      	ldr	r2, [r3, #28]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69d9      	ldr	r1, [r3, #28]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	021a      	lsls	r2, r3, #8
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	61da      	str	r2, [r3, #28]
      break;
 8008fd2:	e002      	b.n	8008fda <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3718      	adds	r7, #24
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009044:	bf00      	nop
 8009046:	370c      	adds	r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904e:	4770      	bx	lr

08009050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a43      	ldr	r2, [pc, #268]	@ (8009170 <TIM_Base_SetConfig+0x120>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d013      	beq.n	8009090 <TIM_Base_SetConfig+0x40>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800906e:	d00f      	beq.n	8009090 <TIM_Base_SetConfig+0x40>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a40      	ldr	r2, [pc, #256]	@ (8009174 <TIM_Base_SetConfig+0x124>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d00b      	beq.n	8009090 <TIM_Base_SetConfig+0x40>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a3f      	ldr	r2, [pc, #252]	@ (8009178 <TIM_Base_SetConfig+0x128>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d007      	beq.n	8009090 <TIM_Base_SetConfig+0x40>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a3e      	ldr	r2, [pc, #248]	@ (800917c <TIM_Base_SetConfig+0x12c>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d003      	beq.n	8009090 <TIM_Base_SetConfig+0x40>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a3d      	ldr	r2, [pc, #244]	@ (8009180 <TIM_Base_SetConfig+0x130>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d108      	bne.n	80090a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a32      	ldr	r2, [pc, #200]	@ (8009170 <TIM_Base_SetConfig+0x120>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d02b      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b0:	d027      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a2f      	ldr	r2, [pc, #188]	@ (8009174 <TIM_Base_SetConfig+0x124>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d023      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a2e      	ldr	r2, [pc, #184]	@ (8009178 <TIM_Base_SetConfig+0x128>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d01f      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a2d      	ldr	r2, [pc, #180]	@ (800917c <TIM_Base_SetConfig+0x12c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d01b      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009180 <TIM_Base_SetConfig+0x130>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d017      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a2b      	ldr	r2, [pc, #172]	@ (8009184 <TIM_Base_SetConfig+0x134>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d013      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a2a      	ldr	r2, [pc, #168]	@ (8009188 <TIM_Base_SetConfig+0x138>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d00f      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a29      	ldr	r2, [pc, #164]	@ (800918c <TIM_Base_SetConfig+0x13c>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d00b      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a28      	ldr	r2, [pc, #160]	@ (8009190 <TIM_Base_SetConfig+0x140>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d007      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a27      	ldr	r2, [pc, #156]	@ (8009194 <TIM_Base_SetConfig+0x144>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d003      	beq.n	8009102 <TIM_Base_SetConfig+0xb2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a26      	ldr	r2, [pc, #152]	@ (8009198 <TIM_Base_SetConfig+0x148>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d108      	bne.n	8009114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	68fa      	ldr	r2, [r7, #12]
 8009110:	4313      	orrs	r3, r2
 8009112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	695b      	ldr	r3, [r3, #20]
 800911e:	4313      	orrs	r3, r2
 8009120:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	689a      	ldr	r2, [r3, #8]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a0e      	ldr	r2, [pc, #56]	@ (8009170 <TIM_Base_SetConfig+0x120>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d003      	beq.n	8009142 <TIM_Base_SetConfig+0xf2>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a10      	ldr	r2, [pc, #64]	@ (8009180 <TIM_Base_SetConfig+0x130>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d103      	bne.n	800914a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	691a      	ldr	r2, [r3, #16]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f043 0204 	orr.w	r2, r3, #4
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	601a      	str	r2, [r3, #0]
}
 8009162:	bf00      	nop
 8009164:	3714      	adds	r7, #20
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	40010000 	.word	0x40010000
 8009174:	40000400 	.word	0x40000400
 8009178:	40000800 	.word	0x40000800
 800917c:	40000c00 	.word	0x40000c00
 8009180:	40010400 	.word	0x40010400
 8009184:	40014000 	.word	0x40014000
 8009188:	40014400 	.word	0x40014400
 800918c:	40014800 	.word	0x40014800
 8009190:	40001800 	.word	0x40001800
 8009194:	40001c00 	.word	0x40001c00
 8009198:	40002000 	.word	0x40002000

0800919c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800919c:	b480      	push	{r7}
 800919e:	b087      	sub	sp, #28
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a1b      	ldr	r3, [r3, #32]
 80091aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	f023 0201 	bic.w	r2, r3, #1
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	699b      	ldr	r3, [r3, #24]
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	f023 0303 	bic.w	r3, r3, #3
 80091d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	4313      	orrs	r3, r2
 80091dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f023 0302 	bic.w	r3, r3, #2
 80091e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a20      	ldr	r2, [pc, #128]	@ (8009274 <TIM_OC1_SetConfig+0xd8>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d003      	beq.n	8009200 <TIM_OC1_SetConfig+0x64>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a1f      	ldr	r2, [pc, #124]	@ (8009278 <TIM_OC1_SetConfig+0xdc>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d10c      	bne.n	800921a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f023 0308 	bic.w	r3, r3, #8
 8009206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	4313      	orrs	r3, r2
 8009210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	f023 0304 	bic.w	r3, r3, #4
 8009218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a15      	ldr	r2, [pc, #84]	@ (8009274 <TIM_OC1_SetConfig+0xd8>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d003      	beq.n	800922a <TIM_OC1_SetConfig+0x8e>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a14      	ldr	r2, [pc, #80]	@ (8009278 <TIM_OC1_SetConfig+0xdc>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d111      	bne.n	800924e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009230:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009238:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	4313      	orrs	r3, r2
 8009242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	4313      	orrs	r3, r2
 800924c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	68fa      	ldr	r2, [r7, #12]
 8009258:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	685a      	ldr	r2, [r3, #4]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	697a      	ldr	r2, [r7, #20]
 8009266:	621a      	str	r2, [r3, #32]
}
 8009268:	bf00      	nop
 800926a:	371c      	adds	r7, #28
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	40010000 	.word	0x40010000
 8009278:	40010400 	.word	0x40010400

0800927c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800927c:	b480      	push	{r7}
 800927e:	b087      	sub	sp, #28
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
 8009284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6a1b      	ldr	r3, [r3, #32]
 8009290:	f023 0210 	bic.w	r2, r3, #16
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	699b      	ldr	r3, [r3, #24]
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	021b      	lsls	r3, r3, #8
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	4313      	orrs	r3, r2
 80092be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	f023 0320 	bic.w	r3, r3, #32
 80092c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	011b      	lsls	r3, r3, #4
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	4a22      	ldr	r2, [pc, #136]	@ (8009360 <TIM_OC2_SetConfig+0xe4>)
 80092d8:	4293      	cmp	r3, r2
 80092da:	d003      	beq.n	80092e4 <TIM_OC2_SetConfig+0x68>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a21      	ldr	r2, [pc, #132]	@ (8009364 <TIM_OC2_SetConfig+0xe8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d10d      	bne.n	8009300 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80092ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	011b      	lsls	r3, r3, #4
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	4313      	orrs	r3, r2
 80092f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a17      	ldr	r2, [pc, #92]	@ (8009360 <TIM_OC2_SetConfig+0xe4>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d003      	beq.n	8009310 <TIM_OC2_SetConfig+0x94>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4a16      	ldr	r2, [pc, #88]	@ (8009364 <TIM_OC2_SetConfig+0xe8>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d113      	bne.n	8009338 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800931e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	693a      	ldr	r2, [r7, #16]
 8009328:	4313      	orrs	r3, r2
 800932a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	699b      	ldr	r3, [r3, #24]
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	621a      	str	r2, [r3, #32]
}
 8009352:	bf00      	nop
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	40010000 	.word	0x40010000
 8009364:	40010400 	.word	0x40010400

08009368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	021b      	lsls	r3, r3, #8
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	4313      	orrs	r3, r2
 80093bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a21      	ldr	r2, [pc, #132]	@ (8009448 <TIM_OC3_SetConfig+0xe0>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d003      	beq.n	80093ce <TIM_OC3_SetConfig+0x66>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a20      	ldr	r2, [pc, #128]	@ (800944c <TIM_OC3_SetConfig+0xe4>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d10d      	bne.n	80093ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80093d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	021b      	lsls	r3, r3, #8
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	4313      	orrs	r3, r2
 80093e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80093e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4a16      	ldr	r2, [pc, #88]	@ (8009448 <TIM_OC3_SetConfig+0xe0>)
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d003      	beq.n	80093fa <TIM_OC3_SetConfig+0x92>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	4a15      	ldr	r2, [pc, #84]	@ (800944c <TIM_OC3_SetConfig+0xe4>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d113      	bne.n	8009422 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	011b      	lsls	r3, r3, #4
 8009410:	693a      	ldr	r2, [r7, #16]
 8009412:	4313      	orrs	r3, r2
 8009414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	4313      	orrs	r3, r2
 8009420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	685a      	ldr	r2, [r3, #4]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	697a      	ldr	r2, [r7, #20]
 800943a:	621a      	str	r2, [r3, #32]
}
 800943c:	bf00      	nop
 800943e:	371c      	adds	r7, #28
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	40010000 	.word	0x40010000
 800944c:	40010400 	.word	0x40010400

08009450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009450:	b480      	push	{r7}
 8009452:	b087      	sub	sp, #28
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a1b      	ldr	r3, [r3, #32]
 800945e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6a1b      	ldr	r3, [r3, #32]
 8009464:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800947e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	021b      	lsls	r3, r3, #8
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009494:	693b      	ldr	r3, [r7, #16]
 8009496:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800949a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	031b      	lsls	r3, r3, #12
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a12      	ldr	r2, [pc, #72]	@ (80094f4 <TIM_OC4_SetConfig+0xa4>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d003      	beq.n	80094b8 <TIM_OC4_SetConfig+0x68>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a11      	ldr	r2, [pc, #68]	@ (80094f8 <TIM_OC4_SetConfig+0xa8>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d109      	bne.n	80094cc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	019b      	lsls	r3, r3, #6
 80094c6:	697a      	ldr	r2, [r7, #20]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	685a      	ldr	r2, [r3, #4]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	693a      	ldr	r2, [r7, #16]
 80094e4:	621a      	str	r2, [r3, #32]
}
 80094e6:	bf00      	nop
 80094e8:	371c      	adds	r7, #28
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr
 80094f2:	bf00      	nop
 80094f4:	40010000 	.word	0x40010000
 80094f8:	40010400 	.word	0x40010400

080094fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	f003 031f 	and.w	r3, r3, #31
 800950e:	2201      	movs	r2, #1
 8009510:	fa02 f303 	lsl.w	r3, r2, r3
 8009514:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6a1a      	ldr	r2, [r3, #32]
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	43db      	mvns	r3, r3
 800951e:	401a      	ands	r2, r3
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6a1a      	ldr	r2, [r3, #32]
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f003 031f 	and.w	r3, r3, #31
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	fa01 f303 	lsl.w	r3, r1, r3
 8009534:	431a      	orrs	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	621a      	str	r2, [r3, #32]
}
 800953a:	bf00      	nop
 800953c:	371c      	adds	r7, #28
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009546:	b480      	push	{r7}
 8009548:	b083      	sub	sp, #12
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800954e:	bf00      	nop
 8009550:	370c      	adds	r7, #12
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr

0800955a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800955a:	b480      	push	{r7}
 800955c:	b083      	sub	sp, #12
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009562:	bf00      	nop
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e042      	b.n	8009606 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d106      	bne.n	800959a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f7fc fe49 	bl	800622c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2224      	movs	r2, #36	@ 0x24
 800959e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80095b0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fcee 	bl	8009f94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	691a      	ldr	r2, [r3, #16]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095c6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	695a      	ldr	r2, [r3, #20]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095d6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80095e6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2220      	movs	r2, #32
 80095f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009604:	2300      	movs	r3, #0
}
 8009606:	4618      	mov	r0, r3
 8009608:	3708      	adds	r7, #8
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800960e:	b580      	push	{r7, lr}
 8009610:	b084      	sub	sp, #16
 8009612:	af00      	add	r7, sp, #0
 8009614:	60f8      	str	r0, [r7, #12]
 8009616:	60b9      	str	r1, [r7, #8]
 8009618:	4613      	mov	r3, r2
 800961a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009622:	b2db      	uxtb	r3, r3
 8009624:	2b20      	cmp	r3, #32
 8009626:	d112      	bne.n	800964e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <HAL_UART_Receive_IT+0x26>
 800962e:	88fb      	ldrh	r3, [r7, #6]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e00b      	b.n	8009650 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800963e:	88fb      	ldrh	r3, [r7, #6]
 8009640:	461a      	mov	r2, r3
 8009642:	68b9      	ldr	r1, [r7, #8]
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 fad1 	bl	8009bec <UART_Start_Receive_IT>
 800964a:	4603      	mov	r3, r0
 800964c:	e000      	b.n	8009650 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800964e:	2302      	movs	r3, #2
  }
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b0ba      	sub	sp, #232	@ 0xe8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800967e:	2300      	movs	r3, #0
 8009680:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009684:	2300      	movs	r3, #0
 8009686:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800968a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800968e:	f003 030f 	and.w	r3, r3, #15
 8009692:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009696:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10f      	bne.n	80096be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800969e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096a2:	f003 0320 	and.w	r3, r3, #32
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d009      	beq.n	80096be <HAL_UART_IRQHandler+0x66>
 80096aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096ae:	f003 0320 	and.w	r3, r3, #32
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fbae 	bl	8009e18 <UART_Receive_IT>
      return;
 80096bc:	e273      	b.n	8009ba6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80096be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f000 80de 	beq.w	8009884 <HAL_UART_IRQHandler+0x22c>
 80096c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80096d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 80d1 	beq.w	8009884 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096e6:	f003 0301 	and.w	r3, r3, #1
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00b      	beq.n	8009706 <HAL_UART_IRQHandler+0xae>
 80096ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d005      	beq.n	8009706 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096fe:	f043 0201 	orr.w	r2, r3, #1
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00b      	beq.n	800972a <HAL_UART_IRQHandler+0xd2>
 8009712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009716:	f003 0301 	and.w	r3, r3, #1
 800971a:	2b00      	cmp	r3, #0
 800971c:	d005      	beq.n	800972a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009722:	f043 0202 	orr.w	r2, r3, #2
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800972a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800972e:	f003 0302 	and.w	r3, r3, #2
 8009732:	2b00      	cmp	r3, #0
 8009734:	d00b      	beq.n	800974e <HAL_UART_IRQHandler+0xf6>
 8009736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800973a:	f003 0301 	and.w	r3, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d005      	beq.n	800974e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009746:	f043 0204 	orr.w	r2, r3, #4
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800974e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009752:	f003 0308 	and.w	r3, r3, #8
 8009756:	2b00      	cmp	r3, #0
 8009758:	d011      	beq.n	800977e <HAL_UART_IRQHandler+0x126>
 800975a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800975e:	f003 0320 	and.w	r3, r3, #32
 8009762:	2b00      	cmp	r3, #0
 8009764:	d105      	bne.n	8009772 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009766:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009776:	f043 0208 	orr.w	r2, r3, #8
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009782:	2b00      	cmp	r3, #0
 8009784:	f000 820a 	beq.w	8009b9c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800978c:	f003 0320 	and.w	r3, r3, #32
 8009790:	2b00      	cmp	r3, #0
 8009792:	d008      	beq.n	80097a6 <HAL_UART_IRQHandler+0x14e>
 8009794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009798:	f003 0320 	and.w	r3, r3, #32
 800979c:	2b00      	cmp	r3, #0
 800979e:	d002      	beq.n	80097a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 fb39 	bl	8009e18 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b0:	2b40      	cmp	r3, #64	@ 0x40
 80097b2:	bf0c      	ite	eq
 80097b4:	2301      	moveq	r3, #1
 80097b6:	2300      	movne	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097c2:	f003 0308 	and.w	r3, r3, #8
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d103      	bne.n	80097d2 <HAL_UART_IRQHandler+0x17a>
 80097ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d04f      	beq.n	8009872 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fa44 	bl	8009c60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097e2:	2b40      	cmp	r3, #64	@ 0x40
 80097e4:	d141      	bne.n	800986a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3314      	adds	r3, #20
 80097ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80097fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009800:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3314      	adds	r3, #20
 800980e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009812:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800981e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009822:	e841 2300 	strex	r3, r2, [r1]
 8009826:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800982a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1d9      	bne.n	80097e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009836:	2b00      	cmp	r3, #0
 8009838:	d013      	beq.n	8009862 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800983e:	4a8a      	ldr	r2, [pc, #552]	@ (8009a68 <HAL_UART_IRQHandler+0x410>)
 8009840:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009846:	4618      	mov	r0, r3
 8009848:	f7fd fc8a 	bl	8007160 <HAL_DMA_Abort_IT>
 800984c:	4603      	mov	r3, r0
 800984e:	2b00      	cmp	r3, #0
 8009850:	d016      	beq.n	8009880 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800985c:	4610      	mov	r0, r2
 800985e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009860:	e00e      	b.n	8009880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f9ac 	bl	8009bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009868:	e00a      	b.n	8009880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 f9a8 	bl	8009bc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009870:	e006      	b.n	8009880 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f9a4 	bl	8009bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2200      	movs	r2, #0
 800987c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800987e:	e18d      	b.n	8009b9c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009880:	bf00      	nop
    return;
 8009882:	e18b      	b.n	8009b9c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009888:	2b01      	cmp	r3, #1
 800988a:	f040 8167 	bne.w	8009b5c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800988e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009892:	f003 0310 	and.w	r3, r3, #16
 8009896:	2b00      	cmp	r3, #0
 8009898:	f000 8160 	beq.w	8009b5c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800989c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098a0:	f003 0310 	and.w	r3, r3, #16
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8159 	beq.w	8009b5c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098aa:	2300      	movs	r3, #0
 80098ac:	60bb      	str	r3, [r7, #8]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60bb      	str	r3, [r7, #8]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	60bb      	str	r3, [r7, #8]
 80098be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ca:	2b40      	cmp	r3, #64	@ 0x40
 80098cc:	f040 80ce 	bne.w	8009a6c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80098dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 80a9 	beq.w	8009a38 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80098ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098ee:	429a      	cmp	r2, r3
 80098f0:	f080 80a2 	bcs.w	8009a38 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80098fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009906:	f000 8088 	beq.w	8009a1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	330c      	adds	r3, #12
 8009910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009914:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009918:	e853 3f00 	ldrex	r3, [r3]
 800991c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009920:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	330c      	adds	r3, #12
 8009932:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009936:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800993a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009942:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009946:	e841 2300 	strex	r3, r2, [r1]
 800994a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800994e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1d9      	bne.n	800990a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	3314      	adds	r3, #20
 800995c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009960:	e853 3f00 	ldrex	r3, [r3]
 8009964:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009968:	f023 0301 	bic.w	r3, r3, #1
 800996c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	3314      	adds	r3, #20
 8009976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800997a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800997e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009980:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009982:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800998c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e1      	bne.n	8009956 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3314      	adds	r3, #20
 8009998:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80099a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80099a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3314      	adds	r3, #20
 80099b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80099b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e3      	bne.n	8009992 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099ea:	f023 0310 	bic.w	r3, r3, #16
 80099ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	330c      	adds	r3, #12
 80099f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80099fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80099fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e3      	bne.n	80099d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7fd fb33 	bl	8007080 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	4619      	mov	r1, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f8cf 	bl	8009bd4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009a36:	e0b3      	b.n	8009ba0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009a40:	429a      	cmp	r2, r3
 8009a42:	f040 80ad 	bne.w	8009ba0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a4a:	69db      	ldr	r3, [r3, #28]
 8009a4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a50:	f040 80a6 	bne.w	8009ba0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009a5e:	4619      	mov	r1, r3
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f8b7 	bl	8009bd4 <HAL_UARTEx_RxEventCallback>
      return;
 8009a66:	e09b      	b.n	8009ba0 <HAL_UART_IRQHandler+0x548>
 8009a68:	08009d27 	.word	0x08009d27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 808e 	beq.w	8009ba4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009a88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 8089 	beq.w	8009ba4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	330c      	adds	r3, #12
 8009a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	330c      	adds	r3, #12
 8009ab2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009ab6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ab8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009abc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009abe:	e841 2300 	strex	r3, r2, [r1]
 8009ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1e3      	bne.n	8009a92 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	3314      	adds	r3, #20
 8009ad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad4:	e853 3f00 	ldrex	r3, [r3]
 8009ad8:	623b      	str	r3, [r7, #32]
   return(result);
 8009ada:	6a3b      	ldr	r3, [r7, #32]
 8009adc:	f023 0301 	bic.w	r3, r3, #1
 8009ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3314      	adds	r3, #20
 8009aea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009aee:	633a      	str	r2, [r7, #48]	@ 0x30
 8009af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e3      	bne.n	8009aca <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	330c      	adds	r3, #12
 8009b16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	e853 3f00 	ldrex	r3, [r3]
 8009b1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f023 0310 	bic.w	r3, r3, #16
 8009b26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	330c      	adds	r3, #12
 8009b30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009b34:	61fa      	str	r2, [r7, #28]
 8009b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b38:	69b9      	ldr	r1, [r7, #24]
 8009b3a:	69fa      	ldr	r2, [r7, #28]
 8009b3c:	e841 2300 	strex	r3, r2, [r1]
 8009b40:	617b      	str	r3, [r7, #20]
   return(result);
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1e3      	bne.n	8009b10 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009b4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 f83d 	bl	8009bd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009b5a:	e023      	b.n	8009ba4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d009      	beq.n	8009b7c <HAL_UART_IRQHandler+0x524>
 8009b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d003      	beq.n	8009b7c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f8e7 	bl	8009d48 <UART_Transmit_IT>
    return;
 8009b7a:	e014      	b.n	8009ba6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00e      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x54e>
 8009b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d008      	beq.n	8009ba6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f927 	bl	8009de8 <UART_EndTransmit_IT>
    return;
 8009b9a:	e004      	b.n	8009ba6 <HAL_UART_IRQHandler+0x54e>
    return;
 8009b9c:	bf00      	nop
 8009b9e:	e002      	b.n	8009ba6 <HAL_UART_IRQHandler+0x54e>
      return;
 8009ba0:	bf00      	nop
 8009ba2:	e000      	b.n	8009ba6 <HAL_UART_IRQHandler+0x54e>
      return;
 8009ba4:	bf00      	nop
  }
}
 8009ba6:	37e8      	adds	r7, #232	@ 0xe8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009be0:	bf00      	nop
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	88fa      	ldrh	r2, [r7, #6]
 8009c04:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	88fa      	ldrh	r2, [r7, #6]
 8009c0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2222      	movs	r2, #34	@ 0x22
 8009c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68da      	ldr	r2, [r3, #12]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c30:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	695a      	ldr	r2, [r3, #20]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0201 	orr.w	r2, r2, #1
 8009c40:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68da      	ldr	r2, [r3, #12]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f042 0220 	orr.w	r2, r2, #32
 8009c50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b095      	sub	sp, #84	@ 0x54
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	330c      	adds	r3, #12
 8009c6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c72:	e853 3f00 	ldrex	r3, [r3]
 8009c76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	330c      	adds	r3, #12
 8009c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009c88:	643a      	str	r2, [r7, #64]	@ 0x40
 8009c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c90:	e841 2300 	strex	r3, r2, [r1]
 8009c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1e5      	bne.n	8009c68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3314      	adds	r3, #20
 8009ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	e853 3f00 	ldrex	r3, [r3]
 8009caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	f023 0301 	bic.w	r3, r3, #1
 8009cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	3314      	adds	r3, #20
 8009cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cc4:	e841 2300 	strex	r3, r2, [r1]
 8009cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d1e5      	bne.n	8009c9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d119      	bne.n	8009d0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	330c      	adds	r3, #12
 8009cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	f023 0310 	bic.w	r3, r3, #16
 8009cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	330c      	adds	r3, #12
 8009cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cf8:	61ba      	str	r2, [r7, #24]
 8009cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	6979      	ldr	r1, [r7, #20]
 8009cfe:	69ba      	ldr	r2, [r7, #24]
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	613b      	str	r3, [r7, #16]
   return(result);
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e5      	bne.n	8009cd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2220      	movs	r2, #32
 8009d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009d1a:	bf00      	nop
 8009d1c:	3754      	adds	r7, #84	@ 0x54
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d24:	4770      	bx	lr

08009d26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7ff ff40 	bl	8009bc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d40:	bf00      	nop
 8009d42:	3710      	adds	r7, #16
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b21      	cmp	r3, #33	@ 0x21
 8009d5a:	d13e      	bne.n	8009dda <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d64:	d114      	bne.n	8009d90 <UART_Transmit_IT+0x48>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d110      	bne.n	8009d90 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6a1b      	ldr	r3, [r3, #32]
 8009d72:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d82:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6a1b      	ldr	r3, [r3, #32]
 8009d88:	1c9a      	adds	r2, r3, #2
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	621a      	str	r2, [r3, #32]
 8009d8e:	e008      	b.n	8009da2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a1b      	ldr	r3, [r3, #32]
 8009d94:	1c59      	adds	r1, r3, #1
 8009d96:	687a      	ldr	r2, [r7, #4]
 8009d98:	6211      	str	r1, [r2, #32]
 8009d9a:	781a      	ldrb	r2, [r3, #0]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	3b01      	subs	r3, #1
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	4619      	mov	r1, r3
 8009db0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10f      	bne.n	8009dd6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009dc4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68da      	ldr	r2, [r3, #12]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009dd4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	e000      	b.n	8009ddc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009dda:	2302      	movs	r3, #2
  }
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3714      	adds	r7, #20
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68da      	ldr	r2, [r3, #12]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009dfe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2220      	movs	r2, #32
 8009e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7ff fecf 	bl	8009bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b08c      	sub	sp, #48	@ 0x30
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009e20:	2300      	movs	r3, #0
 8009e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009e24:	2300      	movs	r3, #0
 8009e26:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b22      	cmp	r3, #34	@ 0x22
 8009e32:	f040 80aa 	bne.w	8009f8a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e3e:	d115      	bne.n	8009e6c <UART_Receive_IT+0x54>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d111      	bne.n	8009e6c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e64:	1c9a      	adds	r2, r3, #2
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	629a      	str	r2, [r3, #40]	@ 0x28
 8009e6a:	e024      	b.n	8009eb6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e7a:	d007      	beq.n	8009e8c <UART_Receive_IT+0x74>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10a      	bne.n	8009e9a <UART_Receive_IT+0x82>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d106      	bne.n	8009e9a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	b2da      	uxtb	r2, r3
 8009e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e96:	701a      	strb	r2, [r3, #0]
 8009e98:	e008      	b.n	8009eac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eaa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eb0:	1c5a      	adds	r2, r3, #1
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	3b01      	subs	r3, #1
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d15d      	bne.n	8009f86 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68da      	ldr	r2, [r3, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0220 	bic.w	r2, r2, #32
 8009ed8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ee8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	695a      	ldr	r2, [r3, #20]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f022 0201 	bic.w	r2, r2, #1
 8009ef8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2220      	movs	r2, #32
 8009efe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2200      	movs	r2, #0
 8009f06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d135      	bne.n	8009f7c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	330c      	adds	r3, #12
 8009f1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	e853 3f00 	ldrex	r3, [r3]
 8009f24:	613b      	str	r3, [r7, #16]
   return(result);
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f023 0310 	bic.w	r3, r3, #16
 8009f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	330c      	adds	r3, #12
 8009f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f36:	623a      	str	r2, [r7, #32]
 8009f38:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f3a:	69f9      	ldr	r1, [r7, #28]
 8009f3c:	6a3a      	ldr	r2, [r7, #32]
 8009f3e:	e841 2300 	strex	r3, r2, [r1]
 8009f42:	61bb      	str	r3, [r7, #24]
   return(result);
 8009f44:	69bb      	ldr	r3, [r7, #24]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1e5      	bne.n	8009f16 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 0310 	and.w	r3, r3, #16
 8009f54:	2b10      	cmp	r3, #16
 8009f56:	d10a      	bne.n	8009f6e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f58:	2300      	movs	r3, #0
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	60fb      	str	r3, [r7, #12]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009f72:	4619      	mov	r1, r3
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f7ff fe2d 	bl	8009bd4 <HAL_UARTEx_RxEventCallback>
 8009f7a:	e002      	b.n	8009f82 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7fc fc3f 	bl	8006800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	e002      	b.n	8009f8c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	e000      	b.n	8009f8c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009f8a:	2302      	movs	r3, #2
  }
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3730      	adds	r7, #48	@ 0x30
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f98:	b0c0      	sub	sp, #256	@ 0x100
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fb0:	68d9      	ldr	r1, [r3, #12]
 8009fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	ea40 0301 	orr.w	r3, r0, r1
 8009fbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	431a      	orrs	r2, r3
 8009fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd0:	695b      	ldr	r3, [r3, #20]
 8009fd2:	431a      	orrs	r2, r3
 8009fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009fec:	f021 010c 	bic.w	r1, r1, #12
 8009ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009ffa:	430b      	orrs	r3, r1
 8009ffc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	695b      	ldr	r3, [r3, #20]
 800a006:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a00a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a00e:	6999      	ldr	r1, [r3, #24]
 800a010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	ea40 0301 	orr.w	r3, r0, r1
 800a01a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a01c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	4b8f      	ldr	r3, [pc, #572]	@ (800a260 <UART_SetConfig+0x2cc>)
 800a024:	429a      	cmp	r2, r3
 800a026:	d005      	beq.n	800a034 <UART_SetConfig+0xa0>
 800a028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	4b8d      	ldr	r3, [pc, #564]	@ (800a264 <UART_SetConfig+0x2d0>)
 800a030:	429a      	cmp	r2, r3
 800a032:	d104      	bne.n	800a03e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a034:	f7fd fb6a 	bl	800770c <HAL_RCC_GetPCLK2Freq>
 800a038:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a03c:	e003      	b.n	800a046 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a03e:	f7fd fb51 	bl	80076e4 <HAL_RCC_GetPCLK1Freq>
 800a042:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a04a:	69db      	ldr	r3, [r3, #28]
 800a04c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a050:	f040 810c 	bne.w	800a26c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a054:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a058:	2200      	movs	r2, #0
 800a05a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a05e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a062:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a066:	4622      	mov	r2, r4
 800a068:	462b      	mov	r3, r5
 800a06a:	1891      	adds	r1, r2, r2
 800a06c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a06e:	415b      	adcs	r3, r3
 800a070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a072:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a076:	4621      	mov	r1, r4
 800a078:	eb12 0801 	adds.w	r8, r2, r1
 800a07c:	4629      	mov	r1, r5
 800a07e:	eb43 0901 	adc.w	r9, r3, r1
 800a082:	f04f 0200 	mov.w	r2, #0
 800a086:	f04f 0300 	mov.w	r3, #0
 800a08a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a08e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a096:	4690      	mov	r8, r2
 800a098:	4699      	mov	r9, r3
 800a09a:	4623      	mov	r3, r4
 800a09c:	eb18 0303 	adds.w	r3, r8, r3
 800a0a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a0a4:	462b      	mov	r3, r5
 800a0a6:	eb49 0303 	adc.w	r3, r9, r3
 800a0aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a0ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a0ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a0be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	18db      	adds	r3, r3, r3
 800a0c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	eb42 0303 	adc.w	r3, r2, r3
 800a0ce:	657b      	str	r3, [r7, #84]	@ 0x54
 800a0d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a0d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a0d8:	f7f6 f942 	bl	8000360 <__aeabi_uldivmod>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	460b      	mov	r3, r1
 800a0e0:	4b61      	ldr	r3, [pc, #388]	@ (800a268 <UART_SetConfig+0x2d4>)
 800a0e2:	fba3 2302 	umull	r2, r3, r3, r2
 800a0e6:	095b      	lsrs	r3, r3, #5
 800a0e8:	011c      	lsls	r4, r3, #4
 800a0ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a0f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a0f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	1891      	adds	r1, r2, r2
 800a102:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a104:	415b      	adcs	r3, r3
 800a106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a108:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a10c:	4641      	mov	r1, r8
 800a10e:	eb12 0a01 	adds.w	sl, r2, r1
 800a112:	4649      	mov	r1, r9
 800a114:	eb43 0b01 	adc.w	fp, r3, r1
 800a118:	f04f 0200 	mov.w	r2, #0
 800a11c:	f04f 0300 	mov.w	r3, #0
 800a120:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a124:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a12c:	4692      	mov	sl, r2
 800a12e:	469b      	mov	fp, r3
 800a130:	4643      	mov	r3, r8
 800a132:	eb1a 0303 	adds.w	r3, sl, r3
 800a136:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a13a:	464b      	mov	r3, r9
 800a13c:	eb4b 0303 	adc.w	r3, fp, r3
 800a140:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a150:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a154:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a158:	460b      	mov	r3, r1
 800a15a:	18db      	adds	r3, r3, r3
 800a15c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a15e:	4613      	mov	r3, r2
 800a160:	eb42 0303 	adc.w	r3, r2, r3
 800a164:	647b      	str	r3, [r7, #68]	@ 0x44
 800a166:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a16a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a16e:	f7f6 f8f7 	bl	8000360 <__aeabi_uldivmod>
 800a172:	4602      	mov	r2, r0
 800a174:	460b      	mov	r3, r1
 800a176:	4611      	mov	r1, r2
 800a178:	4b3b      	ldr	r3, [pc, #236]	@ (800a268 <UART_SetConfig+0x2d4>)
 800a17a:	fba3 2301 	umull	r2, r3, r3, r1
 800a17e:	095b      	lsrs	r3, r3, #5
 800a180:	2264      	movs	r2, #100	@ 0x64
 800a182:	fb02 f303 	mul.w	r3, r2, r3
 800a186:	1acb      	subs	r3, r1, r3
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a18e:	4b36      	ldr	r3, [pc, #216]	@ (800a268 <UART_SetConfig+0x2d4>)
 800a190:	fba3 2302 	umull	r2, r3, r3, r2
 800a194:	095b      	lsrs	r3, r3, #5
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a19c:	441c      	add	r4, r3
 800a19e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a1a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a1ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a1b0:	4642      	mov	r2, r8
 800a1b2:	464b      	mov	r3, r9
 800a1b4:	1891      	adds	r1, r2, r2
 800a1b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a1b8:	415b      	adcs	r3, r3
 800a1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a1c0:	4641      	mov	r1, r8
 800a1c2:	1851      	adds	r1, r2, r1
 800a1c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	414b      	adcs	r3, r1
 800a1ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	f04f 0300 	mov.w	r3, #0
 800a1d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a1d8:	4659      	mov	r1, fp
 800a1da:	00cb      	lsls	r3, r1, #3
 800a1dc:	4651      	mov	r1, sl
 800a1de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1e2:	4651      	mov	r1, sl
 800a1e4:	00ca      	lsls	r2, r1, #3
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	4619      	mov	r1, r3
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4642      	mov	r2, r8
 800a1ee:	189b      	adds	r3, r3, r2
 800a1f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a1f4:	464b      	mov	r3, r9
 800a1f6:	460a      	mov	r2, r1
 800a1f8:	eb42 0303 	adc.w	r3, r2, r3
 800a1fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a20c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a210:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a214:	460b      	mov	r3, r1
 800a216:	18db      	adds	r3, r3, r3
 800a218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a21a:	4613      	mov	r3, r2
 800a21c:	eb42 0303 	adc.w	r3, r2, r3
 800a220:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a222:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a226:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a22a:	f7f6 f899 	bl	8000360 <__aeabi_uldivmod>
 800a22e:	4602      	mov	r2, r0
 800a230:	460b      	mov	r3, r1
 800a232:	4b0d      	ldr	r3, [pc, #52]	@ (800a268 <UART_SetConfig+0x2d4>)
 800a234:	fba3 1302 	umull	r1, r3, r3, r2
 800a238:	095b      	lsrs	r3, r3, #5
 800a23a:	2164      	movs	r1, #100	@ 0x64
 800a23c:	fb01 f303 	mul.w	r3, r1, r3
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	00db      	lsls	r3, r3, #3
 800a244:	3332      	adds	r3, #50	@ 0x32
 800a246:	4a08      	ldr	r2, [pc, #32]	@ (800a268 <UART_SetConfig+0x2d4>)
 800a248:	fba2 2303 	umull	r2, r3, r2, r3
 800a24c:	095b      	lsrs	r3, r3, #5
 800a24e:	f003 0207 	and.w	r2, r3, #7
 800a252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4422      	add	r2, r4
 800a25a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a25c:	e106      	b.n	800a46c <UART_SetConfig+0x4d8>
 800a25e:	bf00      	nop
 800a260:	40011000 	.word	0x40011000
 800a264:	40011400 	.word	0x40011400
 800a268:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a26c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a270:	2200      	movs	r2, #0
 800a272:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a276:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a27a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a27e:	4642      	mov	r2, r8
 800a280:	464b      	mov	r3, r9
 800a282:	1891      	adds	r1, r2, r2
 800a284:	6239      	str	r1, [r7, #32]
 800a286:	415b      	adcs	r3, r3
 800a288:	627b      	str	r3, [r7, #36]	@ 0x24
 800a28a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a28e:	4641      	mov	r1, r8
 800a290:	1854      	adds	r4, r2, r1
 800a292:	4649      	mov	r1, r9
 800a294:	eb43 0501 	adc.w	r5, r3, r1
 800a298:	f04f 0200 	mov.w	r2, #0
 800a29c:	f04f 0300 	mov.w	r3, #0
 800a2a0:	00eb      	lsls	r3, r5, #3
 800a2a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2a6:	00e2      	lsls	r2, r4, #3
 800a2a8:	4614      	mov	r4, r2
 800a2aa:	461d      	mov	r5, r3
 800a2ac:	4643      	mov	r3, r8
 800a2ae:	18e3      	adds	r3, r4, r3
 800a2b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a2b4:	464b      	mov	r3, r9
 800a2b6:	eb45 0303 	adc.w	r3, r5, r3
 800a2ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a2be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a2ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a2ce:	f04f 0200 	mov.w	r2, #0
 800a2d2:	f04f 0300 	mov.w	r3, #0
 800a2d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a2da:	4629      	mov	r1, r5
 800a2dc:	008b      	lsls	r3, r1, #2
 800a2de:	4621      	mov	r1, r4
 800a2e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	008a      	lsls	r2, r1, #2
 800a2e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a2ec:	f7f6 f838 	bl	8000360 <__aeabi_uldivmod>
 800a2f0:	4602      	mov	r2, r0
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	4b60      	ldr	r3, [pc, #384]	@ (800a478 <UART_SetConfig+0x4e4>)
 800a2f6:	fba3 2302 	umull	r2, r3, r3, r2
 800a2fa:	095b      	lsrs	r3, r3, #5
 800a2fc:	011c      	lsls	r4, r3, #4
 800a2fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a302:	2200      	movs	r2, #0
 800a304:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a308:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a30c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a310:	4642      	mov	r2, r8
 800a312:	464b      	mov	r3, r9
 800a314:	1891      	adds	r1, r2, r2
 800a316:	61b9      	str	r1, [r7, #24]
 800a318:	415b      	adcs	r3, r3
 800a31a:	61fb      	str	r3, [r7, #28]
 800a31c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a320:	4641      	mov	r1, r8
 800a322:	1851      	adds	r1, r2, r1
 800a324:	6139      	str	r1, [r7, #16]
 800a326:	4649      	mov	r1, r9
 800a328:	414b      	adcs	r3, r1
 800a32a:	617b      	str	r3, [r7, #20]
 800a32c:	f04f 0200 	mov.w	r2, #0
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a338:	4659      	mov	r1, fp
 800a33a:	00cb      	lsls	r3, r1, #3
 800a33c:	4651      	mov	r1, sl
 800a33e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a342:	4651      	mov	r1, sl
 800a344:	00ca      	lsls	r2, r1, #3
 800a346:	4610      	mov	r0, r2
 800a348:	4619      	mov	r1, r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	4642      	mov	r2, r8
 800a34e:	189b      	adds	r3, r3, r2
 800a350:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a354:	464b      	mov	r3, r9
 800a356:	460a      	mov	r2, r1
 800a358:	eb42 0303 	adc.w	r3, r2, r3
 800a35c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a36a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a36c:	f04f 0200 	mov.w	r2, #0
 800a370:	f04f 0300 	mov.w	r3, #0
 800a374:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a378:	4649      	mov	r1, r9
 800a37a:	008b      	lsls	r3, r1, #2
 800a37c:	4641      	mov	r1, r8
 800a37e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a382:	4641      	mov	r1, r8
 800a384:	008a      	lsls	r2, r1, #2
 800a386:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a38a:	f7f5 ffe9 	bl	8000360 <__aeabi_uldivmod>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4611      	mov	r1, r2
 800a394:	4b38      	ldr	r3, [pc, #224]	@ (800a478 <UART_SetConfig+0x4e4>)
 800a396:	fba3 2301 	umull	r2, r3, r3, r1
 800a39a:	095b      	lsrs	r3, r3, #5
 800a39c:	2264      	movs	r2, #100	@ 0x64
 800a39e:	fb02 f303 	mul.w	r3, r2, r3
 800a3a2:	1acb      	subs	r3, r1, r3
 800a3a4:	011b      	lsls	r3, r3, #4
 800a3a6:	3332      	adds	r3, #50	@ 0x32
 800a3a8:	4a33      	ldr	r2, [pc, #204]	@ (800a478 <UART_SetConfig+0x4e4>)
 800a3aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ae:	095b      	lsrs	r3, r3, #5
 800a3b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a3b4:	441c      	add	r4, r3
 800a3b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	673b      	str	r3, [r7, #112]	@ 0x70
 800a3be:	677a      	str	r2, [r7, #116]	@ 0x74
 800a3c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a3c4:	4642      	mov	r2, r8
 800a3c6:	464b      	mov	r3, r9
 800a3c8:	1891      	adds	r1, r2, r2
 800a3ca:	60b9      	str	r1, [r7, #8]
 800a3cc:	415b      	adcs	r3, r3
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a3d4:	4641      	mov	r1, r8
 800a3d6:	1851      	adds	r1, r2, r1
 800a3d8:	6039      	str	r1, [r7, #0]
 800a3da:	4649      	mov	r1, r9
 800a3dc:	414b      	adcs	r3, r1
 800a3de:	607b      	str	r3, [r7, #4]
 800a3e0:	f04f 0200 	mov.w	r2, #0
 800a3e4:	f04f 0300 	mov.w	r3, #0
 800a3e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a3ec:	4659      	mov	r1, fp
 800a3ee:	00cb      	lsls	r3, r1, #3
 800a3f0:	4651      	mov	r1, sl
 800a3f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a3f6:	4651      	mov	r1, sl
 800a3f8:	00ca      	lsls	r2, r1, #3
 800a3fa:	4610      	mov	r0, r2
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	4603      	mov	r3, r0
 800a400:	4642      	mov	r2, r8
 800a402:	189b      	adds	r3, r3, r2
 800a404:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a406:	464b      	mov	r3, r9
 800a408:	460a      	mov	r2, r1
 800a40a:	eb42 0303 	adc.w	r3, r2, r3
 800a40e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	663b      	str	r3, [r7, #96]	@ 0x60
 800a41a:	667a      	str	r2, [r7, #100]	@ 0x64
 800a41c:	f04f 0200 	mov.w	r2, #0
 800a420:	f04f 0300 	mov.w	r3, #0
 800a424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a428:	4649      	mov	r1, r9
 800a42a:	008b      	lsls	r3, r1, #2
 800a42c:	4641      	mov	r1, r8
 800a42e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a432:	4641      	mov	r1, r8
 800a434:	008a      	lsls	r2, r1, #2
 800a436:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a43a:	f7f5 ff91 	bl	8000360 <__aeabi_uldivmod>
 800a43e:	4602      	mov	r2, r0
 800a440:	460b      	mov	r3, r1
 800a442:	4b0d      	ldr	r3, [pc, #52]	@ (800a478 <UART_SetConfig+0x4e4>)
 800a444:	fba3 1302 	umull	r1, r3, r3, r2
 800a448:	095b      	lsrs	r3, r3, #5
 800a44a:	2164      	movs	r1, #100	@ 0x64
 800a44c:	fb01 f303 	mul.w	r3, r1, r3
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	011b      	lsls	r3, r3, #4
 800a454:	3332      	adds	r3, #50	@ 0x32
 800a456:	4a08      	ldr	r2, [pc, #32]	@ (800a478 <UART_SetConfig+0x4e4>)
 800a458:	fba2 2303 	umull	r2, r3, r2, r3
 800a45c:	095b      	lsrs	r3, r3, #5
 800a45e:	f003 020f 	and.w	r2, r3, #15
 800a462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4422      	add	r2, r4
 800a46a:	609a      	str	r2, [r3, #8]
}
 800a46c:	bf00      	nop
 800a46e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a472:	46bd      	mov	sp, r7
 800a474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a478:	51eb851f 	.word	0x51eb851f

0800a47c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a480:	4904      	ldr	r1, [pc, #16]	@ (800a494 <MX_FATFS_Init+0x18>)
 800a482:	4805      	ldr	r0, [pc, #20]	@ (800a498 <MX_FATFS_Init+0x1c>)
 800a484:	f003 fa9c 	bl	800d9c0 <FATFS_LinkDriver>
 800a488:	4603      	mov	r3, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	4b03      	ldr	r3, [pc, #12]	@ (800a49c <MX_FATFS_Init+0x20>)
 800a48e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a490:	bf00      	nop
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20006730 	.word	0x20006730
 800a498:	20000050 	.word	0x20000050
 800a49c:	2000672c 	.word	0x2000672c

0800a4a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a4a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  //  Stat = STA_NOINIT;
    //return Stat;
	SD_disk_initialize(pdrv);
 800a4ba:	79fb      	ldrb	r3, [r7, #7]
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7f6 fb43 	bl	8000b48 <SD_disk_initialize>
  /* USER CODE END INIT */
}
 800a4c2:	bf00      	nop
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  //  Stat = STA_NOINIT;
   // return Stat;
	SD_disk_status(pdrv);
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7f6 fc21 	bl	8000d20 <SD_disk_status>
  /* USER CODE END STATUS */
}
 800a4de:	bf00      	nop
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	607a      	str	r2, [r7, #4]
 800a4f2:	603b      	str	r3, [r7, #0]
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	SD_disk_read(pdrv, buff, sector, count);
 800a4f8:	7bf8      	ldrb	r0, [r7, #15]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	68b9      	ldr	r1, [r7, #8]
 800a500:	f7f6 fc24 	bl	8000d4c <SD_disk_read>
  /* USER CODE END READ */
}
 800a504:	bf00      	nop
 800a506:	4618      	mov	r0, r3
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
 800a51a:	4603      	mov	r3, r0
 800a51c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	SD_disk_write (pdrv, buff, sector, count);
 800a51e:	7bf8      	ldrb	r0, [r7, #15]
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	68b9      	ldr	r1, [r7, #8]
 800a526:	f7f6 fc7b 	bl	8000e20 <SD_disk_write>
  /* USER CODE END WRITE */
}
 800a52a:	bf00      	nop
 800a52c:	4618      	mov	r0, r3
 800a52e:	3710      	adds	r7, #16
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	4603      	mov	r3, r0
 800a53c:	603a      	str	r2, [r7, #0]
 800a53e:	71fb      	strb	r3, [r7, #7]
 800a540:	460b      	mov	r3, r1
 800a542:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	SD_disk_ioctl (pdrv, cmd, buff);
 800a544:	79fb      	ldrb	r3, [r7, #7]
 800a546:	79b9      	ldrb	r1, [r7, #6]
 800a548:	683a      	ldr	r2, [r7, #0]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7f6 fcec 	bl	8000f28 <SD_disk_ioctl>

  /* USER CODE END IOCTL */
}
 800a550:	bf00      	nop
 800a552:	4618      	mov	r0, r3
 800a554:	3708      	adds	r7, #8
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	4603      	mov	r3, r0
 800a564:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a566:	79fb      	ldrb	r3, [r7, #7]
 800a568:	4a08      	ldr	r2, [pc, #32]	@ (800a58c <disk_status+0x30>)
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	4413      	add	r3, r2
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	79fa      	ldrb	r2, [r7, #7]
 800a574:	4905      	ldr	r1, [pc, #20]	@ (800a58c <disk_status+0x30>)
 800a576:	440a      	add	r2, r1
 800a578:	7a12      	ldrb	r2, [r2, #8]
 800a57a:	4610      	mov	r0, r2
 800a57c:	4798      	blx	r3
 800a57e:	4603      	mov	r3, r0
 800a580:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a582:	7bfb      	ldrb	r3, [r7, #15]
}
 800a584:	4618      	mov	r0, r3
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	2000695c 	.word	0x2000695c

0800a590 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	4603      	mov	r3, r0
 800a598:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a59e:	79fb      	ldrb	r3, [r7, #7]
 800a5a0:	4a0e      	ldr	r2, [pc, #56]	@ (800a5dc <disk_initialize+0x4c>)
 800a5a2:	5cd3      	ldrb	r3, [r2, r3]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d114      	bne.n	800a5d2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a5a8:	79fb      	ldrb	r3, [r7, #7]
 800a5aa:	4a0c      	ldr	r2, [pc, #48]	@ (800a5dc <disk_initialize+0x4c>)
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	79fa      	ldrb	r2, [r7, #7]
 800a5b6:	4909      	ldr	r1, [pc, #36]	@ (800a5dc <disk_initialize+0x4c>)
 800a5b8:	440a      	add	r2, r1
 800a5ba:	7a12      	ldrb	r2, [r2, #8]
 800a5bc:	4610      	mov	r0, r2
 800a5be:	4798      	blx	r3
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800a5c4:	7bfb      	ldrb	r3, [r7, #15]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d103      	bne.n	800a5d2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800a5ca:	79fb      	ldrb	r3, [r7, #7]
 800a5cc:	4a03      	ldr	r2, [pc, #12]	@ (800a5dc <disk_initialize+0x4c>)
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	2000695c 	.word	0x2000695c

0800a5e0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a5e0:	b590      	push	{r4, r7, lr}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60b9      	str	r1, [r7, #8]
 800a5e8:	607a      	str	r2, [r7, #4]
 800a5ea:	603b      	str	r3, [r7, #0]
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
 800a5f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a61c <disk_read+0x3c>)
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	4413      	add	r3, r2
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	689c      	ldr	r4, [r3, #8]
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	4a07      	ldr	r2, [pc, #28]	@ (800a61c <disk_read+0x3c>)
 800a600:	4413      	add	r3, r2
 800a602:	7a18      	ldrb	r0, [r3, #8]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	687a      	ldr	r2, [r7, #4]
 800a608:	68b9      	ldr	r1, [r7, #8]
 800a60a:	47a0      	blx	r4
 800a60c:	4603      	mov	r3, r0
 800a60e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a610:	7dfb      	ldrb	r3, [r7, #23]
}
 800a612:	4618      	mov	r0, r3
 800a614:	371c      	adds	r7, #28
 800a616:	46bd      	mov	sp, r7
 800a618:	bd90      	pop	{r4, r7, pc}
 800a61a:	bf00      	nop
 800a61c:	2000695c 	.word	0x2000695c

0800a620 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	60b9      	str	r1, [r7, #8]
 800a628:	607a      	str	r2, [r7, #4]
 800a62a:	603b      	str	r3, [r7, #0]
 800a62c:	4603      	mov	r3, r0
 800a62e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a630:	7bfb      	ldrb	r3, [r7, #15]
 800a632:	4a0a      	ldr	r2, [pc, #40]	@ (800a65c <disk_write+0x3c>)
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	68dc      	ldr	r4, [r3, #12]
 800a63c:	7bfb      	ldrb	r3, [r7, #15]
 800a63e:	4a07      	ldr	r2, [pc, #28]	@ (800a65c <disk_write+0x3c>)
 800a640:	4413      	add	r3, r2
 800a642:	7a18      	ldrb	r0, [r3, #8]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	68b9      	ldr	r1, [r7, #8]
 800a64a:	47a0      	blx	r4
 800a64c:	4603      	mov	r3, r0
 800a64e:	75fb      	strb	r3, [r7, #23]
  return res;
 800a650:	7dfb      	ldrb	r3, [r7, #23]
}
 800a652:	4618      	mov	r0, r3
 800a654:	371c      	adds	r7, #28
 800a656:	46bd      	mov	sp, r7
 800a658:	bd90      	pop	{r4, r7, pc}
 800a65a:	bf00      	nop
 800a65c:	2000695c 	.word	0x2000695c

0800a660 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	4603      	mov	r3, r0
 800a668:	603a      	str	r2, [r7, #0]
 800a66a:	71fb      	strb	r3, [r7, #7]
 800a66c:	460b      	mov	r3, r1
 800a66e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a670:	79fb      	ldrb	r3, [r7, #7]
 800a672:	4a09      	ldr	r2, [pc, #36]	@ (800a698 <disk_ioctl+0x38>)
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	79fa      	ldrb	r2, [r7, #7]
 800a67e:	4906      	ldr	r1, [pc, #24]	@ (800a698 <disk_ioctl+0x38>)
 800a680:	440a      	add	r2, r1
 800a682:	7a10      	ldrb	r0, [r2, #8]
 800a684:	79b9      	ldrb	r1, [r7, #6]
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	4798      	blx	r3
 800a68a:	4603      	mov	r3, r0
 800a68c:	73fb      	strb	r3, [r7, #15]
  return res;
 800a68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a690:	4618      	mov	r0, r3
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	2000695c 	.word	0x2000695c

0800a69c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a6ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	b21a      	sxth	r2, r3
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	b21b      	sxth	r3, r3
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	b21b      	sxth	r3, r3
 800a6be:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a6c0:	89fb      	ldrh	r3, [r7, #14]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3714      	adds	r7, #20
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	b085      	sub	sp, #20
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	3303      	adds	r3, #3
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	021b      	lsls	r3, r3, #8
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	3202      	adds	r2, #2
 800a6e6:	7812      	ldrb	r2, [r2, #0]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	021b      	lsls	r3, r3, #8
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	3201      	adds	r2, #1
 800a6f4:	7812      	ldrb	r2, [r2, #0]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	021b      	lsls	r3, r3, #8
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	7812      	ldrb	r2, [r2, #0]
 800a702:	4313      	orrs	r3, r2
 800a704:	60fb      	str	r3, [r7, #12]
	return rv;
 800a706:	68fb      	ldr	r3, [r7, #12]
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3714      	adds	r7, #20
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
 800a71c:	460b      	mov	r3, r1
 800a71e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	1c5a      	adds	r2, r3, #1
 800a724:	607a      	str	r2, [r7, #4]
 800a726:	887a      	ldrh	r2, [r7, #2]
 800a728:	b2d2      	uxtb	r2, r2
 800a72a:	701a      	strb	r2, [r3, #0]
 800a72c:	887b      	ldrh	r3, [r7, #2]
 800a72e:	0a1b      	lsrs	r3, r3, #8
 800a730:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	887a      	ldrh	r2, [r7, #2]
 800a73a:	b2d2      	uxtb	r2, r2
 800a73c:	701a      	strb	r2, [r3, #0]
}
 800a73e:	bf00      	nop
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a74a:	b480      	push	{r7}
 800a74c:	b083      	sub	sp, #12
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	1c5a      	adds	r2, r3, #1
 800a758:	607a      	str	r2, [r7, #4]
 800a75a:	683a      	ldr	r2, [r7, #0]
 800a75c:	b2d2      	uxtb	r2, r2
 800a75e:	701a      	strb	r2, [r3, #0]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	0a1b      	lsrs	r3, r3, #8
 800a764:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	1c5a      	adds	r2, r3, #1
 800a76a:	607a      	str	r2, [r7, #4]
 800a76c:	683a      	ldr	r2, [r7, #0]
 800a76e:	b2d2      	uxtb	r2, r2
 800a770:	701a      	strb	r2, [r3, #0]
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	0a1b      	lsrs	r3, r3, #8
 800a776:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	1c5a      	adds	r2, r3, #1
 800a77c:	607a      	str	r2, [r7, #4]
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	b2d2      	uxtb	r2, r2
 800a782:	701a      	strb	r2, [r3, #0]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	0a1b      	lsrs	r3, r3, #8
 800a788:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	1c5a      	adds	r2, r3, #1
 800a78e:	607a      	str	r2, [r7, #4]
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	b2d2      	uxtb	r2, r2
 800a794:	701a      	strb	r2, [r3, #0]
}
 800a796:	bf00      	nop
 800a798:	370c      	adds	r7, #12
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a7a2:	b480      	push	{r7}
 800a7a4:	b087      	sub	sp, #28
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	60f8      	str	r0, [r7, #12]
 800a7aa:	60b9      	str	r1, [r7, #8]
 800a7ac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d00d      	beq.n	800a7d8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a7bc:	693a      	ldr	r2, [r7, #16]
 800a7be:	1c53      	adds	r3, r2, #1
 800a7c0:	613b      	str	r3, [r7, #16]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	1c59      	adds	r1, r3, #1
 800a7c6:	6179      	str	r1, [r7, #20]
 800a7c8:	7812      	ldrb	r2, [r2, #0]
 800a7ca:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	607b      	str	r3, [r7, #4]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1f1      	bne.n	800a7bc <mem_cpy+0x1a>
	}
}
 800a7d8:	bf00      	nop
 800a7da:	371c      	adds	r7, #28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	1c5a      	adds	r2, r3, #1
 800a7f8:	617a      	str	r2, [r7, #20]
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	b2d2      	uxtb	r2, r2
 800a7fe:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3b01      	subs	r3, #1
 800a804:	607b      	str	r3, [r7, #4]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d1f3      	bne.n	800a7f4 <mem_set+0x10>
}
 800a80c:	bf00      	nop
 800a80e:	bf00      	nop
 800a810:	371c      	adds	r7, #28
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a81a:	b480      	push	{r7}
 800a81c:	b089      	sub	sp, #36	@ 0x24
 800a81e:	af00      	add	r7, sp, #0
 800a820:	60f8      	str	r0, [r7, #12]
 800a822:	60b9      	str	r1, [r7, #8]
 800a824:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	61fb      	str	r3, [r7, #28]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a82e:	2300      	movs	r3, #0
 800a830:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	61fa      	str	r2, [r7, #28]
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	4619      	mov	r1, r3
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	61ba      	str	r2, [r7, #24]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	1acb      	subs	r3, r1, r3
 800a846:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	3b01      	subs	r3, #1
 800a84c:	607b      	str	r3, [r7, #4]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <mem_cmp+0x40>
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0eb      	beq.n	800a832 <mem_cmp+0x18>

	return r;
 800a85a:	697b      	ldr	r3, [r7, #20]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3724      	adds	r7, #36	@ 0x24
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a872:	e002      	b.n	800a87a <chk_chr+0x12>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	3301      	adds	r3, #1
 800a878:	607b      	str	r3, [r7, #4]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d005      	beq.n	800a88e <chk_chr+0x26>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	461a      	mov	r2, r3
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d1f2      	bne.n	800a874 <chk_chr+0xc>
	return *str;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	781b      	ldrb	r3, [r3, #0]
}
 800a892:	4618      	mov	r0, r3
 800a894:	370c      	adds	r7, #12
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60bb      	str	r3, [r7, #8]
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	e029      	b.n	800a908 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a8b4:	4a27      	ldr	r2, [pc, #156]	@ (800a954 <chk_lock+0xb4>)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	011b      	lsls	r3, r3, #4
 800a8ba:	4413      	add	r3, r2
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d01d      	beq.n	800a8fe <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a8c2:	4a24      	ldr	r2, [pc, #144]	@ (800a954 <chk_lock+0xb4>)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	011b      	lsls	r3, r3, #4
 800a8c8:	4413      	add	r3, r2
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d116      	bne.n	800a902 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a8d4:	4a1f      	ldr	r2, [pc, #124]	@ (800a954 <chk_lock+0xb4>)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	011b      	lsls	r3, r3, #4
 800a8da:	4413      	add	r3, r2
 800a8dc:	3304      	adds	r3, #4
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d10c      	bne.n	800a902 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a8e8:	4a1a      	ldr	r2, [pc, #104]	@ (800a954 <chk_lock+0xb4>)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	4413      	add	r3, r2
 800a8f0:	3308      	adds	r3, #8
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d102      	bne.n	800a902 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a8fc:	e007      	b.n	800a90e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a8fe:	2301      	movs	r3, #1
 800a900:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3301      	adds	r3, #1
 800a906:	60fb      	str	r3, [r7, #12]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d9d2      	bls.n	800a8b4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b02      	cmp	r3, #2
 800a912:	d109      	bne.n	800a928 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d102      	bne.n	800a920 <chk_lock+0x80>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d101      	bne.n	800a924 <chk_lock+0x84>
 800a920:	2300      	movs	r3, #0
 800a922:	e010      	b.n	800a946 <chk_lock+0xa6>
 800a924:	2312      	movs	r3, #18
 800a926:	e00e      	b.n	800a946 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d108      	bne.n	800a940 <chk_lock+0xa0>
 800a92e:	4a09      	ldr	r2, [pc, #36]	@ (800a954 <chk_lock+0xb4>)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	011b      	lsls	r3, r3, #4
 800a934:	4413      	add	r3, r2
 800a936:	330c      	adds	r3, #12
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a93e:	d101      	bne.n	800a944 <chk_lock+0xa4>
 800a940:	2310      	movs	r3, #16
 800a942:	e000      	b.n	800a946 <chk_lock+0xa6>
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a950:	4770      	bx	lr
 800a952:	bf00      	nop
 800a954:	2000673c 	.word	0x2000673c

0800a958 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a95e:	2300      	movs	r3, #0
 800a960:	607b      	str	r3, [r7, #4]
 800a962:	e002      	b.n	800a96a <enq_lock+0x12>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	3301      	adds	r3, #1
 800a968:	607b      	str	r3, [r7, #4]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d806      	bhi.n	800a97e <enq_lock+0x26>
 800a970:	4a09      	ldr	r2, [pc, #36]	@ (800a998 <enq_lock+0x40>)
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	011b      	lsls	r3, r3, #4
 800a976:	4413      	add	r3, r2
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1f2      	bne.n	800a964 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2b02      	cmp	r3, #2
 800a982:	bf14      	ite	ne
 800a984:	2301      	movne	r3, #1
 800a986:	2300      	moveq	r3, #0
 800a988:	b2db      	uxtb	r3, r3
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	2000673c 	.word	0x2000673c

0800a99c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	60fb      	str	r3, [r7, #12]
 800a9aa:	e01f      	b.n	800a9ec <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a9ac:	4a41      	ldr	r2, [pc, #260]	@ (800aab4 <inc_lock+0x118>)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	011b      	lsls	r3, r3, #4
 800a9b2:	4413      	add	r3, r2
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d113      	bne.n	800a9e6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a9be:	4a3d      	ldr	r2, [pc, #244]	@ (800aab4 <inc_lock+0x118>)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	011b      	lsls	r3, r3, #4
 800a9c4:	4413      	add	r3, r2
 800a9c6:	3304      	adds	r3, #4
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d109      	bne.n	800a9e6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a9d2:	4a38      	ldr	r2, [pc, #224]	@ (800aab4 <inc_lock+0x118>)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	011b      	lsls	r3, r3, #4
 800a9d8:	4413      	add	r3, r2
 800a9da:	3308      	adds	r3, #8
 800a9dc:	681a      	ldr	r2, [r3, #0]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a9e2:	429a      	cmp	r2, r3
 800a9e4:	d006      	beq.n	800a9f4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	60fb      	str	r3, [r7, #12]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b01      	cmp	r3, #1
 800a9f0:	d9dc      	bls.n	800a9ac <inc_lock+0x10>
 800a9f2:	e000      	b.n	800a9f6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a9f4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d132      	bne.n	800aa62 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	60fb      	str	r3, [r7, #12]
 800aa00:	e002      	b.n	800aa08 <inc_lock+0x6c>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	3301      	adds	r3, #1
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d806      	bhi.n	800aa1c <inc_lock+0x80>
 800aa0e:	4a29      	ldr	r2, [pc, #164]	@ (800aab4 <inc_lock+0x118>)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	011b      	lsls	r3, r3, #4
 800aa14:	4413      	add	r3, r2
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1f2      	bne.n	800aa02 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2b02      	cmp	r3, #2
 800aa20:	d101      	bne.n	800aa26 <inc_lock+0x8a>
 800aa22:	2300      	movs	r3, #0
 800aa24:	e040      	b.n	800aaa8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	4922      	ldr	r1, [pc, #136]	@ (800aab4 <inc_lock+0x118>)
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	011b      	lsls	r3, r3, #4
 800aa30:	440b      	add	r3, r1
 800aa32:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	689a      	ldr	r2, [r3, #8]
 800aa38:	491e      	ldr	r1, [pc, #120]	@ (800aab4 <inc_lock+0x118>)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	011b      	lsls	r3, r3, #4
 800aa3e:	440b      	add	r3, r1
 800aa40:	3304      	adds	r3, #4
 800aa42:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	695a      	ldr	r2, [r3, #20]
 800aa48:	491a      	ldr	r1, [pc, #104]	@ (800aab4 <inc_lock+0x118>)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	440b      	add	r3, r1
 800aa50:	3308      	adds	r3, #8
 800aa52:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800aa54:	4a17      	ldr	r2, [pc, #92]	@ (800aab4 <inc_lock+0x118>)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	011b      	lsls	r3, r3, #4
 800aa5a:	4413      	add	r3, r2
 800aa5c:	330c      	adds	r3, #12
 800aa5e:	2200      	movs	r2, #0
 800aa60:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d009      	beq.n	800aa7c <inc_lock+0xe0>
 800aa68:	4a12      	ldr	r2, [pc, #72]	@ (800aab4 <inc_lock+0x118>)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	011b      	lsls	r3, r3, #4
 800aa6e:	4413      	add	r3, r2
 800aa70:	330c      	adds	r3, #12
 800aa72:	881b      	ldrh	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <inc_lock+0xe0>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	e015      	b.n	800aaa8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d108      	bne.n	800aa94 <inc_lock+0xf8>
 800aa82:	4a0c      	ldr	r2, [pc, #48]	@ (800aab4 <inc_lock+0x118>)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	011b      	lsls	r3, r3, #4
 800aa88:	4413      	add	r3, r2
 800aa8a:	330c      	adds	r3, #12
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	e001      	b.n	800aa98 <inc_lock+0xfc>
 800aa94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aa98:	4906      	ldr	r1, [pc, #24]	@ (800aab4 <inc_lock+0x118>)
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	011b      	lsls	r3, r3, #4
 800aa9e:	440b      	add	r3, r1
 800aaa0:	330c      	adds	r3, #12
 800aaa2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	3301      	adds	r3, #1
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	2000673c 	.word	0x2000673c

0800aab8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	607b      	str	r3, [r7, #4]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d825      	bhi.n	800ab18 <dec_lock+0x60>
		n = Files[i].ctr;
 800aacc:	4a17      	ldr	r2, [pc, #92]	@ (800ab2c <dec_lock+0x74>)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	011b      	lsls	r3, r3, #4
 800aad2:	4413      	add	r3, r2
 800aad4:	330c      	adds	r3, #12
 800aad6:	881b      	ldrh	r3, [r3, #0]
 800aad8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800aada:	89fb      	ldrh	r3, [r7, #14]
 800aadc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aae0:	d101      	bne.n	800aae6 <dec_lock+0x2e>
 800aae2:	2300      	movs	r3, #0
 800aae4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800aae6:	89fb      	ldrh	r3, [r7, #14]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d002      	beq.n	800aaf2 <dec_lock+0x3a>
 800aaec:	89fb      	ldrh	r3, [r7, #14]
 800aaee:	3b01      	subs	r3, #1
 800aaf0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800aaf2:	4a0e      	ldr	r2, [pc, #56]	@ (800ab2c <dec_lock+0x74>)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	4413      	add	r3, r2
 800aafa:	330c      	adds	r3, #12
 800aafc:	89fa      	ldrh	r2, [r7, #14]
 800aafe:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ab00:	89fb      	ldrh	r3, [r7, #14]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d105      	bne.n	800ab12 <dec_lock+0x5a>
 800ab06:	4a09      	ldr	r2, [pc, #36]	@ (800ab2c <dec_lock+0x74>)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	011b      	lsls	r3, r3, #4
 800ab0c:	4413      	add	r3, r2
 800ab0e:	2200      	movs	r2, #0
 800ab10:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	737b      	strb	r3, [r7, #13]
 800ab16:	e001      	b.n	800ab1c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ab18:	2302      	movs	r3, #2
 800ab1a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ab1c:	7b7b      	ldrb	r3, [r7, #13]
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3714      	adds	r7, #20
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	2000673c 	.word	0x2000673c

0800ab30 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ab38:	2300      	movs	r3, #0
 800ab3a:	60fb      	str	r3, [r7, #12]
 800ab3c:	e010      	b.n	800ab60 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ab3e:	4a0d      	ldr	r2, [pc, #52]	@ (800ab74 <clear_lock+0x44>)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	011b      	lsls	r3, r3, #4
 800ab44:	4413      	add	r3, r2
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d105      	bne.n	800ab5a <clear_lock+0x2a>
 800ab4e:	4a09      	ldr	r2, [pc, #36]	@ (800ab74 <clear_lock+0x44>)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	011b      	lsls	r3, r3, #4
 800ab54:	4413      	add	r3, r2
 800ab56:	2200      	movs	r2, #0
 800ab58:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d9eb      	bls.n	800ab3e <clear_lock+0xe>
	}
}
 800ab66:	bf00      	nop
 800ab68:	bf00      	nop
 800ab6a:	3714      	adds	r7, #20
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr
 800ab74:	2000673c 	.word	0x2000673c

0800ab78 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ab80:	2300      	movs	r3, #0
 800ab82:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	78db      	ldrb	r3, [r3, #3]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d034      	beq.n	800abf6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	7858      	ldrb	r0, [r3, #1]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	f7ff fd3e 	bl	800a620 <disk_write>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d002      	beq.n	800abb0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800abaa:	2301      	movs	r3, #1
 800abac:	73fb      	strb	r3, [r7, #15]
 800abae:	e022      	b.n	800abf6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abba:	697a      	ldr	r2, [r7, #20]
 800abbc:	1ad2      	subs	r2, r2, r3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a1b      	ldr	r3, [r3, #32]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d217      	bcs.n	800abf6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	789b      	ldrb	r3, [r3, #2]
 800abca:	613b      	str	r3, [r7, #16]
 800abcc:	e010      	b.n	800abf0 <sync_window+0x78>
					wsect += fs->fsize;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	697a      	ldr	r2, [r7, #20]
 800abd4:	4413      	add	r3, r2
 800abd6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	7858      	ldrb	r0, [r3, #1]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800abe2:	2301      	movs	r3, #1
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	f7ff fd1b 	bl	800a620 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	3b01      	subs	r3, #1
 800abee:	613b      	str	r3, [r7, #16]
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d8eb      	bhi.n	800abce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d01b      	beq.n	800ac50 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f7ff ffad 	bl	800ab78 <sync_window>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ac22:	7bfb      	ldrb	r3, [r7, #15]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d113      	bne.n	800ac50 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	7858      	ldrb	r0, [r3, #1]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ac32:	2301      	movs	r3, #1
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	f7ff fcd3 	bl	800a5e0 <disk_read>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d004      	beq.n	800ac4a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ac40:	f04f 33ff 	mov.w	r3, #4294967295
 800ac44:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	683a      	ldr	r2, [r7, #0]
 800ac4e:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800ac50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
	...

0800ac5c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f7ff ff87 	bl	800ab78 <sync_window>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d159      	bne.n	800ad28 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d149      	bne.n	800ad10 <sync_fs+0xb4>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	791b      	ldrb	r3, [r3, #4]
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d145      	bne.n	800ad10 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	899b      	ldrh	r3, [r3, #12]
 800ac8e:	461a      	mov	r2, r3
 800ac90:	2100      	movs	r1, #0
 800ac92:	f7ff fda7 	bl	800a7e4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	3338      	adds	r3, #56	@ 0x38
 800ac9a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ac9e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff fd36 	bl	800a714 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	3338      	adds	r3, #56	@ 0x38
 800acac:	4921      	ldr	r1, [pc, #132]	@ (800ad34 <sync_fs+0xd8>)
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff fd4b 	bl	800a74a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3338      	adds	r3, #56	@ 0x38
 800acb8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800acbc:	491e      	ldr	r1, [pc, #120]	@ (800ad38 <sync_fs+0xdc>)
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff fd43 	bl	800a74a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	3338      	adds	r3, #56	@ 0x38
 800acc8:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	4619      	mov	r1, r3
 800acd2:	4610      	mov	r0, r2
 800acd4:	f7ff fd39 	bl	800a74a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3338      	adds	r3, #56	@ 0x38
 800acdc:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	4619      	mov	r1, r3
 800ace6:	4610      	mov	r0, r2
 800ace8:	f7ff fd2f 	bl	800a74a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	7858      	ldrb	r0, [r3, #1]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad04:	2301      	movs	r3, #1
 800ad06:	f7ff fc8b 	bl	800a620 <disk_write>
			fs->fsi_flag = 0;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	785b      	ldrb	r3, [r3, #1]
 800ad14:	2200      	movs	r2, #0
 800ad16:	2100      	movs	r1, #0
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fca1 	bl	800a660 <disk_ioctl>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <sync_fs+0xcc>
 800ad24:	2301      	movs	r3, #1
 800ad26:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ad28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	41615252 	.word	0x41615252
 800ad38:	61417272 	.word	0x61417272

0800ad3c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	3b02      	subs	r3, #2
 800ad4a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	69db      	ldr	r3, [r3, #28]
 800ad50:	3b02      	subs	r3, #2
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d301      	bcc.n	800ad5c <clust2sect+0x20>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	e008      	b.n	800ad6e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	895b      	ldrh	r3, [r3, #10]
 800ad60:	461a      	mov	r2, r3
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	fb03 f202 	mul.w	r2, r3, r2
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6c:	4413      	add	r3, r2
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	370c      	adds	r7, #12
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b086      	sub	sp, #24
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d904      	bls.n	800ad9a <get_fat+0x20>
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	69db      	ldr	r3, [r3, #28]
 800ad94:	683a      	ldr	r2, [r7, #0]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d302      	bcc.n	800ada0 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	617b      	str	r3, [r7, #20]
 800ad9e:	e0ba      	b.n	800af16 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295
 800ada4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b03      	cmp	r3, #3
 800adac:	f000 8082 	beq.w	800aeb4 <get_fat+0x13a>
 800adb0:	2b03      	cmp	r3, #3
 800adb2:	f300 80a6 	bgt.w	800af02 <get_fat+0x188>
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d002      	beq.n	800adc0 <get_fat+0x46>
 800adba:	2b02      	cmp	r3, #2
 800adbc:	d055      	beq.n	800ae6a <get_fat+0xf0>
 800adbe:	e0a0      	b.n	800af02 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	085b      	lsrs	r3, r3, #1
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	4413      	add	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	899b      	ldrh	r3, [r3, #12]
 800add6:	4619      	mov	r1, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	fbb3 f3f1 	udiv	r3, r3, r1
 800adde:	4413      	add	r3, r2
 800ade0:	4619      	mov	r1, r3
 800ade2:	6938      	ldr	r0, [r7, #16]
 800ade4:	f7ff ff0c 	bl	800ac00 <move_window>
 800ade8:	4603      	mov	r3, r0
 800adea:	2b00      	cmp	r3, #0
 800adec:	f040 808c 	bne.w	800af08 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	60fa      	str	r2, [r7, #12]
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	8992      	ldrh	r2, [r2, #12]
 800adfa:	fbb3 f1f2 	udiv	r1, r3, r2
 800adfe:	fb01 f202 	mul.w	r2, r1, r2
 800ae02:	1a9b      	subs	r3, r3, r2
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	4413      	add	r3, r2
 800ae08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ae0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	899b      	ldrh	r3, [r3, #12]
 800ae16:	4619      	mov	r1, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae1e:	4413      	add	r3, r2
 800ae20:	4619      	mov	r1, r3
 800ae22:	6938      	ldr	r0, [r7, #16]
 800ae24:	f7ff feec 	bl	800ac00 <move_window>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d16e      	bne.n	800af0c <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	899b      	ldrh	r3, [r3, #12]
 800ae32:	461a      	mov	r2, r3
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae3a:	fb01 f202 	mul.w	r2, r1, r2
 800ae3e:	1a9b      	subs	r3, r3, r2
 800ae40:	693a      	ldr	r2, [r7, #16]
 800ae42:	4413      	add	r3, r2
 800ae44:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ae48:	021b      	lsls	r3, r3, #8
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	f003 0301 	and.w	r3, r3, #1
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <get_fat+0xe6>
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	091b      	lsrs	r3, r3, #4
 800ae5e:	e002      	b.n	800ae66 <get_fat+0xec>
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae66:	617b      	str	r3, [r7, #20]
			break;
 800ae68:	e055      	b.n	800af16 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	899b      	ldrh	r3, [r3, #12]
 800ae72:	085b      	lsrs	r3, r3, #1
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	4619      	mov	r1, r3
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ae7e:	4413      	add	r3, r2
 800ae80:	4619      	mov	r1, r3
 800ae82:	6938      	ldr	r0, [r7, #16]
 800ae84:	f7ff febc 	bl	800ac00 <move_window>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d140      	bne.n	800af10 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	8992      	ldrh	r2, [r2, #12]
 800ae9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800aea0:	fb00 f202 	mul.w	r2, r0, r2
 800aea4:	1a9b      	subs	r3, r3, r2
 800aea6:	440b      	add	r3, r1
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7ff fbf7 	bl	800a69c <ld_word>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	617b      	str	r3, [r7, #20]
			break;
 800aeb2:	e030      	b.n	800af16 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800aeb4:	693b      	ldr	r3, [r7, #16]
 800aeb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	899b      	ldrh	r3, [r3, #12]
 800aebc:	089b      	lsrs	r3, r3, #2
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	4619      	mov	r1, r3
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	fbb3 f3f1 	udiv	r3, r3, r1
 800aec8:	4413      	add	r3, r2
 800aeca:	4619      	mov	r1, r3
 800aecc:	6938      	ldr	r0, [r7, #16]
 800aece:	f7ff fe97 	bl	800ac00 <move_window>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d11d      	bne.n	800af14 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	693a      	ldr	r2, [r7, #16]
 800aee4:	8992      	ldrh	r2, [r2, #12]
 800aee6:	fbb3 f0f2 	udiv	r0, r3, r2
 800aeea:	fb00 f202 	mul.w	r2, r0, r2
 800aeee:	1a9b      	subs	r3, r3, r2
 800aef0:	440b      	add	r3, r1
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff fbeb 	bl	800a6ce <ld_dword>
 800aef8:	4603      	mov	r3, r0
 800aefa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800aefe:	617b      	str	r3, [r7, #20]
			break;
 800af00:	e009      	b.n	800af16 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800af02:	2301      	movs	r3, #1
 800af04:	617b      	str	r3, [r7, #20]
 800af06:	e006      	b.n	800af16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af08:	bf00      	nop
 800af0a:	e004      	b.n	800af16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800af0c:	bf00      	nop
 800af0e:	e002      	b.n	800af16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800af10:	bf00      	nop
 800af12:	e000      	b.n	800af16 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800af14:	bf00      	nop
		}
	}

	return val;
 800af16:	697b      	ldr	r3, [r7, #20]
}
 800af18:	4618      	mov	r0, r3
 800af1a:	3718      	adds	r7, #24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800af20:	b590      	push	{r4, r7, lr}
 800af22:	b089      	sub	sp, #36	@ 0x24
 800af24:	af00      	add	r7, sp, #0
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	60b9      	str	r1, [r7, #8]
 800af2a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800af2c:	2302      	movs	r3, #2
 800af2e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	2b01      	cmp	r3, #1
 800af34:	f240 8109 	bls.w	800b14a <put_fat+0x22a>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	69db      	ldr	r3, [r3, #28]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	429a      	cmp	r2, r3
 800af40:	f080 8103 	bcs.w	800b14a <put_fat+0x22a>
		switch (fs->fs_type) {
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	2b03      	cmp	r3, #3
 800af4a:	f000 80b6 	beq.w	800b0ba <put_fat+0x19a>
 800af4e:	2b03      	cmp	r3, #3
 800af50:	f300 80fb 	bgt.w	800b14a <put_fat+0x22a>
 800af54:	2b01      	cmp	r3, #1
 800af56:	d003      	beq.n	800af60 <put_fat+0x40>
 800af58:	2b02      	cmp	r3, #2
 800af5a:	f000 8083 	beq.w	800b064 <put_fat+0x144>
 800af5e:	e0f4      	b.n	800b14a <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	61bb      	str	r3, [r7, #24]
 800af64:	69bb      	ldr	r3, [r7, #24]
 800af66:	085b      	lsrs	r3, r3, #1
 800af68:	69ba      	ldr	r2, [r7, #24]
 800af6a:	4413      	add	r3, r2
 800af6c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	899b      	ldrh	r3, [r3, #12]
 800af76:	4619      	mov	r1, r3
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	fbb3 f3f1 	udiv	r3, r3, r1
 800af7e:	4413      	add	r3, r2
 800af80:	4619      	mov	r1, r3
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f7ff fe3c 	bl	800ac00 <move_window>
 800af88:	4603      	mov	r3, r0
 800af8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800af8c:	7ffb      	ldrb	r3, [r7, #31]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f040 80d4 	bne.w	800b13c <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	1c5a      	adds	r2, r3, #1
 800af9e:	61ba      	str	r2, [r7, #24]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	8992      	ldrh	r2, [r2, #12]
 800afa4:	fbb3 f0f2 	udiv	r0, r3, r2
 800afa8:	fb00 f202 	mul.w	r2, r0, r2
 800afac:	1a9b      	subs	r3, r3, r2
 800afae:	440b      	add	r3, r1
 800afb0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00d      	beq.n	800afd8 <put_fat+0xb8>
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	b25b      	sxtb	r3, r3
 800afc2:	f003 030f 	and.w	r3, r3, #15
 800afc6:	b25a      	sxtb	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	b25b      	sxtb	r3, r3
 800afcc:	011b      	lsls	r3, r3, #4
 800afce:	b25b      	sxtb	r3, r3
 800afd0:	4313      	orrs	r3, r2
 800afd2:	b25b      	sxtb	r3, r3
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	e001      	b.n	800afdc <put_fat+0xbc>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2201      	movs	r2, #1
 800afe4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	899b      	ldrh	r3, [r3, #12]
 800afee:	4619      	mov	r1, r3
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	fbb3 f3f1 	udiv	r3, r3, r1
 800aff6:	4413      	add	r3, r2
 800aff8:	4619      	mov	r1, r3
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f7ff fe00 	bl	800ac00 <move_window>
 800b000:	4603      	mov	r3, r0
 800b002:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b004:	7ffb      	ldrb	r3, [r7, #31]
 800b006:	2b00      	cmp	r3, #0
 800b008:	f040 809a 	bne.w	800b140 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	899b      	ldrh	r3, [r3, #12]
 800b016:	461a      	mov	r2, r3
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b01e:	fb00 f202 	mul.w	r2, r0, r2
 800b022:	1a9b      	subs	r3, r3, r2
 800b024:	440b      	add	r3, r1
 800b026:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d003      	beq.n	800b03a <put_fat+0x11a>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	091b      	lsrs	r3, r3, #4
 800b036:	b2db      	uxtb	r3, r3
 800b038:	e00e      	b.n	800b058 <put_fat+0x138>
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	b25b      	sxtb	r3, r3
 800b040:	f023 030f 	bic.w	r3, r3, #15
 800b044:	b25a      	sxtb	r2, r3
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	0a1b      	lsrs	r3, r3, #8
 800b04a:	b25b      	sxtb	r3, r3
 800b04c:	f003 030f 	and.w	r3, r3, #15
 800b050:	b25b      	sxtb	r3, r3
 800b052:	4313      	orrs	r3, r2
 800b054:	b25b      	sxtb	r3, r3
 800b056:	b2db      	uxtb	r3, r3
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2201      	movs	r2, #1
 800b060:	70da      	strb	r2, [r3, #3]
			break;
 800b062:	e072      	b.n	800b14a <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	899b      	ldrh	r3, [r3, #12]
 800b06c:	085b      	lsrs	r3, r3, #1
 800b06e:	b29b      	uxth	r3, r3
 800b070:	4619      	mov	r1, r3
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	fbb3 f3f1 	udiv	r3, r3, r1
 800b078:	4413      	add	r3, r2
 800b07a:	4619      	mov	r1, r3
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f7ff fdbf 	bl	800ac00 <move_window>
 800b082:	4603      	mov	r3, r0
 800b084:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b086:	7ffb      	ldrb	r3, [r7, #31]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d15b      	bne.n	800b144 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	005b      	lsls	r3, r3, #1
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	8992      	ldrh	r2, [r2, #12]
 800b09a:	fbb3 f0f2 	udiv	r0, r3, r2
 800b09e:	fb00 f202 	mul.w	r2, r0, r2
 800b0a2:	1a9b      	subs	r3, r3, r2
 800b0a4:	440b      	add	r3, r1
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	b292      	uxth	r2, r2
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7ff fb31 	bl	800a714 <st_word>
			fs->wflag = 1;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	70da      	strb	r2, [r3, #3]
			break;
 800b0b8:	e047      	b.n	800b14a <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	899b      	ldrh	r3, [r3, #12]
 800b0c2:	089b      	lsrs	r3, r3, #2
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	4619      	mov	r1, r3
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800b0ce:	4413      	add	r3, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	f7ff fd94 	bl	800ac00 <move_window>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b0dc:	7ffb      	ldrb	r3, [r7, #31]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d132      	bne.n	800b148 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	8992      	ldrh	r2, [r2, #12]
 800b0f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b0fa:	fb00 f202 	mul.w	r2, r0, r2
 800b0fe:	1a9b      	subs	r3, r3, r2
 800b100:	440b      	add	r3, r1
 800b102:	4618      	mov	r0, r3
 800b104:	f7ff fae3 	bl	800a6ce <ld_dword>
 800b108:	4603      	mov	r3, r0
 800b10a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b10e:	4323      	orrs	r3, r4
 800b110:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	68fa      	ldr	r2, [r7, #12]
 800b11e:	8992      	ldrh	r2, [r2, #12]
 800b120:	fbb3 f0f2 	udiv	r0, r3, r2
 800b124:	fb00 f202 	mul.w	r2, r0, r2
 800b128:	1a9b      	subs	r3, r3, r2
 800b12a:	440b      	add	r3, r1
 800b12c:	6879      	ldr	r1, [r7, #4]
 800b12e:	4618      	mov	r0, r3
 800b130:	f7ff fb0b 	bl	800a74a <st_dword>
			fs->wflag = 1;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2201      	movs	r2, #1
 800b138:	70da      	strb	r2, [r3, #3]
			break;
 800b13a:	e006      	b.n	800b14a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b13c:	bf00      	nop
 800b13e:	e004      	b.n	800b14a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b140:	bf00      	nop
 800b142:	e002      	b.n	800b14a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b144:	bf00      	nop
 800b146:	e000      	b.n	800b14a <put_fat+0x22a>
			if (res != FR_OK) break;
 800b148:	bf00      	nop
		}
	}
	return res;
 800b14a:	7ffb      	ldrb	r3, [r7, #31]
}
 800b14c:	4618      	mov	r0, r3
 800b14e:	3724      	adds	r7, #36	@ 0x24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd90      	pop	{r4, r7, pc}

0800b154 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b088      	sub	sp, #32
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	60b9      	str	r1, [r7, #8]
 800b15e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b160:	2300      	movs	r3, #0
 800b162:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d904      	bls.n	800b17a <remove_chain+0x26>
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	69db      	ldr	r3, [r3, #28]
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	429a      	cmp	r2, r3
 800b178:	d301      	bcc.n	800b17e <remove_chain+0x2a>
 800b17a:	2302      	movs	r3, #2
 800b17c:	e04b      	b.n	800b216 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00c      	beq.n	800b19e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b184:	f04f 32ff 	mov.w	r2, #4294967295
 800b188:	6879      	ldr	r1, [r7, #4]
 800b18a:	69b8      	ldr	r0, [r7, #24]
 800b18c:	f7ff fec8 	bl	800af20 <put_fat>
 800b190:	4603      	mov	r3, r0
 800b192:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b194:	7ffb      	ldrb	r3, [r7, #31]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d001      	beq.n	800b19e <remove_chain+0x4a>
 800b19a:	7ffb      	ldrb	r3, [r7, #31]
 800b19c:	e03b      	b.n	800b216 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b19e:	68b9      	ldr	r1, [r7, #8]
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7ff fdea 	bl	800ad7a <get_fat>
 800b1a6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d031      	beq.n	800b212 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d101      	bne.n	800b1b8 <remove_chain+0x64>
 800b1b4:	2302      	movs	r3, #2
 800b1b6:	e02e      	b.n	800b216 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1be:	d101      	bne.n	800b1c4 <remove_chain+0x70>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e028      	b.n	800b216 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	68b9      	ldr	r1, [r7, #8]
 800b1c8:	69b8      	ldr	r0, [r7, #24]
 800b1ca:	f7ff fea9 	bl	800af20 <put_fat>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b1d2:	7ffb      	ldrb	r3, [r7, #31]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d001      	beq.n	800b1dc <remove_chain+0x88>
 800b1d8:	7ffb      	ldrb	r3, [r7, #31]
 800b1da:	e01c      	b.n	800b216 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	699a      	ldr	r2, [r3, #24]
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	69db      	ldr	r3, [r3, #28]
 800b1e4:	3b02      	subs	r3, #2
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d20b      	bcs.n	800b202 <remove_chain+0xae>
			fs->free_clst++;
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	1c5a      	adds	r2, r3, #1
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	791b      	ldrb	r3, [r3, #4]
 800b1f8:	f043 0301 	orr.w	r3, r3, #1
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	69db      	ldr	r3, [r3, #28]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d3c6      	bcc.n	800b19e <remove_chain+0x4a>
 800b210:	e000      	b.n	800b214 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b212:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3720      	adds	r7, #32
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b088      	sub	sp, #32
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
 800b226:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10d      	bne.n	800b250 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	695b      	ldr	r3, [r3, #20]
 800b238:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d004      	beq.n	800b24a <create_chain+0x2c>
 800b240:	693b      	ldr	r3, [r7, #16]
 800b242:	69db      	ldr	r3, [r3, #28]
 800b244:	69ba      	ldr	r2, [r7, #24]
 800b246:	429a      	cmp	r2, r3
 800b248:	d31b      	bcc.n	800b282 <create_chain+0x64>
 800b24a:	2301      	movs	r3, #1
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	e018      	b.n	800b282 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f7ff fd91 	bl	800ad7a <get_fat>
 800b258:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d801      	bhi.n	800b264 <create_chain+0x46>
 800b260:	2301      	movs	r3, #1
 800b262:	e070      	b.n	800b346 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26a:	d101      	bne.n	800b270 <create_chain+0x52>
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	e06a      	b.n	800b346 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	429a      	cmp	r2, r3
 800b278:	d201      	bcs.n	800b27e <create_chain+0x60>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	e063      	b.n	800b346 <create_chain+0x128>
		scl = clst;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	3301      	adds	r3, #1
 800b28a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	429a      	cmp	r2, r3
 800b294:	d307      	bcc.n	800b2a6 <create_chain+0x88>
				ncl = 2;
 800b296:	2302      	movs	r3, #2
 800b298:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b29a:	69fa      	ldr	r2, [r7, #28]
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d901      	bls.n	800b2a6 <create_chain+0x88>
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	e04f      	b.n	800b346 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b2a6:	69f9      	ldr	r1, [r7, #28]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f7ff fd66 	bl	800ad7a <get_fat>
 800b2ae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00e      	beq.n	800b2d4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	d003      	beq.n	800b2c4 <create_chain+0xa6>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c2:	d101      	bne.n	800b2c8 <create_chain+0xaa>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	e03e      	b.n	800b346 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b2c8:	69fa      	ldr	r2, [r7, #28]
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d1da      	bne.n	800b286 <create_chain+0x68>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	e038      	b.n	800b346 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b2d4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b2da:	69f9      	ldr	r1, [r7, #28]
 800b2dc:	6938      	ldr	r0, [r7, #16]
 800b2de:	f7ff fe1f 	bl	800af20 <put_fat>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b2e6:	7dfb      	ldrb	r3, [r7, #23]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d109      	bne.n	800b300 <create_chain+0xe2>
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d006      	beq.n	800b300 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b2f2:	69fa      	ldr	r2, [r7, #28]
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6938      	ldr	r0, [r7, #16]
 800b2f8:	f7ff fe12 	bl	800af20 <put_fat>
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b300:	7dfb      	ldrb	r3, [r7, #23]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d116      	bne.n	800b334 <create_chain+0x116>
		fs->last_clst = ncl;
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	69fa      	ldr	r2, [r7, #28]
 800b30a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	699a      	ldr	r2, [r3, #24]
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	69db      	ldr	r3, [r3, #28]
 800b314:	3b02      	subs	r3, #2
 800b316:	429a      	cmp	r2, r3
 800b318:	d804      	bhi.n	800b324 <create_chain+0x106>
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	699b      	ldr	r3, [r3, #24]
 800b31e:	1e5a      	subs	r2, r3, #1
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	791b      	ldrb	r3, [r3, #4]
 800b328:	f043 0301 	orr.w	r3, r3, #1
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	711a      	strb	r2, [r3, #4]
 800b332:	e007      	b.n	800b344 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b334:	7dfb      	ldrb	r3, [r7, #23]
 800b336:	2b01      	cmp	r3, #1
 800b338:	d102      	bne.n	800b340 <create_chain+0x122>
 800b33a:	f04f 33ff 	mov.w	r3, #4294967295
 800b33e:	e000      	b.n	800b342 <create_chain+0x124>
 800b340:	2301      	movs	r3, #1
 800b342:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b344:	69fb      	ldr	r3, [r7, #28]
}
 800b346:	4618      	mov	r0, r3
 800b348:	3720      	adds	r7, #32
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b34e:	b480      	push	{r7}
 800b350:	b087      	sub	sp, #28
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b362:	3304      	adds	r3, #4
 800b364:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	899b      	ldrh	r3, [r3, #12]
 800b36a:	461a      	mov	r2, r3
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b372:	68fa      	ldr	r2, [r7, #12]
 800b374:	8952      	ldrh	r2, [r2, #10]
 800b376:	fbb3 f3f2 	udiv	r3, r3, r2
 800b37a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	1d1a      	adds	r2, r3, #4
 800b380:	613a      	str	r2, [r7, #16]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d101      	bne.n	800b390 <clmt_clust+0x42>
 800b38c:	2300      	movs	r3, #0
 800b38e:	e010      	b.n	800b3b2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800b390:	697a      	ldr	r2, [r7, #20]
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	429a      	cmp	r2, r3
 800b396:	d307      	bcc.n	800b3a8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	617b      	str	r3, [r7, #20]
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	3304      	adds	r3, #4
 800b3a4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b3a6:	e7e9      	b.n	800b37c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800b3a8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	4413      	add	r3, r2
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	371c      	adds	r7, #28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b086      	sub	sp, #24
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
 800b3c6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b3d4:	d204      	bcs.n	800b3e0 <dir_sdi+0x22>
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	f003 031f 	and.w	r3, r3, #31
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d001      	beq.n	800b3e4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	e071      	b.n	800b4c8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	689b      	ldr	r3, [r3, #8]
 800b3ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d106      	bne.n	800b404 <dir_sdi+0x46>
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	2b02      	cmp	r3, #2
 800b3fc:	d902      	bls.n	800b404 <dir_sdi+0x46>
		clst = fs->dirbase;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b402:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10c      	bne.n	800b424 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	095b      	lsrs	r3, r3, #5
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	8912      	ldrh	r2, [r2, #8]
 800b412:	4293      	cmp	r3, r2
 800b414:	d301      	bcc.n	800b41a <dir_sdi+0x5c>
 800b416:	2302      	movs	r3, #2
 800b418:	e056      	b.n	800b4c8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	61da      	str	r2, [r3, #28]
 800b422:	e02d      	b.n	800b480 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	895b      	ldrh	r3, [r3, #10]
 800b428:	461a      	mov	r2, r3
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	899b      	ldrh	r3, [r3, #12]
 800b42e:	fb02 f303 	mul.w	r3, r2, r3
 800b432:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b434:	e019      	b.n	800b46a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6979      	ldr	r1, [r7, #20]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff fc9d 	bl	800ad7a <get_fat>
 800b440:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b448:	d101      	bne.n	800b44e <dir_sdi+0x90>
 800b44a:	2301      	movs	r3, #1
 800b44c:	e03c      	b.n	800b4c8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d904      	bls.n	800b45e <dir_sdi+0xa0>
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	69db      	ldr	r3, [r3, #28]
 800b458:	697a      	ldr	r2, [r7, #20]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d301      	bcc.n	800b462 <dir_sdi+0xa4>
 800b45e:	2302      	movs	r3, #2
 800b460:	e032      	b.n	800b4c8 <dir_sdi+0x10a>
			ofs -= csz;
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	1ad3      	subs	r3, r2, r3
 800b468:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d2e1      	bcs.n	800b436 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800b472:	6979      	ldr	r1, [r7, #20]
 800b474:	6938      	ldr	r0, [r7, #16]
 800b476:	f7ff fc61 	bl	800ad3c <clust2sect>
 800b47a:	4602      	mov	r2, r0
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	69db      	ldr	r3, [r3, #28]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <dir_sdi+0xd4>
 800b48e:	2302      	movs	r3, #2
 800b490:	e01a      	b.n	800b4c8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	69da      	ldr	r2, [r3, #28]
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	899b      	ldrh	r3, [r3, #12]
 800b49a:	4619      	mov	r1, r3
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	fbb3 f3f1 	udiv	r3, r3, r1
 800b4a2:	441a      	add	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	899b      	ldrh	r3, [r3, #12]
 800b4b2:	461a      	mov	r2, r3
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4ba:	fb00 f202 	mul.w	r2, r0, r2
 800b4be:	1a9b      	subs	r3, r3, r2
 800b4c0:	18ca      	adds	r2, r1, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b4c6:	2300      	movs	r3, #0
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3718      	adds	r7, #24
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b086      	sub	sp, #24
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	3320      	adds	r3, #32
 800b4e6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	69db      	ldr	r3, [r3, #28]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d003      	beq.n	800b4f8 <dir_next+0x28>
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b4f6:	d301      	bcc.n	800b4fc <dir_next+0x2c>
 800b4f8:	2304      	movs	r3, #4
 800b4fa:	e0bb      	b.n	800b674 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	899b      	ldrh	r3, [r3, #12]
 800b500:	461a      	mov	r2, r3
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	fbb3 f1f2 	udiv	r1, r3, r2
 800b508:	fb01 f202 	mul.w	r2, r1, r2
 800b50c:	1a9b      	subs	r3, r3, r2
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f040 809d 	bne.w	800b64e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	69db      	ldr	r3, [r3, #28]
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10b      	bne.n	800b53e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	095b      	lsrs	r3, r3, #5
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	8912      	ldrh	r2, [r2, #8]
 800b52e:	4293      	cmp	r3, r2
 800b530:	f0c0 808d 	bcc.w	800b64e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	61da      	str	r2, [r3, #28]
 800b53a:	2304      	movs	r3, #4
 800b53c:	e09a      	b.n	800b674 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	899b      	ldrh	r3, [r3, #12]
 800b542:	461a      	mov	r2, r3
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	fbb3 f3f2 	udiv	r3, r3, r2
 800b54a:	68fa      	ldr	r2, [r7, #12]
 800b54c:	8952      	ldrh	r2, [r2, #10]
 800b54e:	3a01      	subs	r2, #1
 800b550:	4013      	ands	r3, r2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d17b      	bne.n	800b64e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	4619      	mov	r1, r3
 800b55e:	4610      	mov	r0, r2
 800b560:	f7ff fc0b 	bl	800ad7a <get_fat>
 800b564:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	d801      	bhi.n	800b570 <dir_next+0xa0>
 800b56c:	2302      	movs	r3, #2
 800b56e:	e081      	b.n	800b674 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b576:	d101      	bne.n	800b57c <dir_next+0xac>
 800b578:	2301      	movs	r3, #1
 800b57a:	e07b      	b.n	800b674 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	69db      	ldr	r3, [r3, #28]
 800b580:	697a      	ldr	r2, [r7, #20]
 800b582:	429a      	cmp	r2, r3
 800b584:	d359      	bcc.n	800b63a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d104      	bne.n	800b596 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2200      	movs	r2, #0
 800b590:	61da      	str	r2, [r3, #28]
 800b592:	2304      	movs	r3, #4
 800b594:	e06e      	b.n	800b674 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	4619      	mov	r1, r3
 800b59e:	4610      	mov	r0, r2
 800b5a0:	f7ff fe3d 	bl	800b21e <create_chain>
 800b5a4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d101      	bne.n	800b5b0 <dir_next+0xe0>
 800b5ac:	2307      	movs	r3, #7
 800b5ae:	e061      	b.n	800b674 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d101      	bne.n	800b5ba <dir_next+0xea>
 800b5b6:	2302      	movs	r3, #2
 800b5b8:	e05c      	b.n	800b674 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c0:	d101      	bne.n	800b5c6 <dir_next+0xf6>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e056      	b.n	800b674 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b5c6:	68f8      	ldr	r0, [r7, #12]
 800b5c8:	f7ff fad6 	bl	800ab78 <sync_window>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <dir_next+0x106>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e04e      	b.n	800b674 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	899b      	ldrh	r3, [r3, #12]
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	f7ff f8fe 	bl	800a7e4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	613b      	str	r3, [r7, #16]
 800b5ec:	6979      	ldr	r1, [r7, #20]
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f7ff fba4 	bl	800ad3c <clust2sect>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	635a      	str	r2, [r3, #52]	@ 0x34
 800b5fa:	e012      	b.n	800b622 <dir_next+0x152>
						fs->wflag = 1;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2201      	movs	r2, #1
 800b600:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f7ff fab8 	bl	800ab78 <sync_window>
 800b608:	4603      	mov	r3, r0
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <dir_next+0x142>
 800b60e:	2301      	movs	r3, #1
 800b610:	e030      	b.n	800b674 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	3301      	adds	r3, #1
 800b616:	613b      	str	r3, [r7, #16]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b61c:	1c5a      	adds	r2, r3, #1
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	635a      	str	r2, [r3, #52]	@ 0x34
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	895b      	ldrh	r3, [r3, #10]
 800b626:	461a      	mov	r2, r3
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d3e6      	bcc.n	800b5fc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	1ad2      	subs	r2, r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	697a      	ldr	r2, [r7, #20]
 800b63e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b640:	6979      	ldr	r1, [r7, #20]
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f7ff fb7a 	bl	800ad3c <clust2sect>
 800b648:	4602      	mov	r2, r0
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68ba      	ldr	r2, [r7, #8]
 800b652:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	899b      	ldrh	r3, [r3, #12]
 800b65e:	461a      	mov	r2, r3
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	fbb3 f0f2 	udiv	r0, r3, r2
 800b666:	fb00 f202 	mul.w	r2, r0, r2
 800b66a:	1a9b      	subs	r3, r3, r2
 800b66c:	18ca      	adds	r2, r1, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3718      	adds	r7, #24
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b68c:	2100      	movs	r1, #0
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7ff fe95 	bl	800b3be <dir_sdi>
 800b694:	4603      	mov	r3, r0
 800b696:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b698:	7dfb      	ldrb	r3, [r7, #23]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d12b      	bne.n	800b6f6 <dir_alloc+0x7a>
		n = 0;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	69db      	ldr	r3, [r3, #28]
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	f7ff faa9 	bl	800ac00 <move_window>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b6b2:	7dfb      	ldrb	r3, [r7, #23]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d11d      	bne.n	800b6f4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	2be5      	cmp	r3, #229	@ 0xe5
 800b6c0:	d004      	beq.n	800b6cc <dir_alloc+0x50>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d107      	bne.n	800b6dc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	613b      	str	r3, [r7, #16]
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d102      	bne.n	800b6e0 <dir_alloc+0x64>
 800b6da:	e00c      	b.n	800b6f6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b6dc:	2300      	movs	r3, #0
 800b6de:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b6e0:	2101      	movs	r1, #1
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff fef4 	bl	800b4d0 <dir_next>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0d7      	beq.n	800b6a2 <dir_alloc+0x26>
 800b6f2:	e000      	b.n	800b6f6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b6f4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	2b04      	cmp	r3, #4
 800b6fa:	d101      	bne.n	800b700 <dir_alloc+0x84>
 800b6fc:	2307      	movs	r3, #7
 800b6fe:	75fb      	strb	r3, [r7, #23]
	return res;
 800b700:	7dfb      	ldrb	r3, [r7, #23]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	331a      	adds	r3, #26
 800b718:	4618      	mov	r0, r3
 800b71a:	f7fe ffbf 	bl	800a69c <ld_word>
 800b71e:	4603      	mov	r3, r0
 800b720:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	2b03      	cmp	r3, #3
 800b728:	d109      	bne.n	800b73e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	3314      	adds	r3, #20
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe ffb4 	bl	800a69c <ld_word>
 800b734:	4603      	mov	r3, r0
 800b736:	041b      	lsls	r3, r3, #16
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b73e:	68fb      	ldr	r3, [r7, #12]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	331a      	adds	r3, #26
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	b292      	uxth	r2, r2
 800b75c:	4611      	mov	r1, r2
 800b75e:	4618      	mov	r0, r3
 800b760:	f7fe ffd8 	bl	800a714 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2b03      	cmp	r3, #3
 800b76a:	d109      	bne.n	800b780 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	f103 0214 	add.w	r2, r3, #20
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	0c1b      	lsrs	r3, r3, #16
 800b776:	b29b      	uxth	r3, r3
 800b778:	4619      	mov	r1, r3
 800b77a:	4610      	mov	r0, r2
 800b77c:	f7fe ffca 	bl	800a714 <st_word>
	}
}
 800b780:	bf00      	nop
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b788:	b590      	push	{r4, r7, lr}
 800b78a:	b087      	sub	sp, #28
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
 800b790:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	331a      	adds	r3, #26
 800b796:	4618      	mov	r0, r3
 800b798:	f7fe ff80 	bl	800a69c <ld_word>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d001      	beq.n	800b7a6 <cmp_lfn+0x1e>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e059      	b.n	800b85a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7ae:	1e5a      	subs	r2, r3, #1
 800b7b0:	4613      	mov	r3, r2
 800b7b2:	005b      	lsls	r3, r3, #1
 800b7b4:	4413      	add	r3, r2
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b7bc:	2301      	movs	r3, #1
 800b7be:	81fb      	strh	r3, [r7, #14]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	613b      	str	r3, [r7, #16]
 800b7c4:	e033      	b.n	800b82e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b7c6:	4a27      	ldr	r2, [pc, #156]	@ (800b864 <cmp_lfn+0xdc>)
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7fe ff61 	bl	800a69c <ld_word>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b7de:	89fb      	ldrh	r3, [r7, #14]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d01a      	beq.n	800b81a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	2bfe      	cmp	r3, #254	@ 0xfe
 800b7e8:	d812      	bhi.n	800b810 <cmp_lfn+0x88>
 800b7ea:	89bb      	ldrh	r3, [r7, #12]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f002 f933 	bl	800da58 <ff_wtoupper>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	461c      	mov	r4, r3
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	1c5a      	adds	r2, r3, #1
 800b7fa:	617a      	str	r2, [r7, #20]
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	687a      	ldr	r2, [r7, #4]
 800b800:	4413      	add	r3, r2
 800b802:	881b      	ldrh	r3, [r3, #0]
 800b804:	4618      	mov	r0, r3
 800b806:	f002 f927 	bl	800da58 <ff_wtoupper>
 800b80a:	4603      	mov	r3, r0
 800b80c:	429c      	cmp	r4, r3
 800b80e:	d001      	beq.n	800b814 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b810:	2300      	movs	r3, #0
 800b812:	e022      	b.n	800b85a <cmp_lfn+0xd2>
			}
			wc = uc;
 800b814:	89bb      	ldrh	r3, [r7, #12]
 800b816:	81fb      	strh	r3, [r7, #14]
 800b818:	e006      	b.n	800b828 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b81a:	89bb      	ldrh	r3, [r7, #12]
 800b81c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b820:	4293      	cmp	r3, r2
 800b822:	d001      	beq.n	800b828 <cmp_lfn+0xa0>
 800b824:	2300      	movs	r3, #0
 800b826:	e018      	b.n	800b85a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	3301      	adds	r3, #1
 800b82c:	613b      	str	r3, [r7, #16]
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	2b0c      	cmp	r3, #12
 800b832:	d9c8      	bls.n	800b7c6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d00b      	beq.n	800b858 <cmp_lfn+0xd0>
 800b840:	89fb      	ldrh	r3, [r7, #14]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d008      	beq.n	800b858 <cmp_lfn+0xd0>
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	005b      	lsls	r3, r3, #1
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	4413      	add	r3, r2
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d001      	beq.n	800b858 <cmp_lfn+0xd0>
 800b854:	2300      	movs	r3, #0
 800b856:	e000      	b.n	800b85a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b858:	2301      	movs	r3, #1
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	371c      	adds	r7, #28
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd90      	pop	{r4, r7, pc}
 800b862:	bf00      	nop
 800b864:	0804a650 	.word	0x0804a650

0800b868 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	60f8      	str	r0, [r7, #12]
 800b870:	60b9      	str	r1, [r7, #8]
 800b872:	4611      	mov	r1, r2
 800b874:	461a      	mov	r2, r3
 800b876:	460b      	mov	r3, r1
 800b878:	71fb      	strb	r3, [r7, #7]
 800b87a:	4613      	mov	r3, r2
 800b87c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	330d      	adds	r3, #13
 800b882:	79ba      	ldrb	r2, [r7, #6]
 800b884:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	330b      	adds	r3, #11
 800b88a:	220f      	movs	r2, #15
 800b88c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	330c      	adds	r3, #12
 800b892:	2200      	movs	r2, #0
 800b894:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	331a      	adds	r3, #26
 800b89a:	2100      	movs	r1, #0
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7fe ff39 	bl	800a714 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b8a2:	79fb      	ldrb	r3, [r7, #7]
 800b8a4:	1e5a      	subs	r2, r3, #1
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	005b      	lsls	r3, r3, #1
 800b8aa:	4413      	add	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	4413      	add	r3, r2
 800b8b0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	82fb      	strh	r3, [r7, #22]
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b8ba:	8afb      	ldrh	r3, [r7, #22]
 800b8bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d007      	beq.n	800b8d4 <put_lfn+0x6c>
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	1c5a      	adds	r2, r3, #1
 800b8c8:	61fa      	str	r2, [r7, #28]
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	881b      	ldrh	r3, [r3, #0]
 800b8d2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b8d4:	4a17      	ldr	r2, [pc, #92]	@ (800b934 <put_lfn+0xcc>)
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	4413      	add	r3, r2
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	8afa      	ldrh	r2, [r7, #22]
 800b8e4:	4611      	mov	r1, r2
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f7fe ff14 	bl	800a714 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b8ec:	8afb      	ldrh	r3, [r7, #22]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d102      	bne.n	800b8f8 <put_lfn+0x90>
 800b8f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8f6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b8f8:	69bb      	ldr	r3, [r7, #24]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	61bb      	str	r3, [r7, #24]
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	2b0c      	cmp	r3, #12
 800b902:	d9da      	bls.n	800b8ba <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b904:	8afb      	ldrh	r3, [r7, #22]
 800b906:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d006      	beq.n	800b91c <put_lfn+0xb4>
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	4413      	add	r3, r2
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d103      	bne.n	800b924 <put_lfn+0xbc>
 800b91c:	79fb      	ldrb	r3, [r7, #7]
 800b91e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b922:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	79fa      	ldrb	r2, [r7, #7]
 800b928:	701a      	strb	r2, [r3, #0]
}
 800b92a:	bf00      	nop
 800b92c:	3720      	adds	r7, #32
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	0804a650 	.word	0x0804a650

0800b938 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b08c      	sub	sp, #48	@ 0x30
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
 800b944:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b946:	220b      	movs	r2, #11
 800b948:	68b9      	ldr	r1, [r7, #8]
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f7fe ff29 	bl	800a7a2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2b05      	cmp	r3, #5
 800b954:	d92b      	bls.n	800b9ae <gen_numname+0x76>
		sr = seq;
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b95a:	e022      	b.n	800b9a2 <gen_numname+0x6a>
			wc = *lfn++;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	1c9a      	adds	r2, r3, #2
 800b960:	607a      	str	r2, [r7, #4]
 800b962:	881b      	ldrh	r3, [r3, #0]
 800b964:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b966:	2300      	movs	r3, #0
 800b968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b96a:	e017      	b.n	800b99c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b96c:	69fb      	ldr	r3, [r7, #28]
 800b96e:	005a      	lsls	r2, r3, #1
 800b970:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b972:	f003 0301 	and.w	r3, r3, #1
 800b976:	4413      	add	r3, r2
 800b978:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b97a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b97c:	085b      	lsrs	r3, r3, #1
 800b97e:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b986:	2b00      	cmp	r3, #0
 800b988:	d005      	beq.n	800b996 <gen_numname+0x5e>
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b990:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b994:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b998:	3301      	adds	r3, #1
 800b99a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b99c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b99e:	2b0f      	cmp	r3, #15
 800b9a0:	d9e4      	bls.n	800b96c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	881b      	ldrh	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1d8      	bne.n	800b95c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b9ae:	2307      	movs	r3, #7
 800b9b0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	b2db      	uxtb	r3, r3
 800b9b6:	f003 030f 	and.w	r3, r3, #15
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	3330      	adds	r3, #48	@ 0x30
 800b9be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b9c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9c6:	2b39      	cmp	r3, #57	@ 0x39
 800b9c8:	d904      	bls.n	800b9d4 <gen_numname+0x9c>
 800b9ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b9ce:	3307      	adds	r3, #7
 800b9d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d6:	1e5a      	subs	r2, r3, #1
 800b9d8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b9da:	3330      	adds	r3, #48	@ 0x30
 800b9dc:	443b      	add	r3, r7
 800b9de:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b9e2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	091b      	lsrs	r3, r3, #4
 800b9ea:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1df      	bne.n	800b9b2 <gen_numname+0x7a>
	ns[i] = '~';
 800b9f2:	f107 0214 	add.w	r2, r7, #20
 800b9f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9f8:	4413      	add	r3, r2
 800b9fa:	227e      	movs	r2, #126	@ 0x7e
 800b9fc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b9fe:	2300      	movs	r3, #0
 800ba00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba02:	e002      	b.n	800ba0a <gen_numname+0xd2>
 800ba04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba06:	3301      	adds	r3, #1
 800ba08:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d205      	bcs.n	800ba1e <gen_numname+0xe6>
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba16:	4413      	add	r3, r2
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b20      	cmp	r3, #32
 800ba1c:	d1f2      	bne.n	800ba04 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ba1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba20:	2b07      	cmp	r3, #7
 800ba22:	d807      	bhi.n	800ba34 <gen_numname+0xfc>
 800ba24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba26:	1c5a      	adds	r2, r3, #1
 800ba28:	62ba      	str	r2, [r7, #40]	@ 0x28
 800ba2a:	3330      	adds	r3, #48	@ 0x30
 800ba2c:	443b      	add	r3, r7
 800ba2e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ba32:	e000      	b.n	800ba36 <gen_numname+0xfe>
 800ba34:	2120      	movs	r1, #32
 800ba36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba38:	1c5a      	adds	r2, r3, #1
 800ba3a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	4413      	add	r3, r2
 800ba40:	460a      	mov	r2, r1
 800ba42:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ba44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba46:	2b07      	cmp	r3, #7
 800ba48:	d9e9      	bls.n	800ba1e <gen_numname+0xe6>
}
 800ba4a:	bf00      	nop
 800ba4c:	bf00      	nop
 800ba4e:	3730      	adds	r7, #48	@ 0x30
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ba60:	230b      	movs	r3, #11
 800ba62:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	0852      	lsrs	r2, r2, #1
 800ba6a:	01db      	lsls	r3, r3, #7
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	1c59      	adds	r1, r3, #1
 800ba74:	6079      	str	r1, [r7, #4]
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	4413      	add	r3, r2
 800ba7a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	3b01      	subs	r3, #1
 800ba80:	60bb      	str	r3, [r7, #8]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d1ed      	bne.n	800ba64 <sum_sfn+0x10>
	return sum;
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3714      	adds	r7, #20
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b086      	sub	sp, #24
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800baa4:	2100      	movs	r1, #0
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff fc89 	bl	800b3be <dir_sdi>
 800baac:	4603      	mov	r3, r0
 800baae:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bab0:	7dfb      	ldrb	r3, [r7, #23]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <dir_find+0x24>
 800bab6:	7dfb      	ldrb	r3, [r7, #23]
 800bab8:	e0a9      	b.n	800bc0e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800baba:	23ff      	movs	r3, #255	@ 0xff
 800babc:	753b      	strb	r3, [r7, #20]
 800babe:	7d3b      	ldrb	r3, [r7, #20]
 800bac0:	757b      	strb	r3, [r7, #21]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f04f 32ff 	mov.w	r2, #4294967295
 800bac8:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	4619      	mov	r1, r3
 800bad0:	6938      	ldr	r0, [r7, #16]
 800bad2:	f7ff f895 	bl	800ac00 <move_window>
 800bad6:	4603      	mov	r3, r0
 800bad8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bada:	7dfb      	ldrb	r3, [r7, #23]
 800badc:	2b00      	cmp	r3, #0
 800bade:	f040 8090 	bne.w	800bc02 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6a1b      	ldr	r3, [r3, #32]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800baea:	7dbb      	ldrb	r3, [r7, #22]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d102      	bne.n	800baf6 <dir_find+0x60>
 800baf0:	2304      	movs	r3, #4
 800baf2:	75fb      	strb	r3, [r7, #23]
 800baf4:	e08a      	b.n	800bc0c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a1b      	ldr	r3, [r3, #32]
 800bafa:	330b      	adds	r3, #11
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bb02:	73fb      	strb	r3, [r7, #15]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	7bfa      	ldrb	r2, [r7, #15]
 800bb08:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bb0a:	7dbb      	ldrb	r3, [r7, #22]
 800bb0c:	2be5      	cmp	r3, #229	@ 0xe5
 800bb0e:	d007      	beq.n	800bb20 <dir_find+0x8a>
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
 800bb12:	f003 0308 	and.w	r3, r3, #8
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d009      	beq.n	800bb2e <dir_find+0x98>
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
 800bb1c:	2b0f      	cmp	r3, #15
 800bb1e:	d006      	beq.n	800bb2e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bb20:	23ff      	movs	r3, #255	@ 0xff
 800bb22:	757b      	strb	r3, [r7, #21]
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f04f 32ff 	mov.w	r2, #4294967295
 800bb2a:	631a      	str	r2, [r3, #48]	@ 0x30
 800bb2c:	e05e      	b.n	800bbec <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bb2e:	7bfb      	ldrb	r3, [r7, #15]
 800bb30:	2b0f      	cmp	r3, #15
 800bb32:	d136      	bne.n	800bba2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bb3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d154      	bne.n	800bbec <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800bb42:	7dbb      	ldrb	r3, [r7, #22]
 800bb44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00d      	beq.n	800bb68 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6a1b      	ldr	r3, [r3, #32]
 800bb50:	7b5b      	ldrb	r3, [r3, #13]
 800bb52:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800bb54:	7dbb      	ldrb	r3, [r7, #22]
 800bb56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb5a:	75bb      	strb	r3, [r7, #22]
 800bb5c:	7dbb      	ldrb	r3, [r7, #22]
 800bb5e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	695a      	ldr	r2, [r3, #20]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bb68:	7dba      	ldrb	r2, [r7, #22]
 800bb6a:	7d7b      	ldrb	r3, [r7, #21]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d115      	bne.n	800bb9c <dir_find+0x106>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a1b      	ldr	r3, [r3, #32]
 800bb74:	330d      	adds	r3, #13
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	7d3a      	ldrb	r2, [r7, #20]
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d10e      	bne.n	800bb9c <dir_find+0x106>
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	691a      	ldr	r2, [r3, #16]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6a1b      	ldr	r3, [r3, #32]
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f7ff fdfd 	bl	800b788 <cmp_lfn>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d003      	beq.n	800bb9c <dir_find+0x106>
 800bb94:	7d7b      	ldrb	r3, [r7, #21]
 800bb96:	3b01      	subs	r3, #1
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	e000      	b.n	800bb9e <dir_find+0x108>
 800bb9c:	23ff      	movs	r3, #255	@ 0xff
 800bb9e:	757b      	strb	r3, [r7, #21]
 800bba0:	e024      	b.n	800bbec <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bba2:	7d7b      	ldrb	r3, [r7, #21]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d109      	bne.n	800bbbc <dir_find+0x126>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7ff ff51 	bl	800ba54 <sum_sfn>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	7d3b      	ldrb	r3, [r7, #20]
 800bbb8:	4293      	cmp	r3, r2
 800bbba:	d024      	beq.n	800bc06 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bbc2:	f003 0301 	and.w	r3, r3, #1
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d10a      	bne.n	800bbe0 <dir_find+0x14a>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a18      	ldr	r0, [r3, #32]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	3324      	adds	r3, #36	@ 0x24
 800bbd2:	220b      	movs	r2, #11
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	f7fe fe20 	bl	800a81a <mem_cmp>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d014      	beq.n	800bc0a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bbe0:	23ff      	movs	r3, #255	@ 0xff
 800bbe2:	757b      	strb	r3, [r7, #21]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbea:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bbec:	2100      	movs	r1, #0
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7ff fc6e 	bl	800b4d0 <dir_next>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bbf8:	7dfb      	ldrb	r3, [r7, #23]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	f43f af65 	beq.w	800baca <dir_find+0x34>
 800bc00:	e004      	b.n	800bc0c <dir_find+0x176>
		if (res != FR_OK) break;
 800bc02:	bf00      	nop
 800bc04:	e002      	b.n	800bc0c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800bc06:	bf00      	nop
 800bc08:	e000      	b.n	800bc0c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bc0a:	bf00      	nop

	return res;
 800bc0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b08c      	sub	sp, #48	@ 0x30
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800bc2c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <dir_register+0x20>
 800bc34:	2306      	movs	r3, #6
 800bc36:	e0e0      	b.n	800bdfa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800bc38:	2300      	movs	r3, #0
 800bc3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc3c:	e002      	b.n	800bc44 <dir_register+0x2c>
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc40:	3301      	adds	r3, #1
 800bc42:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	691a      	ldr	r2, [r3, #16]
 800bc48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	4413      	add	r3, r2
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d1f4      	bne.n	800bc3e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800bc5a:	f107 030c 	add.w	r3, r7, #12
 800bc5e:	220c      	movs	r2, #12
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe fd9e 	bl	800a7a2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800bc66:	7dfb      	ldrb	r3, [r7, #23]
 800bc68:	f003 0301 	and.w	r3, r3, #1
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d032      	beq.n	800bcd6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2240      	movs	r2, #64	@ 0x40
 800bc74:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800bc78:	2301      	movs	r3, #1
 800bc7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bc7c:	e016      	b.n	800bcac <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	691a      	ldr	r2, [r3, #16]
 800bc88:	f107 010c 	add.w	r1, r7, #12
 800bc8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc8e:	f7ff fe53 	bl	800b938 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f7ff feff 	bl	800ba96 <dir_find>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800bc9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d106      	bne.n	800bcb4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800bca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca8:	3301      	adds	r3, #1
 800bcaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bcac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcae:	2b63      	cmp	r3, #99	@ 0x63
 800bcb0:	d9e5      	bls.n	800bc7e <dir_register+0x66>
 800bcb2:	e000      	b.n	800bcb6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800bcb4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800bcb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcb8:	2b64      	cmp	r3, #100	@ 0x64
 800bcba:	d101      	bne.n	800bcc0 <dir_register+0xa8>
 800bcbc:	2307      	movs	r3, #7
 800bcbe:	e09c      	b.n	800bdfa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800bcc0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bcc4:	2b04      	cmp	r3, #4
 800bcc6:	d002      	beq.n	800bcce <dir_register+0xb6>
 800bcc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bccc:	e095      	b.n	800bdfa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800bcce:	7dfa      	ldrb	r2, [r7, #23]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
 800bcd8:	f003 0302 	and.w	r3, r3, #2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d007      	beq.n	800bcf0 <dir_register+0xd8>
 800bce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce2:	330c      	adds	r3, #12
 800bce4:	4a47      	ldr	r2, [pc, #284]	@ (800be04 <dir_register+0x1ec>)
 800bce6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcea:	089b      	lsrs	r3, r3, #2
 800bcec:	3301      	adds	r3, #1
 800bcee:	e000      	b.n	800bcf2 <dir_register+0xda>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800bcf4:	6a39      	ldr	r1, [r7, #32]
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff fcc0 	bl	800b67c <dir_alloc>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800bd02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d148      	bne.n	800bd9c <dir_register+0x184>
 800bd0a:	6a3b      	ldr	r3, [r7, #32]
 800bd0c:	3b01      	subs	r3, #1
 800bd0e:	623b      	str	r3, [r7, #32]
 800bd10:	6a3b      	ldr	r3, [r7, #32]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d042      	beq.n	800bd9c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	695a      	ldr	r2, [r3, #20]
 800bd1a:	6a3b      	ldr	r3, [r7, #32]
 800bd1c:	015b      	lsls	r3, r3, #5
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	4619      	mov	r1, r3
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff fb4b 	bl	800b3be <dir_sdi>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bd2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d132      	bne.n	800bd9c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3324      	adds	r3, #36	@ 0x24
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7ff fe8a 	bl	800ba54 <sum_sfn>
 800bd40:	4603      	mov	r3, r0
 800bd42:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	4619      	mov	r1, r3
 800bd4a:	69f8      	ldr	r0, [r7, #28]
 800bd4c:	f7fe ff58 	bl	800ac00 <move_window>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800bd56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d11d      	bne.n	800bd9a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	6918      	ldr	r0, [r3, #16]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6a19      	ldr	r1, [r3, #32]
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	b2da      	uxtb	r2, r3
 800bd6a:	7efb      	ldrb	r3, [r7, #27]
 800bd6c:	f7ff fd7c 	bl	800b868 <put_lfn>
				fs->wflag = 1;
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	2201      	movs	r2, #1
 800bd74:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800bd76:	2100      	movs	r1, #0
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7ff fba9 	bl	800b4d0 <dir_next>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800bd84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d107      	bne.n	800bd9c <dir_register+0x184>
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	623b      	str	r3, [r7, #32]
 800bd92:	6a3b      	ldr	r3, [r7, #32]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1d5      	bne.n	800bd44 <dir_register+0x12c>
 800bd98:	e000      	b.n	800bd9c <dir_register+0x184>
				if (res != FR_OK) break;
 800bd9a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bd9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d128      	bne.n	800bdf6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	4619      	mov	r1, r3
 800bdaa:	69f8      	ldr	r0, [r7, #28]
 800bdac:	f7fe ff28 	bl	800ac00 <move_window>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800bdb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d11b      	bne.n	800bdf6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a1b      	ldr	r3, [r3, #32]
 800bdc2:	2220      	movs	r2, #32
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe fd0c 	bl	800a7e4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6a18      	ldr	r0, [r3, #32]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	3324      	adds	r3, #36	@ 0x24
 800bdd4:	220b      	movs	r2, #11
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	f7fe fce3 	bl	800a7a2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	330c      	adds	r3, #12
 800bde8:	f002 0218 	and.w	r2, r2, #24
 800bdec:	b2d2      	uxtb	r2, r2
 800bdee:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bdf6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3730      	adds	r7, #48	@ 0x30
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	4ec4ec4f 	.word	0x4ec4ec4f

0800be08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b08a      	sub	sp, #40	@ 0x28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	613b      	str	r3, [r7, #16]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	60fb      	str	r3, [r7, #12]
 800be20:	2300      	movs	r3, #0
 800be22:	617b      	str	r3, [r7, #20]
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	1c5a      	adds	r2, r3, #1
 800be2c:	61ba      	str	r2, [r7, #24]
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	4413      	add	r3, r2
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800be36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be38:	2b1f      	cmp	r3, #31
 800be3a:	d940      	bls.n	800bebe <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800be3c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be3e:	2b2f      	cmp	r3, #47	@ 0x2f
 800be40:	d006      	beq.n	800be50 <create_name+0x48>
 800be42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be44:	2b5c      	cmp	r3, #92	@ 0x5c
 800be46:	d110      	bne.n	800be6a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800be48:	e002      	b.n	800be50 <create_name+0x48>
 800be4a:	69bb      	ldr	r3, [r7, #24]
 800be4c:	3301      	adds	r3, #1
 800be4e:	61bb      	str	r3, [r7, #24]
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	4413      	add	r3, r2
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	2b2f      	cmp	r3, #47	@ 0x2f
 800be5a:	d0f6      	beq.n	800be4a <create_name+0x42>
 800be5c:	693a      	ldr	r2, [r7, #16]
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	4413      	add	r3, r2
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b5c      	cmp	r3, #92	@ 0x5c
 800be66:	d0f0      	beq.n	800be4a <create_name+0x42>
			break;
 800be68:	e02a      	b.n	800bec0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2bfe      	cmp	r3, #254	@ 0xfe
 800be6e:	d901      	bls.n	800be74 <create_name+0x6c>
 800be70:	2306      	movs	r3, #6
 800be72:	e17d      	b.n	800c170 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800be74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be76:	b2db      	uxtb	r3, r3
 800be78:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800be7a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be7c:	2101      	movs	r1, #1
 800be7e:	4618      	mov	r0, r3
 800be80:	f001 fdae 	bl	800d9e0 <ff_convert>
 800be84:	4603      	mov	r3, r0
 800be86:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800be88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d101      	bne.n	800be92 <create_name+0x8a>
 800be8e:	2306      	movs	r3, #6
 800be90:	e16e      	b.n	800c170 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800be92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be94:	2b7f      	cmp	r3, #127	@ 0x7f
 800be96:	d809      	bhi.n	800beac <create_name+0xa4>
 800be98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be9a:	4619      	mov	r1, r3
 800be9c:	488d      	ldr	r0, [pc, #564]	@ (800c0d4 <create_name+0x2cc>)
 800be9e:	f7fe fce3 	bl	800a868 <chk_chr>
 800bea2:	4603      	mov	r3, r0
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d001      	beq.n	800beac <create_name+0xa4>
 800bea8:	2306      	movs	r3, #6
 800beaa:	e161      	b.n	800c170 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	1c5a      	adds	r2, r3, #1
 800beb0:	617a      	str	r2, [r7, #20]
 800beb2:	005b      	lsls	r3, r3, #1
 800beb4:	68fa      	ldr	r2, [r7, #12]
 800beb6:	4413      	add	r3, r2
 800beb8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800beba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800bebc:	e7b4      	b.n	800be28 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800bebe:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	441a      	add	r2, r3
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800beca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800becc:	2b1f      	cmp	r3, #31
 800bece:	d801      	bhi.n	800bed4 <create_name+0xcc>
 800bed0:	2304      	movs	r3, #4
 800bed2:	e000      	b.n	800bed6 <create_name+0xce>
 800bed4:	2300      	movs	r3, #0
 800bed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800beda:	e011      	b.n	800bf00 <create_name+0xf8>
		w = lfn[di - 1];
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bee2:	3b01      	subs	r3, #1
 800bee4:	005b      	lsls	r3, r3, #1
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	4413      	add	r3, r2
 800beea:	881b      	ldrh	r3, [r3, #0]
 800beec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800beee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bef0:	2b20      	cmp	r3, #32
 800bef2:	d002      	beq.n	800befa <create_name+0xf2>
 800bef4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bef6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bef8:	d106      	bne.n	800bf08 <create_name+0x100>
		di--;
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	3b01      	subs	r3, #1
 800befe:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d1ea      	bne.n	800bedc <create_name+0xd4>
 800bf06:	e000      	b.n	800bf0a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800bf08:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	4413      	add	r3, r2
 800bf12:	2200      	movs	r2, #0
 800bf14:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d101      	bne.n	800bf20 <create_name+0x118>
 800bf1c:	2306      	movs	r3, #6
 800bf1e:	e127      	b.n	800c170 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3324      	adds	r3, #36	@ 0x24
 800bf24:	220b      	movs	r2, #11
 800bf26:	2120      	movs	r1, #32
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f7fe fc5b 	bl	800a7e4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800bf2e:	2300      	movs	r3, #0
 800bf30:	61bb      	str	r3, [r7, #24]
 800bf32:	e002      	b.n	800bf3a <create_name+0x132>
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	3301      	adds	r3, #1
 800bf38:	61bb      	str	r3, [r7, #24]
 800bf3a:	69bb      	ldr	r3, [r7, #24]
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	4413      	add	r3, r2
 800bf42:	881b      	ldrh	r3, [r3, #0]
 800bf44:	2b20      	cmp	r3, #32
 800bf46:	d0f5      	beq.n	800bf34 <create_name+0x12c>
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	005b      	lsls	r3, r3, #1
 800bf4c:	68fa      	ldr	r2, [r7, #12]
 800bf4e:	4413      	add	r3, r2
 800bf50:	881b      	ldrh	r3, [r3, #0]
 800bf52:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf54:	d0ee      	beq.n	800bf34 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d009      	beq.n	800bf70 <create_name+0x168>
 800bf5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bf60:	f043 0303 	orr.w	r3, r3, #3
 800bf64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800bf68:	e002      	b.n	800bf70 <create_name+0x168>
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	3b01      	subs	r3, #1
 800bf6e:	617b      	str	r3, [r7, #20]
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d009      	beq.n	800bf8a <create_name+0x182>
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	005b      	lsls	r3, r3, #1
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	4413      	add	r3, r2
 800bf84:	881b      	ldrh	r3, [r3, #0]
 800bf86:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf88:	d1ef      	bne.n	800bf6a <create_name+0x162>

	i = b = 0; ni = 8;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800bf90:	2300      	movs	r3, #0
 800bf92:	623b      	str	r3, [r7, #32]
 800bf94:	2308      	movs	r3, #8
 800bf96:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	61ba      	str	r2, [r7, #24]
 800bf9e:	005b      	lsls	r3, r3, #1
 800bfa0:	68fa      	ldr	r2, [r7, #12]
 800bfa2:	4413      	add	r3, r2
 800bfa4:	881b      	ldrh	r3, [r3, #0]
 800bfa6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800bfa8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f000 8090 	beq.w	800c0d0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800bfb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	d006      	beq.n	800bfc4 <create_name+0x1bc>
 800bfb6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bfb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfba:	d10a      	bne.n	800bfd2 <create_name+0x1ca>
 800bfbc:	69ba      	ldr	r2, [r7, #24]
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d006      	beq.n	800bfd2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800bfc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfc8:	f043 0303 	orr.w	r3, r3, #3
 800bfcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bfd0:	e07d      	b.n	800c0ce <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800bfd2:	6a3a      	ldr	r2, [r7, #32]
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d203      	bcs.n	800bfe2 <create_name+0x1da>
 800bfda:	69ba      	ldr	r2, [r7, #24]
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d123      	bne.n	800c02a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	2b0b      	cmp	r3, #11
 800bfe6:	d106      	bne.n	800bff6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800bfe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bfec:	f043 0303 	orr.w	r3, r3, #3
 800bff0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bff4:	e075      	b.n	800c0e2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800bff6:	69ba      	ldr	r2, [r7, #24]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d005      	beq.n	800c00a <create_name+0x202>
 800bffe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c002:	f043 0303 	orr.w	r3, r3, #3
 800c006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800c00a:	69ba      	ldr	r2, [r7, #24]
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d866      	bhi.n	800c0e0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	61bb      	str	r3, [r7, #24]
 800c016:	2308      	movs	r3, #8
 800c018:	623b      	str	r3, [r7, #32]
 800c01a:	230b      	movs	r3, #11
 800c01c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c01e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c028:	e051      	b.n	800c0ce <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c02a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c02c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c02e:	d914      	bls.n	800c05a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c030:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c032:	2100      	movs	r1, #0
 800c034:	4618      	mov	r0, r3
 800c036:	f001 fcd3 	bl	800d9e0 <ff_convert>
 800c03a:	4603      	mov	r3, r0
 800c03c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c03e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c040:	2b00      	cmp	r3, #0
 800c042:	d004      	beq.n	800c04e <create_name+0x246>
 800c044:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c046:	3b80      	subs	r3, #128	@ 0x80
 800c048:	4a23      	ldr	r2, [pc, #140]	@ (800c0d8 <create_name+0x2d0>)
 800c04a:	5cd3      	ldrb	r3, [r2, r3]
 800c04c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c04e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c052:	f043 0302 	orr.w	r3, r3, #2
 800c056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c05a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d007      	beq.n	800c070 <create_name+0x268>
 800c060:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c062:	4619      	mov	r1, r3
 800c064:	481d      	ldr	r0, [pc, #116]	@ (800c0dc <create_name+0x2d4>)
 800c066:	f7fe fbff 	bl	800a868 <chk_chr>
 800c06a:	4603      	mov	r3, r0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d008      	beq.n	800c082 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c070:	235f      	movs	r3, #95	@ 0x5f
 800c072:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c074:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c078:	f043 0303 	orr.w	r3, r3, #3
 800c07c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c080:	e01b      	b.n	800c0ba <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c082:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c084:	2b40      	cmp	r3, #64	@ 0x40
 800c086:	d909      	bls.n	800c09c <create_name+0x294>
 800c088:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c08a:	2b5a      	cmp	r3, #90	@ 0x5a
 800c08c:	d806      	bhi.n	800c09c <create_name+0x294>
					b |= 2;
 800c08e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c092:	f043 0302 	orr.w	r3, r3, #2
 800c096:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c09a:	e00e      	b.n	800c0ba <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c09c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c09e:	2b60      	cmp	r3, #96	@ 0x60
 800c0a0:	d90b      	bls.n	800c0ba <create_name+0x2b2>
 800c0a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c0a4:	2b7a      	cmp	r3, #122	@ 0x7a
 800c0a6:	d808      	bhi.n	800c0ba <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c0a8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0ac:	f043 0301 	orr.w	r3, r3, #1
 800c0b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c0b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c0b6:	3b20      	subs	r3, #32
 800c0b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c0ba:	6a3b      	ldr	r3, [r7, #32]
 800c0bc:	1c5a      	adds	r2, r3, #1
 800c0be:	623a      	str	r2, [r7, #32]
 800c0c0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c0c2:	b2d1      	uxtb	r1, r2
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	460a      	mov	r2, r1
 800c0ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800c0ce:	e763      	b.n	800bf98 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c0d0:	bf00      	nop
 800c0d2:	e006      	b.n	800c0e2 <create_name+0x2da>
 800c0d4:	0800f814 	.word	0x0800f814
 800c0d8:	0804a5d0 	.word	0x0804a5d0
 800c0dc:	0800f820 	.word	0x0800f820
			if (si > di) break;			/* No extension */
 800c0e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c0e8:	2be5      	cmp	r3, #229	@ 0xe5
 800c0ea:	d103      	bne.n	800c0f4 <create_name+0x2ec>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2205      	movs	r2, #5
 800c0f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	2b08      	cmp	r3, #8
 800c0f8:	d104      	bne.n	800c104 <create_name+0x2fc>
 800c0fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c104:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c108:	f003 030c 	and.w	r3, r3, #12
 800c10c:	2b0c      	cmp	r3, #12
 800c10e:	d005      	beq.n	800c11c <create_name+0x314>
 800c110:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c114:	f003 0303 	and.w	r3, r3, #3
 800c118:	2b03      	cmp	r3, #3
 800c11a:	d105      	bne.n	800c128 <create_name+0x320>
 800c11c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c120:	f043 0302 	orr.w	r3, r3, #2
 800c124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c128:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c12c:	f003 0302 	and.w	r3, r3, #2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d117      	bne.n	800c164 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c134:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c138:	f003 0303 	and.w	r3, r3, #3
 800c13c:	2b01      	cmp	r3, #1
 800c13e:	d105      	bne.n	800c14c <create_name+0x344>
 800c140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c144:	f043 0310 	orr.w	r3, r3, #16
 800c148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c14c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c150:	f003 030c 	and.w	r3, r3, #12
 800c154:	2b04      	cmp	r3, #4
 800c156:	d105      	bne.n	800c164 <create_name+0x35c>
 800c158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c15c:	f043 0308 	orr.w	r3, r3, #8
 800c160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c16a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800c16e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c170:	4618      	mov	r0, r3
 800c172:	3728      	adds	r7, #40	@ 0x28
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b086      	sub	sp, #24
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c18c:	e002      	b.n	800c194 <follow_path+0x1c>
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	3301      	adds	r3, #1
 800c192:	603b      	str	r3, [r7, #0]
 800c194:	683b      	ldr	r3, [r7, #0]
 800c196:	781b      	ldrb	r3, [r3, #0]
 800c198:	2b2f      	cmp	r3, #47	@ 0x2f
 800c19a:	d0f8      	beq.n	800c18e <follow_path+0x16>
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1a2:	d0f4      	beq.n	800c18e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	781b      	ldrb	r3, [r3, #0]
 800c1ae:	2b1f      	cmp	r3, #31
 800c1b0:	d80a      	bhi.n	800c1c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2280      	movs	r2, #128	@ 0x80
 800c1b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c1ba:	2100      	movs	r1, #0
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f7ff f8fe 	bl	800b3be <dir_sdi>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	75fb      	strb	r3, [r7, #23]
 800c1c6:	e048      	b.n	800c25a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c1c8:	463b      	mov	r3, r7
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff fe1b 	bl	800be08 <create_name>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c1d6:	7dfb      	ldrb	r3, [r7, #23]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d139      	bne.n	800c250 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f7ff fc5a 	bl	800ba96 <dir_find>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c1ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d00a      	beq.n	800c20a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
 800c1f6:	2b04      	cmp	r3, #4
 800c1f8:	d12c      	bne.n	800c254 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c1fa:	7afb      	ldrb	r3, [r7, #11]
 800c1fc:	f003 0304 	and.w	r3, r3, #4
 800c200:	2b00      	cmp	r3, #0
 800c202:	d127      	bne.n	800c254 <follow_path+0xdc>
 800c204:	2305      	movs	r3, #5
 800c206:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c208:	e024      	b.n	800c254 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c20a:	7afb      	ldrb	r3, [r7, #11]
 800c20c:	f003 0304 	and.w	r3, r3, #4
 800c210:	2b00      	cmp	r3, #0
 800c212:	d121      	bne.n	800c258 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	799b      	ldrb	r3, [r3, #6]
 800c218:	f003 0310 	and.w	r3, r3, #16
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d102      	bne.n	800c226 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c220:	2305      	movs	r3, #5
 800c222:	75fb      	strb	r3, [r7, #23]
 800c224:	e019      	b.n	800c25a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	68fa      	ldr	r2, [r7, #12]
 800c232:	8992      	ldrh	r2, [r2, #12]
 800c234:	fbb3 f0f2 	udiv	r0, r3, r2
 800c238:	fb00 f202 	mul.w	r2, r0, r2
 800c23c:	1a9b      	subs	r3, r3, r2
 800c23e:	440b      	add	r3, r1
 800c240:	4619      	mov	r1, r3
 800c242:	68f8      	ldr	r0, [r7, #12]
 800c244:	f7ff fa61 	bl	800b70a <ld_clust>
 800c248:	4602      	mov	r2, r0
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c24e:	e7bb      	b.n	800c1c8 <follow_path+0x50>
			if (res != FR_OK) break;
 800c250:	bf00      	nop
 800c252:	e002      	b.n	800c25a <follow_path+0xe2>
				break;
 800c254:	bf00      	nop
 800c256:	e000      	b.n	800c25a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c258:	bf00      	nop
			}
		}
	}

	return res;
 800c25a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3718      	adds	r7, #24
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c264:	b480      	push	{r7}
 800c266:	b087      	sub	sp, #28
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c26c:	f04f 33ff 	mov.w	r3, #4294967295
 800c270:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d031      	beq.n	800c2de <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	617b      	str	r3, [r7, #20]
 800c280:	e002      	b.n	800c288 <get_ldnumber+0x24>
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	3301      	adds	r3, #1
 800c286:	617b      	str	r3, [r7, #20]
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	2b1f      	cmp	r3, #31
 800c28e:	d903      	bls.n	800c298 <get_ldnumber+0x34>
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b3a      	cmp	r3, #58	@ 0x3a
 800c296:	d1f4      	bne.n	800c282 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	2b3a      	cmp	r3, #58	@ 0x3a
 800c29e:	d11c      	bne.n	800c2da <get_ldnumber+0x76>
			tp = *path;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	1c5a      	adds	r2, r3, #1
 800c2aa:	60fa      	str	r2, [r7, #12]
 800c2ac:	781b      	ldrb	r3, [r3, #0]
 800c2ae:	3b30      	subs	r3, #48	@ 0x30
 800c2b0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	2b09      	cmp	r3, #9
 800c2b6:	d80e      	bhi.n	800c2d6 <get_ldnumber+0x72>
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d10a      	bne.n	800c2d6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d107      	bne.n	800c2d6 <get_ldnumber+0x72>
					vol = (int)i;
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	617b      	str	r3, [r7, #20]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	e002      	b.n	800c2e0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c2da:	2300      	movs	r3, #0
 800c2dc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c2de:	693b      	ldr	r3, [r7, #16]
}
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	371c      	adds	r7, #28
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr

0800c2ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	70da      	strb	r2, [r3, #3]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c302:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7fe fc7a 	bl	800ac00 <move_window>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d001      	beq.n	800c316 <check_fs+0x2a>
 800c312:	2304      	movs	r3, #4
 800c314:	e038      	b.n	800c388 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	3338      	adds	r3, #56	@ 0x38
 800c31a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe f9bc 	bl	800a69c <ld_word>
 800c324:	4603      	mov	r3, r0
 800c326:	461a      	mov	r2, r3
 800c328:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d001      	beq.n	800c334 <check_fs+0x48>
 800c330:	2303      	movs	r3, #3
 800c332:	e029      	b.n	800c388 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c33a:	2be9      	cmp	r3, #233	@ 0xe9
 800c33c:	d009      	beq.n	800c352 <check_fs+0x66>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c344:	2beb      	cmp	r3, #235	@ 0xeb
 800c346:	d11e      	bne.n	800c386 <check_fs+0x9a>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800c34e:	2b90      	cmp	r3, #144	@ 0x90
 800c350:	d119      	bne.n	800c386 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	3338      	adds	r3, #56	@ 0x38
 800c356:	3336      	adds	r3, #54	@ 0x36
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fe f9b8 	bl	800a6ce <ld_dword>
 800c35e:	4603      	mov	r3, r0
 800c360:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c364:	4a0a      	ldr	r2, [pc, #40]	@ (800c390 <check_fs+0xa4>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d101      	bne.n	800c36e <check_fs+0x82>
 800c36a:	2300      	movs	r3, #0
 800c36c:	e00c      	b.n	800c388 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	3338      	adds	r3, #56	@ 0x38
 800c372:	3352      	adds	r3, #82	@ 0x52
 800c374:	4618      	mov	r0, r3
 800c376:	f7fe f9aa 	bl	800a6ce <ld_dword>
 800c37a:	4603      	mov	r3, r0
 800c37c:	4a05      	ldr	r2, [pc, #20]	@ (800c394 <check_fs+0xa8>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d101      	bne.n	800c386 <check_fs+0x9a>
 800c382:	2300      	movs	r3, #0
 800c384:	e000      	b.n	800c388 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c386:	2302      	movs	r3, #2
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	00544146 	.word	0x00544146
 800c394:	33544146 	.word	0x33544146

0800c398 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b096      	sub	sp, #88	@ 0x58
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	4613      	mov	r3, r2
 800c3a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f7ff ff59 	bl	800c264 <get_ldnumber>
 800c3b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	da01      	bge.n	800c3be <find_volume+0x26>
 800c3ba:	230b      	movs	r3, #11
 800c3bc:	e265      	b.n	800c88a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c3be:	4a9f      	ldr	r2, [pc, #636]	@ (800c63c <find_volume+0x2a4>)
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3c6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c3c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d101      	bne.n	800c3d2 <find_volume+0x3a>
 800c3ce:	230c      	movs	r3, #12
 800c3d0:	e25b      	b.n	800c88a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c3d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c3d8:	79fb      	ldrb	r3, [r7, #7]
 800c3da:	f023 0301 	bic.w	r3, r3, #1
 800c3de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d01a      	beq.n	800c41e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3ea:	785b      	ldrb	r3, [r3, #1]
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fe f8b5 	bl	800a55c <disk_status>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c3f8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10c      	bne.n	800c41e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c404:	79fb      	ldrb	r3, [r7, #7]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d007      	beq.n	800c41a <find_volume+0x82>
 800c40a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c40e:	f003 0304 	and.w	r3, r3, #4
 800c412:	2b00      	cmp	r3, #0
 800c414:	d001      	beq.n	800c41a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c416:	230a      	movs	r3, #10
 800c418:	e237      	b.n	800c88a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800c41a:	2300      	movs	r3, #0
 800c41c:	e235      	b.n	800c88a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c420:	2200      	movs	r2, #0
 800c422:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c426:	b2da      	uxtb	r2, r3
 800c428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42e:	785b      	ldrb	r3, [r3, #1]
 800c430:	4618      	mov	r0, r3
 800c432:	f7fe f8ad 	bl	800a590 <disk_initialize>
 800c436:	4603      	mov	r3, r0
 800c438:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c43c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c440:	f003 0301 	and.w	r3, r3, #1
 800c444:	2b00      	cmp	r3, #0
 800c446:	d001      	beq.n	800c44c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c448:	2303      	movs	r3, #3
 800c44a:	e21e      	b.n	800c88a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c44c:	79fb      	ldrb	r3, [r7, #7]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d007      	beq.n	800c462 <find_volume+0xca>
 800c452:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c456:	f003 0304 	and.w	r3, r3, #4
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c45e:	230a      	movs	r3, #10
 800c460:	e213      	b.n	800c88a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800c462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c464:	7858      	ldrb	r0, [r3, #1]
 800c466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c468:	330c      	adds	r3, #12
 800c46a:	461a      	mov	r2, r3
 800c46c:	2102      	movs	r1, #2
 800c46e:	f7fe f8f7 	bl	800a660 <disk_ioctl>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <find_volume+0xe4>
 800c478:	2301      	movs	r3, #1
 800c47a:	e206      	b.n	800c88a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800c47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c47e:	899b      	ldrh	r3, [r3, #12]
 800c480:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c484:	d80d      	bhi.n	800c4a2 <find_volume+0x10a>
 800c486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c488:	899b      	ldrh	r3, [r3, #12]
 800c48a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c48e:	d308      	bcc.n	800c4a2 <find_volume+0x10a>
 800c490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c492:	899b      	ldrh	r3, [r3, #12]
 800c494:	461a      	mov	r2, r3
 800c496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c498:	899b      	ldrh	r3, [r3, #12]
 800c49a:	3b01      	subs	r3, #1
 800c49c:	4013      	ands	r3, r2
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <find_volume+0x10e>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	e1f1      	b.n	800c88a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c4aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4ae:	f7ff ff1d 	bl	800c2ec <check_fs>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c4b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d149      	bne.n	800c554 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4c4:	e01e      	b.n	800c504 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c4cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4ce:	011b      	lsls	r3, r3, #4
 800c4d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c4d4:	4413      	add	r3, r2
 800c4d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4da:	3304      	adds	r3, #4
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d006      	beq.n	800c4f0 <find_volume+0x158>
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe f8f1 	bl	800a6ce <ld_dword>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	e000      	b.n	800c4f2 <find_volume+0x15a>
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	3358      	adds	r3, #88	@ 0x58
 800c4f8:	443b      	add	r3, r7
 800c4fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c500:	3301      	adds	r3, #1
 800c502:	643b      	str	r3, [r7, #64]	@ 0x40
 800c504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c506:	2b03      	cmp	r3, #3
 800c508:	d9dd      	bls.n	800c4c6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c50a:	2300      	movs	r3, #0
 800c50c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <find_volume+0x182>
 800c514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c516:	3b01      	subs	r3, #1
 800c518:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	3358      	adds	r3, #88	@ 0x58
 800c520:	443b      	add	r3, r7
 800c522:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c526:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d005      	beq.n	800c53a <find_volume+0x1a2>
 800c52e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c530:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c532:	f7ff fedb 	bl	800c2ec <check_fs>
 800c536:	4603      	mov	r3, r0
 800c538:	e000      	b.n	800c53c <find_volume+0x1a4>
 800c53a:	2303      	movs	r3, #3
 800c53c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c540:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c544:	2b01      	cmp	r3, #1
 800c546:	d905      	bls.n	800c554 <find_volume+0x1bc>
 800c548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c54a:	3301      	adds	r3, #1
 800c54c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c54e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c550:	2b03      	cmp	r3, #3
 800c552:	d9e2      	bls.n	800c51a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c554:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c558:	2b04      	cmp	r3, #4
 800c55a:	d101      	bne.n	800c560 <find_volume+0x1c8>
 800c55c:	2301      	movs	r3, #1
 800c55e:	e194      	b.n	800c88a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c560:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c564:	2b01      	cmp	r3, #1
 800c566:	d901      	bls.n	800c56c <find_volume+0x1d4>
 800c568:	230d      	movs	r3, #13
 800c56a:	e18e      	b.n	800c88a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56e:	3338      	adds	r3, #56	@ 0x38
 800c570:	330b      	adds	r3, #11
 800c572:	4618      	mov	r0, r3
 800c574:	f7fe f892 	bl	800a69c <ld_word>
 800c578:	4603      	mov	r3, r0
 800c57a:	461a      	mov	r2, r3
 800c57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c57e:	899b      	ldrh	r3, [r3, #12]
 800c580:	429a      	cmp	r2, r3
 800c582:	d001      	beq.n	800c588 <find_volume+0x1f0>
 800c584:	230d      	movs	r3, #13
 800c586:	e180      	b.n	800c88a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c58a:	3338      	adds	r3, #56	@ 0x38
 800c58c:	3316      	adds	r3, #22
 800c58e:	4618      	mov	r0, r3
 800c590:	f7fe f884 	bl	800a69c <ld_word>
 800c594:	4603      	mov	r3, r0
 800c596:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c598:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d106      	bne.n	800c5ac <find_volume+0x214>
 800c59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a0:	3338      	adds	r3, #56	@ 0x38
 800c5a2:	3324      	adds	r3, #36	@ 0x24
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fe f892 	bl	800a6ce <ld_dword>
 800c5aa:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5b0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c5b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5be:	789b      	ldrb	r3, [r3, #2]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d005      	beq.n	800c5d0 <find_volume+0x238>
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c6:	789b      	ldrb	r3, [r3, #2]
 800c5c8:	2b02      	cmp	r3, #2
 800c5ca:	d001      	beq.n	800c5d0 <find_volume+0x238>
 800c5cc:	230d      	movs	r3, #13
 800c5ce:	e15c      	b.n	800c88a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d2:	789b      	ldrb	r3, [r3, #2]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5d8:	fb02 f303 	mul.w	r3, r2, r3
 800c5dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c5de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ec:	895b      	ldrh	r3, [r3, #10]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d008      	beq.n	800c604 <find_volume+0x26c>
 800c5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f4:	895b      	ldrh	r3, [r3, #10]
 800c5f6:	461a      	mov	r2, r3
 800c5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5fa:	895b      	ldrh	r3, [r3, #10]
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	4013      	ands	r3, r2
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <find_volume+0x270>
 800c604:	230d      	movs	r3, #13
 800c606:	e140      	b.n	800c88a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60a:	3338      	adds	r3, #56	@ 0x38
 800c60c:	3311      	adds	r3, #17
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe f844 	bl	800a69c <ld_word>
 800c614:	4603      	mov	r3, r0
 800c616:	461a      	mov	r2, r3
 800c618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c61c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61e:	891b      	ldrh	r3, [r3, #8]
 800c620:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c622:	8992      	ldrh	r2, [r2, #12]
 800c624:	0952      	lsrs	r2, r2, #5
 800c626:	b292      	uxth	r2, r2
 800c628:	fbb3 f1f2 	udiv	r1, r3, r2
 800c62c:	fb01 f202 	mul.w	r2, r1, r2
 800c630:	1a9b      	subs	r3, r3, r2
 800c632:	b29b      	uxth	r3, r3
 800c634:	2b00      	cmp	r3, #0
 800c636:	d003      	beq.n	800c640 <find_volume+0x2a8>
 800c638:	230d      	movs	r3, #13
 800c63a:	e126      	b.n	800c88a <find_volume+0x4f2>
 800c63c:	20006734 	.word	0x20006734

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c642:	3338      	adds	r3, #56	@ 0x38
 800c644:	3313      	adds	r3, #19
 800c646:	4618      	mov	r0, r3
 800c648:	f7fe f828 	bl	800a69c <ld_word>
 800c64c:	4603      	mov	r3, r0
 800c64e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c650:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c652:	2b00      	cmp	r3, #0
 800c654:	d106      	bne.n	800c664 <find_volume+0x2cc>
 800c656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c658:	3338      	adds	r3, #56	@ 0x38
 800c65a:	3320      	adds	r3, #32
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7fe f836 	bl	800a6ce <ld_dword>
 800c662:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c666:	3338      	adds	r3, #56	@ 0x38
 800c668:	330e      	adds	r3, #14
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7fe f816 	bl	800a69c <ld_word>
 800c670:	4603      	mov	r3, r0
 800c672:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c674:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c676:	2b00      	cmp	r3, #0
 800c678:	d101      	bne.n	800c67e <find_volume+0x2e6>
 800c67a:	230d      	movs	r3, #13
 800c67c:	e105      	b.n	800c88a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c67e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c682:	4413      	add	r3, r2
 800c684:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c686:	8911      	ldrh	r1, [r2, #8]
 800c688:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c68a:	8992      	ldrh	r2, [r2, #12]
 800c68c:	0952      	lsrs	r2, r2, #5
 800c68e:	b292      	uxth	r2, r2
 800c690:	fbb1 f2f2 	udiv	r2, r1, r2
 800c694:	b292      	uxth	r2, r2
 800c696:	4413      	add	r3, r2
 800c698:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c69a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d201      	bcs.n	800c6a6 <find_volume+0x30e>
 800c6a2:	230d      	movs	r3, #13
 800c6a4:	e0f1      	b.n	800c88a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c6a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c6ae:	8952      	ldrh	r2, [r2, #10]
 800c6b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6b4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d101      	bne.n	800c6c0 <find_volume+0x328>
 800c6bc:	230d      	movs	r3, #13
 800c6be:	e0e4      	b.n	800c88a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800c6c0:	2303      	movs	r3, #3
 800c6c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d802      	bhi.n	800c6d6 <find_volume+0x33e>
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d802      	bhi.n	800c6e6 <find_volume+0x34e>
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e8:	1c9a      	adds	r2, r3, #2
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ec:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800c6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6f2:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c6f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c6f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6f8:	441a      	add	r2, r3
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fc:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800c6fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c702:	441a      	add	r2, r3
 800c704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c706:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800c708:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c70c:	2b03      	cmp	r3, #3
 800c70e:	d11e      	bne.n	800c74e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c712:	3338      	adds	r3, #56	@ 0x38
 800c714:	332a      	adds	r3, #42	@ 0x2a
 800c716:	4618      	mov	r0, r3
 800c718:	f7fd ffc0 	bl	800a69c <ld_word>
 800c71c:	4603      	mov	r3, r0
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d001      	beq.n	800c726 <find_volume+0x38e>
 800c722:	230d      	movs	r3, #13
 800c724:	e0b1      	b.n	800c88a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c728:	891b      	ldrh	r3, [r3, #8]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d001      	beq.n	800c732 <find_volume+0x39a>
 800c72e:	230d      	movs	r3, #13
 800c730:	e0ab      	b.n	800c88a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c734:	3338      	adds	r3, #56	@ 0x38
 800c736:	332c      	adds	r3, #44	@ 0x2c
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fd ffc8 	bl	800a6ce <ld_dword>
 800c73e:	4602      	mov	r2, r0
 800c740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c742:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c746:	69db      	ldr	r3, [r3, #28]
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c74c:	e01f      	b.n	800c78e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c750:	891b      	ldrh	r3, [r3, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d101      	bne.n	800c75a <find_volume+0x3c2>
 800c756:	230d      	movs	r3, #13
 800c758:	e097      	b.n	800c88a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c75e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c760:	441a      	add	r2, r3
 800c762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c764:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c766:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c76a:	2b02      	cmp	r3, #2
 800c76c:	d103      	bne.n	800c776 <find_volume+0x3de>
 800c76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c770:	69db      	ldr	r3, [r3, #28]
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	e00a      	b.n	800c78c <find_volume+0x3f4>
 800c776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c778:	69da      	ldr	r2, [r3, #28]
 800c77a:	4613      	mov	r3, r2
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	4413      	add	r3, r2
 800c780:	085a      	lsrs	r2, r3, #1
 800c782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c784:	69db      	ldr	r3, [r3, #28]
 800c786:	f003 0301 	and.w	r3, r3, #1
 800c78a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c78c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c790:	6a1a      	ldr	r2, [r3, #32]
 800c792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c794:	899b      	ldrh	r3, [r3, #12]
 800c796:	4619      	mov	r1, r3
 800c798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c79a:	440b      	add	r3, r1
 800c79c:	3b01      	subs	r3, #1
 800c79e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c7a0:	8989      	ldrh	r1, [r1, #12]
 800c7a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d201      	bcs.n	800c7ae <find_volume+0x416>
 800c7aa:	230d      	movs	r3, #13
 800c7ac:	e06d      	b.n	800c88a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c7b4:	619a      	str	r2, [r3, #24]
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b8:	699a      	ldr	r2, [r3, #24]
 800c7ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7bc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800c7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c0:	2280      	movs	r2, #128	@ 0x80
 800c7c2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c7c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c7c8:	2b03      	cmp	r3, #3
 800c7ca:	d149      	bne.n	800c860 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ce:	3338      	adds	r3, #56	@ 0x38
 800c7d0:	3330      	adds	r3, #48	@ 0x30
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f7fd ff62 	bl	800a69c <ld_word>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d140      	bne.n	800c860 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c7de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7e6:	f7fe fa0b 	bl	800ac00 <move_window>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d137      	bne.n	800c860 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f8:	3338      	adds	r3, #56	@ 0x38
 800c7fa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c7fe:	4618      	mov	r0, r3
 800c800:	f7fd ff4c 	bl	800a69c <ld_word>
 800c804:	4603      	mov	r3, r0
 800c806:	461a      	mov	r2, r3
 800c808:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d127      	bne.n	800c860 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c812:	3338      	adds	r3, #56	@ 0x38
 800c814:	4618      	mov	r0, r3
 800c816:	f7fd ff5a 	bl	800a6ce <ld_dword>
 800c81a:	4603      	mov	r3, r0
 800c81c:	4a1d      	ldr	r2, [pc, #116]	@ (800c894 <find_volume+0x4fc>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d11e      	bne.n	800c860 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c824:	3338      	adds	r3, #56	@ 0x38
 800c826:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7fd ff4f 	bl	800a6ce <ld_dword>
 800c830:	4603      	mov	r3, r0
 800c832:	4a19      	ldr	r2, [pc, #100]	@ (800c898 <find_volume+0x500>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d113      	bne.n	800c860 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83a:	3338      	adds	r3, #56	@ 0x38
 800c83c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c840:	4618      	mov	r0, r3
 800c842:	f7fd ff44 	bl	800a6ce <ld_dword>
 800c846:	4602      	mov	r2, r0
 800c848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c84c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84e:	3338      	adds	r3, #56	@ 0x38
 800c850:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c854:	4618      	mov	r0, r3
 800c856:	f7fd ff3a 	bl	800a6ce <ld_dword>
 800c85a:	4602      	mov	r2, r0
 800c85c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c85e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c862:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c866:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c868:	4b0c      	ldr	r3, [pc, #48]	@ (800c89c <find_volume+0x504>)
 800c86a:	881b      	ldrh	r3, [r3, #0]
 800c86c:	3301      	adds	r3, #1
 800c86e:	b29a      	uxth	r2, r3
 800c870:	4b0a      	ldr	r3, [pc, #40]	@ (800c89c <find_volume+0x504>)
 800c872:	801a      	strh	r2, [r3, #0]
 800c874:	4b09      	ldr	r3, [pc, #36]	@ (800c89c <find_volume+0x504>)
 800c876:	881a      	ldrh	r2, [r3, #0]
 800c878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c87a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800c87c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c87e:	4a08      	ldr	r2, [pc, #32]	@ (800c8a0 <find_volume+0x508>)
 800c880:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c882:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c884:	f7fe f954 	bl	800ab30 <clear_lock>
#endif
	return FR_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3758      	adds	r7, #88	@ 0x58
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}
 800c892:	bf00      	nop
 800c894:	41615252 	.word	0x41615252
 800c898:	61417272 	.word	0x61417272
 800c89c:	20006738 	.word	0x20006738
 800c8a0:	2000675c 	.word	0x2000675c

0800c8a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c8ae:	2309      	movs	r3, #9
 800c8b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d01c      	beq.n	800c8f2 <validate+0x4e>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d018      	beq.n	800c8f2 <validate+0x4e>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d013      	beq.n	800c8f2 <validate+0x4e>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	889a      	ldrh	r2, [r3, #4]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	88db      	ldrh	r3, [r3, #6]
 800c8d4:	429a      	cmp	r2, r3
 800c8d6:	d10c      	bne.n	800c8f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	785b      	ldrb	r3, [r3, #1]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fd fe3c 	bl	800a55c <disk_status>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d101      	bne.n	800c8f2 <validate+0x4e>
			res = FR_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c8f2:	7bfb      	ldrb	r3, [r7, #15]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d102      	bne.n	800c8fe <validate+0x5a>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	e000      	b.n	800c900 <validate+0x5c>
 800c8fe:	2300      	movs	r3, #0
 800c900:	683a      	ldr	r2, [r7, #0]
 800c902:	6013      	str	r3, [r2, #0]
	return res;
 800c904:	7bfb      	ldrb	r3, [r7, #15]
}
 800c906:	4618      	mov	r0, r3
 800c908:	3710      	adds	r7, #16
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
	...

0800c910 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b088      	sub	sp, #32
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	4613      	mov	r3, r2
 800c91c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c922:	f107 0310 	add.w	r3, r7, #16
 800c926:	4618      	mov	r0, r3
 800c928:	f7ff fc9c 	bl	800c264 <get_ldnumber>
 800c92c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	2b00      	cmp	r3, #0
 800c932:	da01      	bge.n	800c938 <f_mount+0x28>
 800c934:	230b      	movs	r3, #11
 800c936:	e02b      	b.n	800c990 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c938:	4a17      	ldr	r2, [pc, #92]	@ (800c998 <f_mount+0x88>)
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c940:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d005      	beq.n	800c954 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c948:	69b8      	ldr	r0, [r7, #24]
 800c94a:	f7fe f8f1 	bl	800ab30 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	2200      	movs	r2, #0
 800c952:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d002      	beq.n	800c960 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c960:	68fa      	ldr	r2, [r7, #12]
 800c962:	490d      	ldr	r1, [pc, #52]	@ (800c998 <f_mount+0x88>)
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <f_mount+0x66>
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	2b01      	cmp	r3, #1
 800c974:	d001      	beq.n	800c97a <f_mount+0x6a>
 800c976:	2300      	movs	r3, #0
 800c978:	e00a      	b.n	800c990 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c97a:	f107 010c 	add.w	r1, r7, #12
 800c97e:	f107 0308 	add.w	r3, r7, #8
 800c982:	2200      	movs	r2, #0
 800c984:	4618      	mov	r0, r3
 800c986:	f7ff fd07 	bl	800c398 <find_volume>
 800c98a:	4603      	mov	r3, r0
 800c98c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c98e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c990:	4618      	mov	r0, r3
 800c992:	3720      	adds	r7, #32
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	20006734 	.word	0x20006734

0800c99c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b09a      	sub	sp, #104	@ 0x68
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	60f8      	str	r0, [r7, #12]
 800c9a4:	60b9      	str	r1, [r7, #8]
 800c9a6:	4613      	mov	r3, r2
 800c9a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <f_open+0x18>
 800c9b0:	2309      	movs	r3, #9
 800c9b2:	e1b7      	b.n	800cd24 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c9b4:	79fb      	ldrb	r3, [r7, #7]
 800c9b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c9ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c9bc:	79fa      	ldrb	r2, [r7, #7]
 800c9be:	f107 0114 	add.w	r1, r7, #20
 800c9c2:	f107 0308 	add.w	r3, r7, #8
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff fce6 	bl	800c398 <find_volume>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800c9d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	f040 819b 	bne.w	800cd12 <f_open+0x376>
		dj.obj.fs = fs;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	f107 0318 	add.w	r3, r7, #24
 800c9e6:	4611      	mov	r1, r2
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7ff fbc5 	bl	800c178 <follow_path>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c9f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d118      	bne.n	800ca2e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c9fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800ca00:	b25b      	sxtb	r3, r3
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	da03      	bge.n	800ca0e <f_open+0x72>
				res = FR_INVALID_NAME;
 800ca06:	2306      	movs	r3, #6
 800ca08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ca0c:	e00f      	b.n	800ca2e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	2b01      	cmp	r3, #1
 800ca12:	bf8c      	ite	hi
 800ca14:	2301      	movhi	r3, #1
 800ca16:	2300      	movls	r3, #0
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f107 0318 	add.w	r3, r7, #24
 800ca20:	4611      	mov	r1, r2
 800ca22:	4618      	mov	r0, r3
 800ca24:	f7fd ff3c 	bl	800a8a0 <chk_lock>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ca2e:	79fb      	ldrb	r3, [r7, #7]
 800ca30:	f003 031c 	and.w	r3, r3, #28
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d07f      	beq.n	800cb38 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ca38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d017      	beq.n	800ca70 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ca44:	2b04      	cmp	r3, #4
 800ca46:	d10e      	bne.n	800ca66 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca48:	f7fd ff86 	bl	800a958 <enq_lock>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d006      	beq.n	800ca60 <f_open+0xc4>
 800ca52:	f107 0318 	add.w	r3, r7, #24
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7ff f8de 	bl	800bc18 <dir_register>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	e000      	b.n	800ca62 <f_open+0xc6>
 800ca60:	2312      	movs	r3, #18
 800ca62:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ca66:	79fb      	ldrb	r3, [r7, #7]
 800ca68:	f043 0308 	orr.w	r3, r3, #8
 800ca6c:	71fb      	strb	r3, [r7, #7]
 800ca6e:	e010      	b.n	800ca92 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ca70:	7fbb      	ldrb	r3, [r7, #30]
 800ca72:	f003 0311 	and.w	r3, r3, #17
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d003      	beq.n	800ca82 <f_open+0xe6>
					res = FR_DENIED;
 800ca7a:	2307      	movs	r3, #7
 800ca7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ca80:	e007      	b.n	800ca92 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ca82:	79fb      	ldrb	r3, [r7, #7]
 800ca84:	f003 0304 	and.w	r3, r3, #4
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <f_open+0xf6>
 800ca8c:	2308      	movs	r3, #8
 800ca8e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ca92:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d168      	bne.n	800cb6c <f_open+0x1d0>
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	f003 0308 	and.w	r3, r3, #8
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d063      	beq.n	800cb6c <f_open+0x1d0>
				dw = GET_FATTIME();
 800caa4:	f7fd fcfc 	bl	800a4a0 <get_fattime>
 800caa8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800caaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caac:	330e      	adds	r3, #14
 800caae:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7fd fe4a 	bl	800a74a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cab8:	3316      	adds	r3, #22
 800caba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7fd fe44 	bl	800a74a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac4:	330b      	adds	r3, #11
 800cac6:	2220      	movs	r2, #32
 800cac8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cace:	4611      	mov	r1, r2
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fe fe1a 	bl	800b70a <ld_clust>
 800cad6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cadc:	2200      	movs	r2, #0
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe fe32 	bl	800b748 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cae6:	331c      	adds	r3, #28
 800cae8:	2100      	movs	r1, #0
 800caea:	4618      	mov	r0, r3
 800caec:	f7fd fe2d 	bl	800a74a <st_dword>
					fs->wflag = 1;
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	2201      	movs	r2, #1
 800caf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800caf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d037      	beq.n	800cb6c <f_open+0x1d0>
						dw = fs->winsect;
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb00:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800cb02:	f107 0318 	add.w	r3, r7, #24
 800cb06:	2200      	movs	r2, #0
 800cb08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fe fb22 	bl	800b154 <remove_chain>
 800cb10:	4603      	mov	r3, r0
 800cb12:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800cb16:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d126      	bne.n	800cb6c <f_open+0x1d0>
							res = move_window(fs, dw);
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cb22:	4618      	mov	r0, r3
 800cb24:	f7fe f86c 	bl	800ac00 <move_window>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cb32:	3a01      	subs	r2, #1
 800cb34:	615a      	str	r2, [r3, #20]
 800cb36:	e019      	b.n	800cb6c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d115      	bne.n	800cb6c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb40:	7fbb      	ldrb	r3, [r7, #30]
 800cb42:	f003 0310 	and.w	r3, r3, #16
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d003      	beq.n	800cb52 <f_open+0x1b6>
					res = FR_NO_FILE;
 800cb4a:	2304      	movs	r3, #4
 800cb4c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800cb50:	e00c      	b.n	800cb6c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cb52:	79fb      	ldrb	r3, [r7, #7]
 800cb54:	f003 0302 	and.w	r3, r3, #2
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d007      	beq.n	800cb6c <f_open+0x1d0>
 800cb5c:	7fbb      	ldrb	r3, [r7, #30]
 800cb5e:	f003 0301 	and.w	r3, r3, #1
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d002      	beq.n	800cb6c <f_open+0x1d0>
						res = FR_DENIED;
 800cb66:	2307      	movs	r3, #7
 800cb68:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800cb6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d126      	bne.n	800cbc2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cb74:	79fb      	ldrb	r3, [r7, #7]
 800cb76:	f003 0308 	and.w	r3, r3, #8
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d003      	beq.n	800cb86 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cb7e:	79fb      	ldrb	r3, [r7, #7]
 800cb80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cb86:	697b      	ldr	r3, [r7, #20]
 800cb88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cb8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb94:	79fb      	ldrb	r3, [r7, #7]
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	bf8c      	ite	hi
 800cb9a:	2301      	movhi	r3, #1
 800cb9c:	2300      	movls	r3, #0
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	461a      	mov	r2, r3
 800cba2:	f107 0318 	add.w	r3, r7, #24
 800cba6:	4611      	mov	r1, r2
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fd fef7 	bl	800a99c <inc_lock>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d102      	bne.n	800cbc2 <f_open+0x226>
 800cbbc:	2302      	movs	r3, #2
 800cbbe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cbc2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	f040 80a3 	bne.w	800cd12 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cbd0:	4611      	mov	r1, r2
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe fd99 	bl	800b70a <ld_clust>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe0:	331c      	adds	r3, #28
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f7fd fd73 	bl	800a6ce <ld_dword>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cbf4:	697a      	ldr	r2, [r7, #20]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	88da      	ldrh	r2, [r3, #6]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	79fa      	ldrb	r2, [r7, #7]
 800cc06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2200      	movs	r2, #0
 800cc18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	3330      	adds	r3, #48	@ 0x30
 800cc1e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cc22:	2100      	movs	r1, #0
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fd fddd 	bl	800a7e4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cc2a:	79fb      	ldrb	r3, [r7, #7]
 800cc2c:	f003 0320 	and.w	r3, r3, #32
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d06e      	beq.n	800cd12 <f_open+0x376>
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d06a      	beq.n	800cd12 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	68da      	ldr	r2, [r3, #12]
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	895b      	ldrh	r3, [r3, #10]
 800cc48:	461a      	mov	r2, r3
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	899b      	ldrh	r3, [r3, #12]
 800cc4e:	fb02 f303 	mul.w	r3, r2, r3
 800cc52:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	68db      	ldr	r3, [r3, #12]
 800cc5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc60:	e016      	b.n	800cc90 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7fe f887 	bl	800ad7a <get_fat>
 800cc6c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800cc6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc70:	2b01      	cmp	r3, #1
 800cc72:	d802      	bhi.n	800cc7a <f_open+0x2de>
 800cc74:	2302      	movs	r3, #2
 800cc76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cc7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc80:	d102      	bne.n	800cc88 <f_open+0x2ec>
 800cc82:	2301      	movs	r3, #1
 800cc84:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc8c:	1ad3      	subs	r3, r2, r3
 800cc8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d103      	bne.n	800cca0 <f_open+0x304>
 800cc98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d8e0      	bhi.n	800cc62 <f_open+0x2c6>
				}
				fp->clust = clst;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cca4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cca6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d131      	bne.n	800cd12 <f_open+0x376>
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	899b      	ldrh	r3, [r3, #12]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ccb6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ccba:	fb01 f202 	mul.w	r2, r1, r2
 800ccbe:	1a9b      	subs	r3, r3, r2
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d026      	beq.n	800cd12 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fe f837 	bl	800ad3c <clust2sect>
 800ccce:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800ccd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d103      	bne.n	800ccde <f_open+0x342>
						res = FR_INT_ERR;
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ccdc:	e019      	b.n	800cd12 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ccde:	697b      	ldr	r3, [r7, #20]
 800cce0:	899b      	ldrh	r3, [r3, #12]
 800cce2:	461a      	mov	r2, r3
 800cce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cce6:	fbb3 f2f2 	udiv	r2, r3, r2
 800ccea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccec:	441a      	add	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	7858      	ldrb	r0, [r3, #1]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6a1a      	ldr	r2, [r3, #32]
 800cd00:	2301      	movs	r3, #1
 800cd02:	f7fd fc6d 	bl	800a5e0 <disk_read>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d002      	beq.n	800cd12 <f_open+0x376>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800cd12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d002      	beq.n	800cd20 <f_open+0x384>
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cd20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3768      	adds	r7, #104	@ 0x68
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08e      	sub	sp, #56	@ 0x38
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
 800cd38:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	2200      	movs	r2, #0
 800cd42:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	f107 0214 	add.w	r2, r7, #20
 800cd4a:	4611      	mov	r1, r2
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f7ff fda9 	bl	800c8a4 <validate>
 800cd52:	4603      	mov	r3, r0
 800cd54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d107      	bne.n	800cd70 <f_read+0x44>
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	7d5b      	ldrb	r3, [r3, #21]
 800cd64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd68:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d002      	beq.n	800cd76 <f_read+0x4a>
 800cd70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd74:	e135      	b.n	800cfe2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	7d1b      	ldrb	r3, [r3, #20]
 800cd7a:	f003 0301 	and.w	r3, r3, #1
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <f_read+0x5a>
 800cd82:	2307      	movs	r3, #7
 800cd84:	e12d      	b.n	800cfe2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	68da      	ldr	r2, [r3, #12]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	699b      	ldr	r3, [r3, #24]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	6a3b      	ldr	r3, [r7, #32]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	f240 811e 	bls.w	800cfd8 <f_read+0x2ac>
 800cd9c:	6a3b      	ldr	r3, [r7, #32]
 800cd9e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cda0:	e11a      	b.n	800cfd8 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	697a      	ldr	r2, [r7, #20]
 800cda8:	8992      	ldrh	r2, [r2, #12]
 800cdaa:	fbb3 f1f2 	udiv	r1, r3, r2
 800cdae:	fb01 f202 	mul.w	r2, r1, r2
 800cdb2:	1a9b      	subs	r3, r3, r2
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f040 80d5 	bne.w	800cf64 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	699b      	ldr	r3, [r3, #24]
 800cdbe:	697a      	ldr	r2, [r7, #20]
 800cdc0:	8992      	ldrh	r2, [r2, #12]
 800cdc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdc6:	697a      	ldr	r2, [r7, #20]
 800cdc8:	8952      	ldrh	r2, [r2, #10]
 800cdca:	3a01      	subs	r2, #1
 800cdcc:	4013      	ands	r3, r2
 800cdce:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d12f      	bne.n	800ce36 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	699b      	ldr	r3, [r3, #24]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d103      	bne.n	800cde6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	689b      	ldr	r3, [r3, #8]
 800cde2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cde4:	e013      	b.n	800ce0e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d007      	beq.n	800cdfe <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	699b      	ldr	r3, [r3, #24]
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f7fe faaa 	bl	800b34e <clmt_clust>
 800cdfa:	6338      	str	r0, [r7, #48]	@ 0x30
 800cdfc:	e007      	b.n	800ce0e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cdfe:	68fa      	ldr	r2, [r7, #12]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	69db      	ldr	r3, [r3, #28]
 800ce04:	4619      	mov	r1, r3
 800ce06:	4610      	mov	r0, r2
 800ce08:	f7fd ffb7 	bl	800ad7a <get_fat>
 800ce0c:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	d804      	bhi.n	800ce1e <f_read+0xf2>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	2202      	movs	r2, #2
 800ce18:	755a      	strb	r2, [r3, #21]
 800ce1a:	2302      	movs	r3, #2
 800ce1c:	e0e1      	b.n	800cfe2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ce1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce24:	d104      	bne.n	800ce30 <f_read+0x104>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	755a      	strb	r2, [r3, #21]
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e0d8      	b.n	800cfe2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce34:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	69db      	ldr	r3, [r3, #28]
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4610      	mov	r0, r2
 800ce40:	f7fd ff7c 	bl	800ad3c <clust2sect>
 800ce44:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d104      	bne.n	800ce56 <f_read+0x12a>
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2202      	movs	r2, #2
 800ce50:	755a      	strb	r2, [r3, #21]
 800ce52:	2302      	movs	r3, #2
 800ce54:	e0c5      	b.n	800cfe2 <f_read+0x2b6>
			sect += csect;
 800ce56:	69ba      	ldr	r2, [r7, #24]
 800ce58:	69fb      	ldr	r3, [r7, #28]
 800ce5a:	4413      	add	r3, r2
 800ce5c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	899b      	ldrh	r3, [r3, #12]
 800ce62:	461a      	mov	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce6a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ce6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d041      	beq.n	800cef6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ce72:	69fa      	ldr	r2, [r7, #28]
 800ce74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce76:	4413      	add	r3, r2
 800ce78:	697a      	ldr	r2, [r7, #20]
 800ce7a:	8952      	ldrh	r2, [r2, #10]
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d905      	bls.n	800ce8c <f_read+0x160>
					cc = fs->csize - csect;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	895b      	ldrh	r3, [r3, #10]
 800ce84:	461a      	mov	r2, r3
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	1ad3      	subs	r3, r2, r3
 800ce8a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	7858      	ldrb	r0, [r3, #1]
 800ce90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce92:	69ba      	ldr	r2, [r7, #24]
 800ce94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce96:	f7fd fba3 	bl	800a5e0 <disk_read>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d004      	beq.n	800ceaa <f_read+0x17e>
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	2201      	movs	r2, #1
 800cea4:	755a      	strb	r2, [r3, #21]
 800cea6:	2301      	movs	r3, #1
 800cea8:	e09b      	b.n	800cfe2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	7d1b      	ldrb	r3, [r3, #20]
 800ceae:	b25b      	sxtb	r3, r3
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	da18      	bge.n	800cee6 <f_read+0x1ba>
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6a1a      	ldr	r2, [r3, #32]
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	1ad3      	subs	r3, r2, r3
 800cebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d911      	bls.n	800cee6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	6a1a      	ldr	r2, [r3, #32]
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	697a      	ldr	r2, [r7, #20]
 800cecc:	8992      	ldrh	r2, [r2, #12]
 800cece:	fb02 f303 	mul.w	r3, r2, r3
 800ced2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ced4:	18d0      	adds	r0, r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	899b      	ldrh	r3, [r3, #12]
 800cee0:	461a      	mov	r2, r3
 800cee2:	f7fd fc5e 	bl	800a7a2 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	899b      	ldrh	r3, [r3, #12]
 800ceea:	461a      	mov	r2, r3
 800ceec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceee:	fb02 f303 	mul.w	r3, r2, r3
 800cef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800cef4:	e05c      	b.n	800cfb0 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	6a1b      	ldr	r3, [r3, #32]
 800cefa:	69ba      	ldr	r2, [r7, #24]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d02e      	beq.n	800cf5e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	7d1b      	ldrb	r3, [r3, #20]
 800cf04:	b25b      	sxtb	r3, r3
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	da18      	bge.n	800cf3c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	7858      	ldrb	r0, [r3, #1]
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6a1a      	ldr	r2, [r3, #32]
 800cf18:	2301      	movs	r3, #1
 800cf1a:	f7fd fb81 	bl	800a620 <disk_write>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d004      	beq.n	800cf2e <f_read+0x202>
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2201      	movs	r2, #1
 800cf28:	755a      	strb	r2, [r3, #21]
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	e059      	b.n	800cfe2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	7d1b      	ldrb	r3, [r3, #20]
 800cf32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	7858      	ldrb	r0, [r3, #1]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf46:	2301      	movs	r3, #1
 800cf48:	69ba      	ldr	r2, [r7, #24]
 800cf4a:	f7fd fb49 	bl	800a5e0 <disk_read>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d004      	beq.n	800cf5e <f_read+0x232>
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2201      	movs	r2, #1
 800cf58:	755a      	strb	r2, [r3, #21]
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	e041      	b.n	800cfe2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	69ba      	ldr	r2, [r7, #24]
 800cf62:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	899b      	ldrh	r3, [r3, #12]
 800cf68:	4618      	mov	r0, r3
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	699b      	ldr	r3, [r3, #24]
 800cf6e:	697a      	ldr	r2, [r7, #20]
 800cf70:	8992      	ldrh	r2, [r2, #12]
 800cf72:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf76:	fb01 f202 	mul.w	r2, r1, r2
 800cf7a:	1a9b      	subs	r3, r3, r2
 800cf7c:	1ac3      	subs	r3, r0, r3
 800cf7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cf80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d901      	bls.n	800cf8c <f_read+0x260>
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	699b      	ldr	r3, [r3, #24]
 800cf96:	697a      	ldr	r2, [r7, #20]
 800cf98:	8992      	ldrh	r2, [r2, #12]
 800cf9a:	fbb3 f0f2 	udiv	r0, r3, r2
 800cf9e:	fb00 f202 	mul.w	r2, r0, r2
 800cfa2:	1a9b      	subs	r3, r3, r2
 800cfa4:	440b      	add	r3, r1
 800cfa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cfac:	f7fd fbf9 	bl	800a7a2 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cfb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfb4:	4413      	add	r3, r2
 800cfb6:	627b      	str	r3, [r7, #36]	@ 0x24
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	699a      	ldr	r2, [r3, #24]
 800cfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfbe:	441a      	add	r2, r3
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	619a      	str	r2, [r3, #24]
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	681a      	ldr	r2, [r3, #0]
 800cfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfca:	441a      	add	r2, r3
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	601a      	str	r2, [r3, #0]
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd4:	1ad3      	subs	r3, r2, r3
 800cfd6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	f47f aee1 	bne.w	800cda2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cfe0:	2300      	movs	r3, #0
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3738      	adds	r7, #56	@ 0x38
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b08c      	sub	sp, #48	@ 0x30
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	60f8      	str	r0, [r7, #12]
 800cff2:	60b9      	str	r1, [r7, #8]
 800cff4:	607a      	str	r2, [r7, #4]
 800cff6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	2200      	movs	r2, #0
 800d000:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f107 0210 	add.w	r2, r7, #16
 800d008:	4611      	mov	r1, r2
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7ff fc4a 	bl	800c8a4 <validate>
 800d010:	4603      	mov	r3, r0
 800d012:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d016:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d107      	bne.n	800d02e <f_write+0x44>
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	7d5b      	ldrb	r3, [r3, #21]
 800d022:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800d026:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d002      	beq.n	800d034 <f_write+0x4a>
 800d02e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d032:	e16a      	b.n	800d30a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	7d1b      	ldrb	r3, [r3, #20]
 800d038:	f003 0302 	and.w	r3, r3, #2
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d101      	bne.n	800d044 <f_write+0x5a>
 800d040:	2307      	movs	r3, #7
 800d042:	e162      	b.n	800d30a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	699a      	ldr	r2, [r3, #24]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	441a      	add	r2, r3
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	429a      	cmp	r2, r3
 800d052:	f080 814c 	bcs.w	800d2ee <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	43db      	mvns	r3, r3
 800d05c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d05e:	e146      	b.n	800d2ee <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	693a      	ldr	r2, [r7, #16]
 800d066:	8992      	ldrh	r2, [r2, #12]
 800d068:	fbb3 f1f2 	udiv	r1, r3, r2
 800d06c:	fb01 f202 	mul.w	r2, r1, r2
 800d070:	1a9b      	subs	r3, r3, r2
 800d072:	2b00      	cmp	r3, #0
 800d074:	f040 80f1 	bne.w	800d25a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	693a      	ldr	r2, [r7, #16]
 800d07e:	8992      	ldrh	r2, [r2, #12]
 800d080:	fbb3 f3f2 	udiv	r3, r3, r2
 800d084:	693a      	ldr	r2, [r7, #16]
 800d086:	8952      	ldrh	r2, [r2, #10]
 800d088:	3a01      	subs	r2, #1
 800d08a:	4013      	ands	r3, r2
 800d08c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d143      	bne.n	800d11c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d10c      	bne.n	800d0b6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d11a      	bne.n	800d0de <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7fe f8b6 	bl	800b21e <create_chain>
 800d0b2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d0b4:	e013      	b.n	800d0de <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d007      	beq.n	800d0ce <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	699b      	ldr	r3, [r3, #24]
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f7fe f942 	bl	800b34e <clmt_clust>
 800d0ca:	62b8      	str	r0, [r7, #40]	@ 0x28
 800d0cc:	e007      	b.n	800d0de <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	69db      	ldr	r3, [r3, #28]
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	4610      	mov	r0, r2
 800d0d8:	f7fe f8a1 	bl	800b21e <create_chain>
 800d0dc:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	f000 8109 	beq.w	800d2f8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d104      	bne.n	800d0f6 <f_write+0x10c>
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	2202      	movs	r2, #2
 800d0f0:	755a      	strb	r2, [r3, #21]
 800d0f2:	2302      	movs	r3, #2
 800d0f4:	e109      	b.n	800d30a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d0f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0fc:	d104      	bne.n	800d108 <f_write+0x11e>
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2201      	movs	r2, #1
 800d102:	755a      	strb	r2, [r3, #21]
 800d104:	2301      	movs	r3, #1
 800d106:	e100      	b.n	800d30a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d10c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d102      	bne.n	800d11c <f_write+0x132>
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d11a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	7d1b      	ldrb	r3, [r3, #20]
 800d120:	b25b      	sxtb	r3, r3
 800d122:	2b00      	cmp	r3, #0
 800d124:	da18      	bge.n	800d158 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	7858      	ldrb	r0, [r3, #1]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6a1a      	ldr	r2, [r3, #32]
 800d134:	2301      	movs	r3, #1
 800d136:	f7fd fa73 	bl	800a620 <disk_write>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d004      	beq.n	800d14a <f_write+0x160>
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	2201      	movs	r2, #1
 800d144:	755a      	strb	r2, [r3, #21]
 800d146:	2301      	movs	r3, #1
 800d148:	e0df      	b.n	800d30a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	7d1b      	ldrb	r3, [r3, #20]
 800d14e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d152:	b2da      	uxtb	r2, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d158:	693a      	ldr	r2, [r7, #16]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	69db      	ldr	r3, [r3, #28]
 800d15e:	4619      	mov	r1, r3
 800d160:	4610      	mov	r0, r2
 800d162:	f7fd fdeb 	bl	800ad3c <clust2sect>
 800d166:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d104      	bne.n	800d178 <f_write+0x18e>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2202      	movs	r2, #2
 800d172:	755a      	strb	r2, [r3, #21]
 800d174:	2302      	movs	r3, #2
 800d176:	e0c8      	b.n	800d30a <f_write+0x320>
			sect += csect;
 800d178:	697a      	ldr	r2, [r7, #20]
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	4413      	add	r3, r2
 800d17e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	899b      	ldrh	r3, [r3, #12]
 800d184:	461a      	mov	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	fbb3 f3f2 	udiv	r3, r3, r2
 800d18c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d18e:	6a3b      	ldr	r3, [r7, #32]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d043      	beq.n	800d21c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d194:	69ba      	ldr	r2, [r7, #24]
 800d196:	6a3b      	ldr	r3, [r7, #32]
 800d198:	4413      	add	r3, r2
 800d19a:	693a      	ldr	r2, [r7, #16]
 800d19c:	8952      	ldrh	r2, [r2, #10]
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d905      	bls.n	800d1ae <f_write+0x1c4>
					cc = fs->csize - csect;
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	895b      	ldrh	r3, [r3, #10]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	1ad3      	subs	r3, r2, r3
 800d1ac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	7858      	ldrb	r0, [r3, #1]
 800d1b2:	6a3b      	ldr	r3, [r7, #32]
 800d1b4:	697a      	ldr	r2, [r7, #20]
 800d1b6:	69f9      	ldr	r1, [r7, #28]
 800d1b8:	f7fd fa32 	bl	800a620 <disk_write>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d004      	beq.n	800d1cc <f_write+0x1e2>
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	755a      	strb	r2, [r3, #21]
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e09e      	b.n	800d30a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	6a1a      	ldr	r2, [r3, #32]
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	1ad3      	subs	r3, r2, r3
 800d1d4:	6a3a      	ldr	r2, [r7, #32]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	d918      	bls.n	800d20c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6a1a      	ldr	r2, [r3, #32]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	693a      	ldr	r2, [r7, #16]
 800d1ea:	8992      	ldrh	r2, [r2, #12]
 800d1ec:	fb02 f303 	mul.w	r3, r2, r3
 800d1f0:	69fa      	ldr	r2, [r7, #28]
 800d1f2:	18d1      	adds	r1, r2, r3
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	899b      	ldrh	r3, [r3, #12]
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	f7fd fad2 	bl	800a7a2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	7d1b      	ldrb	r3, [r3, #20]
 800d202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d206:	b2da      	uxtb	r2, r3
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	899b      	ldrh	r3, [r3, #12]
 800d210:	461a      	mov	r2, r3
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	fb02 f303 	mul.w	r3, r2, r3
 800d218:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800d21a:	e04b      	b.n	800d2b4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	697a      	ldr	r2, [r7, #20]
 800d222:	429a      	cmp	r2, r3
 800d224:	d016      	beq.n	800d254 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	699a      	ldr	r2, [r3, #24]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d22e:	429a      	cmp	r2, r3
 800d230:	d210      	bcs.n	800d254 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d232:	693b      	ldr	r3, [r7, #16]
 800d234:	7858      	ldrb	r0, [r3, #1]
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d23c:	2301      	movs	r3, #1
 800d23e:	697a      	ldr	r2, [r7, #20]
 800d240:	f7fd f9ce 	bl	800a5e0 <disk_read>
 800d244:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d246:	2b00      	cmp	r3, #0
 800d248:	d004      	beq.n	800d254 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2201      	movs	r2, #1
 800d24e:	755a      	strb	r2, [r3, #21]
 800d250:	2301      	movs	r3, #1
 800d252:	e05a      	b.n	800d30a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	697a      	ldr	r2, [r7, #20]
 800d258:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	899b      	ldrh	r3, [r3, #12]
 800d25e:	4618      	mov	r0, r3
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	693a      	ldr	r2, [r7, #16]
 800d266:	8992      	ldrh	r2, [r2, #12]
 800d268:	fbb3 f1f2 	udiv	r1, r3, r2
 800d26c:	fb01 f202 	mul.w	r2, r1, r2
 800d270:	1a9b      	subs	r3, r3, r2
 800d272:	1ac3      	subs	r3, r0, r3
 800d274:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d901      	bls.n	800d282 <f_write+0x298>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	699b      	ldr	r3, [r3, #24]
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	8992      	ldrh	r2, [r2, #12]
 800d290:	fbb3 f0f2 	udiv	r0, r3, r2
 800d294:	fb00 f202 	mul.w	r2, r0, r2
 800d298:	1a9b      	subs	r3, r3, r2
 800d29a:	440b      	add	r3, r1
 800d29c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d29e:	69f9      	ldr	r1, [r7, #28]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fd fa7e 	bl	800a7a2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	7d1b      	ldrb	r3, [r3, #20]
 800d2aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d2ae:	b2da      	uxtb	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d2b4:	69fa      	ldr	r2, [r7, #28]
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b8:	4413      	add	r3, r2
 800d2ba:	61fb      	str	r3, [r7, #28]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	699a      	ldr	r2, [r3, #24]
 800d2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c2:	441a      	add	r2, r3
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	619a      	str	r2, [r3, #24]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	68da      	ldr	r2, [r3, #12]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	bf38      	it	cc
 800d2d4:	461a      	movcc	r2, r3
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	60da      	str	r2, [r3, #12]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	681a      	ldr	r2, [r3, #0]
 800d2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e0:	441a      	add	r2, r3
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	687a      	ldr	r2, [r7, #4]
 800d2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f47f aeb5 	bne.w	800d060 <f_write+0x76>
 800d2f6:	e000      	b.n	800d2fa <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d2f8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	7d1b      	ldrb	r3, [r3, #20]
 800d2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d302:	b2da      	uxtb	r2, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3730      	adds	r7, #48	@ 0x30
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b086      	sub	sp, #24
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f107 0208 	add.w	r2, r7, #8
 800d320:	4611      	mov	r1, r2
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff fabe 	bl	800c8a4 <validate>
 800d328:	4603      	mov	r3, r0
 800d32a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d32c:	7dfb      	ldrb	r3, [r7, #23]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d168      	bne.n	800d404 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	7d1b      	ldrb	r3, [r3, #20]
 800d336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d062      	beq.n	800d404 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	7d1b      	ldrb	r3, [r3, #20]
 800d342:	b25b      	sxtb	r3, r3
 800d344:	2b00      	cmp	r3, #0
 800d346:	da15      	bge.n	800d374 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	7858      	ldrb	r0, [r3, #1]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a1a      	ldr	r2, [r3, #32]
 800d356:	2301      	movs	r3, #1
 800d358:	f7fd f962 	bl	800a620 <disk_write>
 800d35c:	4603      	mov	r3, r0
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d001      	beq.n	800d366 <f_sync+0x54>
 800d362:	2301      	movs	r3, #1
 800d364:	e04f      	b.n	800d406 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	7d1b      	ldrb	r3, [r3, #20]
 800d36a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d374:	f7fd f894 	bl	800a4a0 <get_fattime>
 800d378:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d37a:	68ba      	ldr	r2, [r7, #8]
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d380:	4619      	mov	r1, r3
 800d382:	4610      	mov	r0, r2
 800d384:	f7fd fc3c 	bl	800ac00 <move_window>
 800d388:	4603      	mov	r3, r0
 800d38a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d38c:	7dfb      	ldrb	r3, [r7, #23]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d138      	bne.n	800d404 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d396:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	330b      	adds	r3, #11
 800d39c:	781a      	ldrb	r2, [r3, #0]
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	330b      	adds	r3, #11
 800d3a2:	f042 0220 	orr.w	r2, r2, #32
 800d3a6:	b2d2      	uxtb	r2, r2
 800d3a8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	6818      	ldr	r0, [r3, #0]
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	68f9      	ldr	r1, [r7, #12]
 800d3b6:	f7fe f9c7 	bl	800b748 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f103 021c 	add.w	r2, r3, #28
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	f7fd f9bf 	bl	800a74a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	3316      	adds	r3, #22
 800d3d0:	6939      	ldr	r1, [r7, #16]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fd f9b9 	bl	800a74a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	3312      	adds	r3, #18
 800d3dc:	2100      	movs	r1, #0
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f7fd f998 	bl	800a714 <st_word>
					fs->wflag = 1;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fd fc35 	bl	800ac5c <sync_fs>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	7d1b      	ldrb	r3, [r3, #20]
 800d3fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3fe:	b2da      	uxtb	r2, r3
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d404:	7dfb      	ldrb	r3, [r7, #23]
}
 800d406:	4618      	mov	r0, r3
 800d408:	3718      	adds	r7, #24
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d40e:	b580      	push	{r7, lr}
 800d410:	b084      	sub	sp, #16
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f7ff ff7b 	bl	800d312 <f_sync>
 800d41c:	4603      	mov	r3, r0
 800d41e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d420:	7bfb      	ldrb	r3, [r7, #15]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d118      	bne.n	800d458 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f107 0208 	add.w	r2, r7, #8
 800d42c:	4611      	mov	r1, r2
 800d42e:	4618      	mov	r0, r3
 800d430:	f7ff fa38 	bl	800c8a4 <validate>
 800d434:	4603      	mov	r3, r0
 800d436:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d438:	7bfb      	ldrb	r3, [r7, #15]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10c      	bne.n	800d458 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	4618      	mov	r0, r3
 800d444:	f7fd fb38 	bl	800aab8 <dec_lock>
 800d448:	4603      	mov	r3, r0
 800d44a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d44c:	7bfb      	ldrb	r3, [r7, #15]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d102      	bne.n	800d458 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d458:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd80      	pop	{r7, pc}

0800d462 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d462:	b580      	push	{r7, lr}
 800d464:	b090      	sub	sp, #64	@ 0x40
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f107 0208 	add.w	r2, r7, #8
 800d472:	4611      	mov	r1, r2
 800d474:	4618      	mov	r0, r3
 800d476:	f7ff fa15 	bl	800c8a4 <validate>
 800d47a:	4603      	mov	r3, r0
 800d47c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d480:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d484:	2b00      	cmp	r3, #0
 800d486:	d103      	bne.n	800d490 <f_lseek+0x2e>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7d5b      	ldrb	r3, [r3, #21]
 800d48c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d490:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d494:	2b00      	cmp	r3, #0
 800d496:	d002      	beq.n	800d49e <f_lseek+0x3c>
 800d498:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800d49c:	e201      	b.n	800d8a2 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f000 80d9 	beq.w	800d65a <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4ae:	d15a      	bne.n	800d566 <f_lseek+0x104>
			tbl = fp->cltbl;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4b4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4b8:	1d1a      	adds	r2, r3, #4
 800d4ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	617b      	str	r3, [r7, #20]
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 800d4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d03a      	beq.n	800d546 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d4d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4d2:	613b      	str	r3, [r7, #16]
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d4d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d4da:	3302      	adds	r3, #2
 800d4dc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 800d4de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4e0:	60fb      	str	r3, [r7, #12]
 800d4e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e4:	3301      	adds	r3, #1
 800d4e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fd fc44 	bl	800ad7a <get_fat>
 800d4f2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	d804      	bhi.n	800d504 <f_lseek+0xa2>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2202      	movs	r2, #2
 800d4fe:	755a      	strb	r2, [r3, #21]
 800d500:	2302      	movs	r3, #2
 800d502:	e1ce      	b.n	800d8a2 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50a:	d104      	bne.n	800d516 <f_lseek+0xb4>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2201      	movs	r2, #1
 800d510:	755a      	strb	r2, [r3, #21]
 800d512:	2301      	movs	r3, #1
 800d514:	e1c5      	b.n	800d8a2 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	3301      	adds	r3, #1
 800d51a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d0de      	beq.n	800d4de <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	429a      	cmp	r2, r3
 800d526:	d809      	bhi.n	800d53c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d52a:	1d1a      	adds	r2, r3, #4
 800d52c:	627a      	str	r2, [r7, #36]	@ 0x24
 800d52e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d534:	1d1a      	adds	r2, r3, #4
 800d536:	627a      	str	r2, [r7, #36]	@ 0x24
 800d538:	693a      	ldr	r2, [r7, #16]
 800d53a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	69db      	ldr	r3, [r3, #28]
 800d540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d542:	429a      	cmp	r2, r3
 800d544:	d3c4      	bcc.n	800d4d0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d54a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d54c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d54e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	429a      	cmp	r2, r3
 800d554:	d803      	bhi.n	800d55e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d558:	2200      	movs	r2, #0
 800d55a:	601a      	str	r2, [r3, #0]
 800d55c:	e19f      	b.n	800d89e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d55e:	2311      	movs	r3, #17
 800d560:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800d564:	e19b      	b.n	800d89e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	683a      	ldr	r2, [r7, #0]
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d902      	bls.n	800d576 <f_lseek+0x114>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	683a      	ldr	r2, [r7, #0]
 800d57a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	f000 818d 	beq.w	800d89e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	3b01      	subs	r3, #1
 800d588:	4619      	mov	r1, r3
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f7fd fedf 	bl	800b34e <clmt_clust>
 800d590:	4602      	mov	r2, r0
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d596:	68ba      	ldr	r2, [r7, #8]
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	69db      	ldr	r3, [r3, #28]
 800d59c:	4619      	mov	r1, r3
 800d59e:	4610      	mov	r0, r2
 800d5a0:	f7fd fbcc 	bl	800ad3c <clust2sect>
 800d5a4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d104      	bne.n	800d5b6 <f_lseek+0x154>
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2202      	movs	r2, #2
 800d5b0:	755a      	strb	r2, [r3, #21]
 800d5b2:	2302      	movs	r3, #2
 800d5b4:	e175      	b.n	800d8a2 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	68ba      	ldr	r2, [r7, #8]
 800d5bc:	8992      	ldrh	r2, [r2, #12]
 800d5be:	fbb3 f3f2 	udiv	r3, r3, r2
 800d5c2:	68ba      	ldr	r2, [r7, #8]
 800d5c4:	8952      	ldrh	r2, [r2, #10]
 800d5c6:	3a01      	subs	r2, #1
 800d5c8:	4013      	ands	r3, r2
 800d5ca:	69ba      	ldr	r2, [r7, #24]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	699b      	ldr	r3, [r3, #24]
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	8992      	ldrh	r2, [r2, #12]
 800d5d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800d5dc:	fb01 f202 	mul.w	r2, r1, r2
 800d5e0:	1a9b      	subs	r3, r3, r2
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	f000 815b 	beq.w	800d89e <f_lseek+0x43c>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6a1b      	ldr	r3, [r3, #32]
 800d5ec:	69ba      	ldr	r2, [r7, #24]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	f000 8155 	beq.w	800d89e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	7d1b      	ldrb	r3, [r3, #20]
 800d5f8:	b25b      	sxtb	r3, r3
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	da18      	bge.n	800d630 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	7858      	ldrb	r0, [r3, #1]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6a1a      	ldr	r2, [r3, #32]
 800d60c:	2301      	movs	r3, #1
 800d60e:	f7fd f807 	bl	800a620 <disk_write>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d004      	beq.n	800d622 <f_lseek+0x1c0>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	755a      	strb	r2, [r3, #21]
 800d61e:	2301      	movs	r3, #1
 800d620:	e13f      	b.n	800d8a2 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	7d1b      	ldrb	r3, [r3, #20]
 800d626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	7858      	ldrb	r0, [r3, #1]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d63a:	2301      	movs	r3, #1
 800d63c:	69ba      	ldr	r2, [r7, #24]
 800d63e:	f7fc ffcf 	bl	800a5e0 <disk_read>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d004      	beq.n	800d652 <f_lseek+0x1f0>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2201      	movs	r2, #1
 800d64c:	755a      	strb	r2, [r3, #21]
 800d64e:	2301      	movs	r3, #1
 800d650:	e127      	b.n	800d8a2 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	69ba      	ldr	r2, [r7, #24]
 800d656:	621a      	str	r2, [r3, #32]
 800d658:	e121      	b.n	800d89e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68db      	ldr	r3, [r3, #12]
 800d65e:	683a      	ldr	r2, [r7, #0]
 800d660:	429a      	cmp	r2, r3
 800d662:	d908      	bls.n	800d676 <f_lseek+0x214>
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	7d1b      	ldrb	r3, [r3, #20]
 800d668:	f003 0302 	and.w	r3, r3, #2
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d102      	bne.n	800d676 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	68db      	ldr	r3, [r3, #12]
 800d674:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d67c:	2300      	movs	r3, #0
 800d67e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d684:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 80b5 	beq.w	800d7f8 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	895b      	ldrh	r3, [r3, #10]
 800d692:	461a      	mov	r2, r3
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	899b      	ldrh	r3, [r3, #12]
 800d698:	fb02 f303 	mul.w	r3, r2, r3
 800d69c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d69e:	6a3b      	ldr	r3, [r7, #32]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d01b      	beq.n	800d6dc <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	1e5a      	subs	r2, r3, #1
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	fbb2 f2f3 	udiv	r2, r2, r3
 800d6ae:	6a3b      	ldr	r3, [r7, #32]
 800d6b0:	1e59      	subs	r1, r3, #1
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d30f      	bcc.n	800d6dc <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d6bc:	6a3b      	ldr	r3, [r7, #32]
 800d6be:	1e5a      	subs	r2, r3, #1
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	425b      	negs	r3, r3
 800d6c4:	401a      	ands	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	683a      	ldr	r2, [r7, #0]
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	69db      	ldr	r3, [r3, #28]
 800d6d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d6da:	e022      	b.n	800d722 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	689b      	ldr	r3, [r3, #8]
 800d6e0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d119      	bne.n	800d71c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	f7fd fd96 	bl	800b21e <create_chain>
 800d6f2:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f6:	2b01      	cmp	r3, #1
 800d6f8:	d104      	bne.n	800d704 <f_lseek+0x2a2>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2202      	movs	r2, #2
 800d6fe:	755a      	strb	r2, [r3, #21]
 800d700:	2302      	movs	r3, #2
 800d702:	e0ce      	b.n	800d8a2 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d70a:	d104      	bne.n	800d716 <f_lseek+0x2b4>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2201      	movs	r2, #1
 800d710:	755a      	strb	r2, [r3, #21]
 800d712:	2301      	movs	r3, #1
 800d714:	e0c5      	b.n	800d8a2 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d71a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d720:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d724:	2b00      	cmp	r3, #0
 800d726:	d067      	beq.n	800d7f8 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800d728:	e03a      	b.n	800d7a0 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800d72a:	683a      	ldr	r2, [r7, #0]
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	1ad3      	subs	r3, r2, r3
 800d730:	603b      	str	r3, [r7, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	699a      	ldr	r2, [r3, #24]
 800d736:	69fb      	ldr	r3, [r7, #28]
 800d738:	441a      	add	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	7d1b      	ldrb	r3, [r3, #20]
 800d742:	f003 0302 	and.w	r3, r3, #2
 800d746:	2b00      	cmp	r3, #0
 800d748:	d00b      	beq.n	800d762 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fd fd65 	bl	800b21e <create_chain>
 800d754:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d108      	bne.n	800d76e <f_lseek+0x30c>
							ofs = 0; break;
 800d75c:	2300      	movs	r3, #0
 800d75e:	603b      	str	r3, [r7, #0]
 800d760:	e022      	b.n	800d7a8 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d766:	4618      	mov	r0, r3
 800d768:	f7fd fb07 	bl	800ad7a <get_fat>
 800d76c:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d774:	d104      	bne.n	800d780 <f_lseek+0x31e>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2201      	movs	r2, #1
 800d77a:	755a      	strb	r2, [r3, #21]
 800d77c:	2301      	movs	r3, #1
 800d77e:	e090      	b.n	800d8a2 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d782:	2b01      	cmp	r3, #1
 800d784:	d904      	bls.n	800d790 <f_lseek+0x32e>
 800d786:	68bb      	ldr	r3, [r7, #8]
 800d788:	69db      	ldr	r3, [r3, #28]
 800d78a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d304      	bcc.n	800d79a <f_lseek+0x338>
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2202      	movs	r2, #2
 800d794:	755a      	strb	r2, [r3, #21]
 800d796:	2302      	movs	r3, #2
 800d798:	e083      	b.n	800d8a2 <f_lseek+0x440>
					fp->clust = clst;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d79e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d7a0:	683a      	ldr	r2, [r7, #0]
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d8c0      	bhi.n	800d72a <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	699a      	ldr	r2, [r3, #24]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	441a      	add	r2, r3
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	899b      	ldrh	r3, [r3, #12]
 800d7b8:	461a      	mov	r2, r3
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d7c0:	fb01 f202 	mul.w	r2, r1, r2
 800d7c4:	1a9b      	subs	r3, r3, r2
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d016      	beq.n	800d7f8 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7fd fab4 	bl	800ad3c <clust2sect>
 800d7d4:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d104      	bne.n	800d7e6 <f_lseek+0x384>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2202      	movs	r2, #2
 800d7e0:	755a      	strb	r2, [r3, #21]
 800d7e2:	2302      	movs	r3, #2
 800d7e4:	e05d      	b.n	800d8a2 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	899b      	ldrh	r3, [r3, #12]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800d7f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d7f4:	4413      	add	r3, r2
 800d7f6:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	699a      	ldr	r2, [r3, #24]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	68db      	ldr	r3, [r3, #12]
 800d800:	429a      	cmp	r2, r3
 800d802:	d90a      	bls.n	800d81a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	699a      	ldr	r2, [r3, #24]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	7d1b      	ldrb	r3, [r3, #20]
 800d810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d814:	b2da      	uxtb	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	699b      	ldr	r3, [r3, #24]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	8992      	ldrh	r2, [r2, #12]
 800d822:	fbb3 f1f2 	udiv	r1, r3, r2
 800d826:	fb01 f202 	mul.w	r2, r1, r2
 800d82a:	1a9b      	subs	r3, r3, r2
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d036      	beq.n	800d89e <f_lseek+0x43c>
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6a1b      	ldr	r3, [r3, #32]
 800d834:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d836:	429a      	cmp	r2, r3
 800d838:	d031      	beq.n	800d89e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	7d1b      	ldrb	r3, [r3, #20]
 800d83e:	b25b      	sxtb	r3, r3
 800d840:	2b00      	cmp	r3, #0
 800d842:	da18      	bge.n	800d876 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	7858      	ldrb	r0, [r3, #1]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6a1a      	ldr	r2, [r3, #32]
 800d852:	2301      	movs	r3, #1
 800d854:	f7fc fee4 	bl	800a620 <disk_write>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d004      	beq.n	800d868 <f_lseek+0x406>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2201      	movs	r2, #1
 800d862:	755a      	strb	r2, [r3, #21]
 800d864:	2301      	movs	r3, #1
 800d866:	e01c      	b.n	800d8a2 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	7d1b      	ldrb	r3, [r3, #20]
 800d86c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d870:	b2da      	uxtb	r2, r3
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	7858      	ldrb	r0, [r3, #1]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d880:	2301      	movs	r3, #1
 800d882:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d884:	f7fc feac 	bl	800a5e0 <disk_read>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d004      	beq.n	800d898 <f_lseek+0x436>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2201      	movs	r2, #1
 800d892:	755a      	strb	r2, [r3, #21]
 800d894:	2301      	movs	r3, #1
 800d896:	e004      	b.n	800d8a2 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d89c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d89e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	3740      	adds	r7, #64	@ 0x40
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}

0800d8aa <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b088      	sub	sp, #32
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	60f8      	str	r0, [r7, #12]
 800d8b2:	60b9      	str	r1, [r7, #8]
 800d8b4:	607a      	str	r2, [r7, #4]
	int n = 0;
 800d8b6:	2300      	movs	r3, #0
 800d8b8:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d8be:	e01c      	b.n	800d8fa <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800d8c0:	f107 0310 	add.w	r3, r7, #16
 800d8c4:	f107 0114 	add.w	r1, r7, #20
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7ff fa2e 	bl	800cd2c <f_read>
		if (rc != 1) break;
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d117      	bne.n	800d906 <f_gets+0x5c>
		c = s[0];
 800d8d6:	7d3b      	ldrb	r3, [r7, #20]
 800d8d8:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d8da:	7dfb      	ldrb	r3, [r7, #23]
 800d8dc:	2b0d      	cmp	r3, #13
 800d8de:	d00b      	beq.n	800d8f8 <f_gets+0x4e>
		*p++ = c;
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	1c5a      	adds	r2, r3, #1
 800d8e4:	61ba      	str	r2, [r7, #24]
 800d8e6:	7dfa      	ldrb	r2, [r7, #23]
 800d8e8:	701a      	strb	r2, [r3, #0]
		n++;
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800d8f0:	7dfb      	ldrb	r3, [r7, #23]
 800d8f2:	2b0a      	cmp	r3, #10
 800d8f4:	d009      	beq.n	800d90a <f_gets+0x60>
 800d8f6:	e000      	b.n	800d8fa <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800d8f8:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	3b01      	subs	r3, #1
 800d8fe:	69fa      	ldr	r2, [r7, #28]
 800d900:	429a      	cmp	r2, r3
 800d902:	dbdd      	blt.n	800d8c0 <f_gets+0x16>
 800d904:	e002      	b.n	800d90c <f_gets+0x62>
		if (rc != 1) break;
 800d906:	bf00      	nop
 800d908:	e000      	b.n	800d90c <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 800d90a:	bf00      	nop
	}
	*p = 0;
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	2200      	movs	r2, #0
 800d910:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d001      	beq.n	800d91c <f_gets+0x72>
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	e000      	b.n	800d91e <f_gets+0x74>
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3720      	adds	r7, #32
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
	...

0800d928 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d928:	b480      	push	{r7}
 800d92a:	b087      	sub	sp, #28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	4613      	mov	r3, r2
 800d934:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d936:	2301      	movs	r3, #1
 800d938:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d93a:	2300      	movs	r3, #0
 800d93c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d93e:	4b1f      	ldr	r3, [pc, #124]	@ (800d9bc <FATFS_LinkDriverEx+0x94>)
 800d940:	7a5b      	ldrb	r3, [r3, #9]
 800d942:	b2db      	uxtb	r3, r3
 800d944:	2b00      	cmp	r3, #0
 800d946:	d131      	bne.n	800d9ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d948:	4b1c      	ldr	r3, [pc, #112]	@ (800d9bc <FATFS_LinkDriverEx+0x94>)
 800d94a:	7a5b      	ldrb	r3, [r3, #9]
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	461a      	mov	r2, r3
 800d950:	4b1a      	ldr	r3, [pc, #104]	@ (800d9bc <FATFS_LinkDriverEx+0x94>)
 800d952:	2100      	movs	r1, #0
 800d954:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d956:	4b19      	ldr	r3, [pc, #100]	@ (800d9bc <FATFS_LinkDriverEx+0x94>)
 800d958:	7a5b      	ldrb	r3, [r3, #9]
 800d95a:	b2db      	uxtb	r3, r3
 800d95c:	4a17      	ldr	r2, [pc, #92]	@ (800d9bc <FATFS_LinkDriverEx+0x94>)
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	4413      	add	r3, r2
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d966:	4b15      	ldr	r3, [pc, #84]	@ (800d9bc <FATFS_LinkDriverEx+0x94>)
 800d968:	7a5b      	ldrb	r3, [r3, #9]
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	461a      	mov	r2, r3
 800d96e:	4b13      	ldr	r3, [pc, #76]	@ (800d9bc <FATFS_LinkDriverEx+0x94>)
 800d970:	4413      	add	r3, r2
 800d972:	79fa      	ldrb	r2, [r7, #7]
 800d974:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d976:	4b11      	ldr	r3, [pc, #68]	@ (800d9bc <FATFS_LinkDriverEx+0x94>)
 800d978:	7a5b      	ldrb	r3, [r3, #9]
 800d97a:	b2db      	uxtb	r3, r3
 800d97c:	1c5a      	adds	r2, r3, #1
 800d97e:	b2d1      	uxtb	r1, r2
 800d980:	4a0e      	ldr	r2, [pc, #56]	@ (800d9bc <FATFS_LinkDriverEx+0x94>)
 800d982:	7251      	strb	r1, [r2, #9]
 800d984:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d986:	7dbb      	ldrb	r3, [r7, #22]
 800d988:	3330      	adds	r3, #48	@ 0x30
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d990:	68bb      	ldr	r3, [r7, #8]
 800d992:	3301      	adds	r3, #1
 800d994:	223a      	movs	r2, #58	@ 0x3a
 800d996:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	3302      	adds	r3, #2
 800d99c:	222f      	movs	r2, #47	@ 0x2f
 800d99e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	3303      	adds	r3, #3
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d9ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	371c      	adds	r7, #28
 800d9b2:	46bd      	mov	sp, r7
 800d9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	2000695c 	.word	0x2000695c

0800d9c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	6839      	ldr	r1, [r7, #0]
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f7ff ffaa 	bl	800d928 <FATFS_LinkDriverEx>
 800d9d4:	4603      	mov	r3, r0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3708      	adds	r7, #8
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
	...

0800d9e0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	6039      	str	r1, [r7, #0]
 800d9ea:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d9ec:	88fb      	ldrh	r3, [r7, #6]
 800d9ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9f0:	d802      	bhi.n	800d9f8 <ff_convert+0x18>
		c = chr;
 800d9f2:	88fb      	ldrh	r3, [r7, #6]
 800d9f4:	81fb      	strh	r3, [r7, #14]
 800d9f6:	e025      	b.n	800da44 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00b      	beq.n	800da16 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d9fe:	88fb      	ldrh	r3, [r7, #6]
 800da00:	2bff      	cmp	r3, #255	@ 0xff
 800da02:	d805      	bhi.n	800da10 <ff_convert+0x30>
 800da04:	88fb      	ldrh	r3, [r7, #6]
 800da06:	3b80      	subs	r3, #128	@ 0x80
 800da08:	4a12      	ldr	r2, [pc, #72]	@ (800da54 <ff_convert+0x74>)
 800da0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da0e:	e000      	b.n	800da12 <ff_convert+0x32>
 800da10:	2300      	movs	r3, #0
 800da12:	81fb      	strh	r3, [r7, #14]
 800da14:	e016      	b.n	800da44 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800da16:	2300      	movs	r3, #0
 800da18:	81fb      	strh	r3, [r7, #14]
 800da1a:	e009      	b.n	800da30 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800da1c:	89fb      	ldrh	r3, [r7, #14]
 800da1e:	4a0d      	ldr	r2, [pc, #52]	@ (800da54 <ff_convert+0x74>)
 800da20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da24:	88fa      	ldrh	r2, [r7, #6]
 800da26:	429a      	cmp	r2, r3
 800da28:	d006      	beq.n	800da38 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800da2a:	89fb      	ldrh	r3, [r7, #14]
 800da2c:	3301      	adds	r3, #1
 800da2e:	81fb      	strh	r3, [r7, #14]
 800da30:	89fb      	ldrh	r3, [r7, #14]
 800da32:	2b7f      	cmp	r3, #127	@ 0x7f
 800da34:	d9f2      	bls.n	800da1c <ff_convert+0x3c>
 800da36:	e000      	b.n	800da3a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800da38:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800da3a:	89fb      	ldrh	r3, [r7, #14]
 800da3c:	3380      	adds	r3, #128	@ 0x80
 800da3e:	b29b      	uxth	r3, r3
 800da40:	b2db      	uxtb	r3, r3
 800da42:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800da44:	89fb      	ldrh	r3, [r7, #14]
}
 800da46:	4618      	mov	r0, r3
 800da48:	3714      	adds	r7, #20
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr
 800da52:	bf00      	nop
 800da54:	0804a660 	.word	0x0804a660

0800da58 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800da58:	b480      	push	{r7}
 800da5a:	b087      	sub	sp, #28
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	4603      	mov	r3, r0
 800da60:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800da62:	88fb      	ldrh	r3, [r7, #6]
 800da64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da68:	d201      	bcs.n	800da6e <ff_wtoupper+0x16>
 800da6a:	4b3e      	ldr	r3, [pc, #248]	@ (800db64 <ff_wtoupper+0x10c>)
 800da6c:	e000      	b.n	800da70 <ff_wtoupper+0x18>
 800da6e:	4b3e      	ldr	r3, [pc, #248]	@ (800db68 <ff_wtoupper+0x110>)
 800da70:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	1c9a      	adds	r2, r3, #2
 800da76:	617a      	str	r2, [r7, #20]
 800da78:	881b      	ldrh	r3, [r3, #0]
 800da7a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800da7c:	8a7b      	ldrh	r3, [r7, #18]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d068      	beq.n	800db54 <ff_wtoupper+0xfc>
 800da82:	88fa      	ldrh	r2, [r7, #6]
 800da84:	8a7b      	ldrh	r3, [r7, #18]
 800da86:	429a      	cmp	r2, r3
 800da88:	d364      	bcc.n	800db54 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	1c9a      	adds	r2, r3, #2
 800da8e:	617a      	str	r2, [r7, #20]
 800da90:	881b      	ldrh	r3, [r3, #0]
 800da92:	823b      	strh	r3, [r7, #16]
 800da94:	8a3b      	ldrh	r3, [r7, #16]
 800da96:	0a1b      	lsrs	r3, r3, #8
 800da98:	81fb      	strh	r3, [r7, #14]
 800da9a:	8a3b      	ldrh	r3, [r7, #16]
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800daa0:	88fa      	ldrh	r2, [r7, #6]
 800daa2:	8a79      	ldrh	r1, [r7, #18]
 800daa4:	8a3b      	ldrh	r3, [r7, #16]
 800daa6:	440b      	add	r3, r1
 800daa8:	429a      	cmp	r2, r3
 800daaa:	da49      	bge.n	800db40 <ff_wtoupper+0xe8>
			switch (cmd) {
 800daac:	89fb      	ldrh	r3, [r7, #14]
 800daae:	2b08      	cmp	r3, #8
 800dab0:	d84f      	bhi.n	800db52 <ff_wtoupper+0xfa>
 800dab2:	a201      	add	r2, pc, #4	@ (adr r2, 800dab8 <ff_wtoupper+0x60>)
 800dab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab8:	0800dadd 	.word	0x0800dadd
 800dabc:	0800daef 	.word	0x0800daef
 800dac0:	0800db05 	.word	0x0800db05
 800dac4:	0800db0d 	.word	0x0800db0d
 800dac8:	0800db15 	.word	0x0800db15
 800dacc:	0800db1d 	.word	0x0800db1d
 800dad0:	0800db25 	.word	0x0800db25
 800dad4:	0800db2d 	.word	0x0800db2d
 800dad8:	0800db35 	.word	0x0800db35
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dadc:	88fa      	ldrh	r2, [r7, #6]
 800dade:	8a7b      	ldrh	r3, [r7, #18]
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	005b      	lsls	r3, r3, #1
 800dae4:	697a      	ldr	r2, [r7, #20]
 800dae6:	4413      	add	r3, r2
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	80fb      	strh	r3, [r7, #6]
 800daec:	e027      	b.n	800db3e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800daee:	88fa      	ldrh	r2, [r7, #6]
 800daf0:	8a7b      	ldrh	r3, [r7, #18]
 800daf2:	1ad3      	subs	r3, r2, r3
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	f003 0301 	and.w	r3, r3, #1
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	88fa      	ldrh	r2, [r7, #6]
 800dafe:	1ad3      	subs	r3, r2, r3
 800db00:	80fb      	strh	r3, [r7, #6]
 800db02:	e01c      	b.n	800db3e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800db04:	88fb      	ldrh	r3, [r7, #6]
 800db06:	3b10      	subs	r3, #16
 800db08:	80fb      	strh	r3, [r7, #6]
 800db0a:	e018      	b.n	800db3e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800db0c:	88fb      	ldrh	r3, [r7, #6]
 800db0e:	3b20      	subs	r3, #32
 800db10:	80fb      	strh	r3, [r7, #6]
 800db12:	e014      	b.n	800db3e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800db14:	88fb      	ldrh	r3, [r7, #6]
 800db16:	3b30      	subs	r3, #48	@ 0x30
 800db18:	80fb      	strh	r3, [r7, #6]
 800db1a:	e010      	b.n	800db3e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800db1c:	88fb      	ldrh	r3, [r7, #6]
 800db1e:	3b1a      	subs	r3, #26
 800db20:	80fb      	strh	r3, [r7, #6]
 800db22:	e00c      	b.n	800db3e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800db24:	88fb      	ldrh	r3, [r7, #6]
 800db26:	3308      	adds	r3, #8
 800db28:	80fb      	strh	r3, [r7, #6]
 800db2a:	e008      	b.n	800db3e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800db2c:	88fb      	ldrh	r3, [r7, #6]
 800db2e:	3b50      	subs	r3, #80	@ 0x50
 800db30:	80fb      	strh	r3, [r7, #6]
 800db32:	e004      	b.n	800db3e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800db34:	88fb      	ldrh	r3, [r7, #6]
 800db36:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800db3a:	80fb      	strh	r3, [r7, #6]
 800db3c:	bf00      	nop
			}
			break;
 800db3e:	e008      	b.n	800db52 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800db40:	89fb      	ldrh	r3, [r7, #14]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d195      	bne.n	800da72 <ff_wtoupper+0x1a>
 800db46:	8a3b      	ldrh	r3, [r7, #16]
 800db48:	005b      	lsls	r3, r3, #1
 800db4a:	697a      	ldr	r2, [r7, #20]
 800db4c:	4413      	add	r3, r2
 800db4e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800db50:	e78f      	b.n	800da72 <ff_wtoupper+0x1a>
			break;
 800db52:	bf00      	nop
	}

	return chr;
 800db54:	88fb      	ldrh	r3, [r7, #6]
}
 800db56:	4618      	mov	r0, r3
 800db58:	371c      	adds	r7, #28
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	0804a760 	.word	0x0804a760
 800db68:	0804a954 	.word	0x0804a954

0800db6c <sniprintf>:
 800db6c:	b40c      	push	{r2, r3}
 800db6e:	b530      	push	{r4, r5, lr}
 800db70:	4b18      	ldr	r3, [pc, #96]	@ (800dbd4 <sniprintf+0x68>)
 800db72:	1e0c      	subs	r4, r1, #0
 800db74:	681d      	ldr	r5, [r3, #0]
 800db76:	b09d      	sub	sp, #116	@ 0x74
 800db78:	da08      	bge.n	800db8c <sniprintf+0x20>
 800db7a:	238b      	movs	r3, #139	@ 0x8b
 800db7c:	602b      	str	r3, [r5, #0]
 800db7e:	f04f 30ff 	mov.w	r0, #4294967295
 800db82:	b01d      	add	sp, #116	@ 0x74
 800db84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db88:	b002      	add	sp, #8
 800db8a:	4770      	bx	lr
 800db8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800db90:	f8ad 3014 	strh.w	r3, [sp, #20]
 800db94:	f04f 0300 	mov.w	r3, #0
 800db98:	931b      	str	r3, [sp, #108]	@ 0x6c
 800db9a:	bf14      	ite	ne
 800db9c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dba0:	4623      	moveq	r3, r4
 800dba2:	9304      	str	r3, [sp, #16]
 800dba4:	9307      	str	r3, [sp, #28]
 800dba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbaa:	9002      	str	r0, [sp, #8]
 800dbac:	9006      	str	r0, [sp, #24]
 800dbae:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dbb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dbb4:	ab21      	add	r3, sp, #132	@ 0x84
 800dbb6:	a902      	add	r1, sp, #8
 800dbb8:	4628      	mov	r0, r5
 800dbba:	9301      	str	r3, [sp, #4]
 800dbbc:	f000 f9f0 	bl	800dfa0 <_svfiprintf_r>
 800dbc0:	1c43      	adds	r3, r0, #1
 800dbc2:	bfbc      	itt	lt
 800dbc4:	238b      	movlt	r3, #139	@ 0x8b
 800dbc6:	602b      	strlt	r3, [r5, #0]
 800dbc8:	2c00      	cmp	r4, #0
 800dbca:	d0da      	beq.n	800db82 <sniprintf+0x16>
 800dbcc:	9b02      	ldr	r3, [sp, #8]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	701a      	strb	r2, [r3, #0]
 800dbd2:	e7d6      	b.n	800db82 <sniprintf+0x16>
 800dbd4:	20000064 	.word	0x20000064

0800dbd8 <siscanf>:
 800dbd8:	b40e      	push	{r1, r2, r3}
 800dbda:	b570      	push	{r4, r5, r6, lr}
 800dbdc:	b09d      	sub	sp, #116	@ 0x74
 800dbde:	ac21      	add	r4, sp, #132	@ 0x84
 800dbe0:	2500      	movs	r5, #0
 800dbe2:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800dbe6:	f854 6b04 	ldr.w	r6, [r4], #4
 800dbea:	f8ad 2014 	strh.w	r2, [sp, #20]
 800dbee:	951b      	str	r5, [sp, #108]	@ 0x6c
 800dbf0:	9002      	str	r0, [sp, #8]
 800dbf2:	9006      	str	r0, [sp, #24]
 800dbf4:	f7f2 fb0c 	bl	8000210 <strlen>
 800dbf8:	4b0b      	ldr	r3, [pc, #44]	@ (800dc28 <siscanf+0x50>)
 800dbfa:	9003      	str	r0, [sp, #12]
 800dbfc:	9007      	str	r0, [sp, #28]
 800dbfe:	480b      	ldr	r0, [pc, #44]	@ (800dc2c <siscanf+0x54>)
 800dc00:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dc02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dc06:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dc0a:	4632      	mov	r2, r6
 800dc0c:	4623      	mov	r3, r4
 800dc0e:	a902      	add	r1, sp, #8
 800dc10:	6800      	ldr	r0, [r0, #0]
 800dc12:	950f      	str	r5, [sp, #60]	@ 0x3c
 800dc14:	9514      	str	r5, [sp, #80]	@ 0x50
 800dc16:	9401      	str	r4, [sp, #4]
 800dc18:	f000 fb18 	bl	800e24c <__ssvfiscanf_r>
 800dc1c:	b01d      	add	sp, #116	@ 0x74
 800dc1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc22:	b003      	add	sp, #12
 800dc24:	4770      	bx	lr
 800dc26:	bf00      	nop
 800dc28:	0800dc31 	.word	0x0800dc31
 800dc2c:	20000064 	.word	0x20000064

0800dc30 <__seofread>:
 800dc30:	2000      	movs	r0, #0
 800dc32:	4770      	bx	lr

0800dc34 <memset>:
 800dc34:	4402      	add	r2, r0
 800dc36:	4603      	mov	r3, r0
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d100      	bne.n	800dc3e <memset+0xa>
 800dc3c:	4770      	bx	lr
 800dc3e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc42:	e7f9      	b.n	800dc38 <memset+0x4>

0800dc44 <strchr>:
 800dc44:	b2c9      	uxtb	r1, r1
 800dc46:	4603      	mov	r3, r0
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc4e:	b112      	cbz	r2, 800dc56 <strchr+0x12>
 800dc50:	428a      	cmp	r2, r1
 800dc52:	d1f9      	bne.n	800dc48 <strchr+0x4>
 800dc54:	4770      	bx	lr
 800dc56:	2900      	cmp	r1, #0
 800dc58:	bf18      	it	ne
 800dc5a:	2000      	movne	r0, #0
 800dc5c:	4770      	bx	lr

0800dc5e <strncpy>:
 800dc5e:	b510      	push	{r4, lr}
 800dc60:	3901      	subs	r1, #1
 800dc62:	4603      	mov	r3, r0
 800dc64:	b132      	cbz	r2, 800dc74 <strncpy+0x16>
 800dc66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dc6a:	f803 4b01 	strb.w	r4, [r3], #1
 800dc6e:	3a01      	subs	r2, #1
 800dc70:	2c00      	cmp	r4, #0
 800dc72:	d1f7      	bne.n	800dc64 <strncpy+0x6>
 800dc74:	441a      	add	r2, r3
 800dc76:	2100      	movs	r1, #0
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d100      	bne.n	800dc7e <strncpy+0x20>
 800dc7c:	bd10      	pop	{r4, pc}
 800dc7e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc82:	e7f9      	b.n	800dc78 <strncpy+0x1a>

0800dc84 <__errno>:
 800dc84:	4b01      	ldr	r3, [pc, #4]	@ (800dc8c <__errno+0x8>)
 800dc86:	6818      	ldr	r0, [r3, #0]
 800dc88:	4770      	bx	lr
 800dc8a:	bf00      	nop
 800dc8c:	20000064 	.word	0x20000064

0800dc90 <__libc_init_array>:
 800dc90:	b570      	push	{r4, r5, r6, lr}
 800dc92:	4d0d      	ldr	r5, [pc, #52]	@ (800dcc8 <__libc_init_array+0x38>)
 800dc94:	4c0d      	ldr	r4, [pc, #52]	@ (800dccc <__libc_init_array+0x3c>)
 800dc96:	1b64      	subs	r4, r4, r5
 800dc98:	10a4      	asrs	r4, r4, #2
 800dc9a:	2600      	movs	r6, #0
 800dc9c:	42a6      	cmp	r6, r4
 800dc9e:	d109      	bne.n	800dcb4 <__libc_init_array+0x24>
 800dca0:	4d0b      	ldr	r5, [pc, #44]	@ (800dcd0 <__libc_init_array+0x40>)
 800dca2:	4c0c      	ldr	r4, [pc, #48]	@ (800dcd4 <__libc_init_array+0x44>)
 800dca4:	f001 fcaa 	bl	800f5fc <_init>
 800dca8:	1b64      	subs	r4, r4, r5
 800dcaa:	10a4      	asrs	r4, r4, #2
 800dcac:	2600      	movs	r6, #0
 800dcae:	42a6      	cmp	r6, r4
 800dcb0:	d105      	bne.n	800dcbe <__libc_init_array+0x2e>
 800dcb2:	bd70      	pop	{r4, r5, r6, pc}
 800dcb4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcb8:	4798      	blx	r3
 800dcba:	3601      	adds	r6, #1
 800dcbc:	e7ee      	b.n	800dc9c <__libc_init_array+0xc>
 800dcbe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dcc2:	4798      	blx	r3
 800dcc4:	3601      	adds	r6, #1
 800dcc6:	e7f2      	b.n	800dcae <__libc_init_array+0x1e>
 800dcc8:	0804ab80 	.word	0x0804ab80
 800dccc:	0804ab80 	.word	0x0804ab80
 800dcd0:	0804ab80 	.word	0x0804ab80
 800dcd4:	0804ab84 	.word	0x0804ab84

0800dcd8 <__retarget_lock_acquire_recursive>:
 800dcd8:	4770      	bx	lr

0800dcda <__retarget_lock_release_recursive>:
 800dcda:	4770      	bx	lr

0800dcdc <memcpy>:
 800dcdc:	440a      	add	r2, r1
 800dcde:	4291      	cmp	r1, r2
 800dce0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dce4:	d100      	bne.n	800dce8 <memcpy+0xc>
 800dce6:	4770      	bx	lr
 800dce8:	b510      	push	{r4, lr}
 800dcea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcf2:	4291      	cmp	r1, r2
 800dcf4:	d1f9      	bne.n	800dcea <memcpy+0xe>
 800dcf6:	bd10      	pop	{r4, pc}

0800dcf8 <_free_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	2900      	cmp	r1, #0
 800dcfe:	d041      	beq.n	800dd84 <_free_r+0x8c>
 800dd00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd04:	1f0c      	subs	r4, r1, #4
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	bfb8      	it	lt
 800dd0a:	18e4      	addlt	r4, r4, r3
 800dd0c:	f000 f8e0 	bl	800ded0 <__malloc_lock>
 800dd10:	4a1d      	ldr	r2, [pc, #116]	@ (800dd88 <_free_r+0x90>)
 800dd12:	6813      	ldr	r3, [r2, #0]
 800dd14:	b933      	cbnz	r3, 800dd24 <_free_r+0x2c>
 800dd16:	6063      	str	r3, [r4, #4]
 800dd18:	6014      	str	r4, [r2, #0]
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd20:	f000 b8dc 	b.w	800dedc <__malloc_unlock>
 800dd24:	42a3      	cmp	r3, r4
 800dd26:	d908      	bls.n	800dd3a <_free_r+0x42>
 800dd28:	6820      	ldr	r0, [r4, #0]
 800dd2a:	1821      	adds	r1, r4, r0
 800dd2c:	428b      	cmp	r3, r1
 800dd2e:	bf01      	itttt	eq
 800dd30:	6819      	ldreq	r1, [r3, #0]
 800dd32:	685b      	ldreq	r3, [r3, #4]
 800dd34:	1809      	addeq	r1, r1, r0
 800dd36:	6021      	streq	r1, [r4, #0]
 800dd38:	e7ed      	b.n	800dd16 <_free_r+0x1e>
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	b10b      	cbz	r3, 800dd44 <_free_r+0x4c>
 800dd40:	42a3      	cmp	r3, r4
 800dd42:	d9fa      	bls.n	800dd3a <_free_r+0x42>
 800dd44:	6811      	ldr	r1, [r2, #0]
 800dd46:	1850      	adds	r0, r2, r1
 800dd48:	42a0      	cmp	r0, r4
 800dd4a:	d10b      	bne.n	800dd64 <_free_r+0x6c>
 800dd4c:	6820      	ldr	r0, [r4, #0]
 800dd4e:	4401      	add	r1, r0
 800dd50:	1850      	adds	r0, r2, r1
 800dd52:	4283      	cmp	r3, r0
 800dd54:	6011      	str	r1, [r2, #0]
 800dd56:	d1e0      	bne.n	800dd1a <_free_r+0x22>
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	6053      	str	r3, [r2, #4]
 800dd5e:	4408      	add	r0, r1
 800dd60:	6010      	str	r0, [r2, #0]
 800dd62:	e7da      	b.n	800dd1a <_free_r+0x22>
 800dd64:	d902      	bls.n	800dd6c <_free_r+0x74>
 800dd66:	230c      	movs	r3, #12
 800dd68:	602b      	str	r3, [r5, #0]
 800dd6a:	e7d6      	b.n	800dd1a <_free_r+0x22>
 800dd6c:	6820      	ldr	r0, [r4, #0]
 800dd6e:	1821      	adds	r1, r4, r0
 800dd70:	428b      	cmp	r3, r1
 800dd72:	bf04      	itt	eq
 800dd74:	6819      	ldreq	r1, [r3, #0]
 800dd76:	685b      	ldreq	r3, [r3, #4]
 800dd78:	6063      	str	r3, [r4, #4]
 800dd7a:	bf04      	itt	eq
 800dd7c:	1809      	addeq	r1, r1, r0
 800dd7e:	6021      	streq	r1, [r4, #0]
 800dd80:	6054      	str	r4, [r2, #4]
 800dd82:	e7ca      	b.n	800dd1a <_free_r+0x22>
 800dd84:	bd38      	pop	{r3, r4, r5, pc}
 800dd86:	bf00      	nop
 800dd88:	20006aac 	.word	0x20006aac

0800dd8c <sbrk_aligned>:
 800dd8c:	b570      	push	{r4, r5, r6, lr}
 800dd8e:	4e0f      	ldr	r6, [pc, #60]	@ (800ddcc <sbrk_aligned+0x40>)
 800dd90:	460c      	mov	r4, r1
 800dd92:	6831      	ldr	r1, [r6, #0]
 800dd94:	4605      	mov	r5, r0
 800dd96:	b911      	cbnz	r1, 800dd9e <sbrk_aligned+0x12>
 800dd98:	f000 ff36 	bl	800ec08 <_sbrk_r>
 800dd9c:	6030      	str	r0, [r6, #0]
 800dd9e:	4621      	mov	r1, r4
 800dda0:	4628      	mov	r0, r5
 800dda2:	f000 ff31 	bl	800ec08 <_sbrk_r>
 800dda6:	1c43      	adds	r3, r0, #1
 800dda8:	d103      	bne.n	800ddb2 <sbrk_aligned+0x26>
 800ddaa:	f04f 34ff 	mov.w	r4, #4294967295
 800ddae:	4620      	mov	r0, r4
 800ddb0:	bd70      	pop	{r4, r5, r6, pc}
 800ddb2:	1cc4      	adds	r4, r0, #3
 800ddb4:	f024 0403 	bic.w	r4, r4, #3
 800ddb8:	42a0      	cmp	r0, r4
 800ddba:	d0f8      	beq.n	800ddae <sbrk_aligned+0x22>
 800ddbc:	1a21      	subs	r1, r4, r0
 800ddbe:	4628      	mov	r0, r5
 800ddc0:	f000 ff22 	bl	800ec08 <_sbrk_r>
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d1f2      	bne.n	800ddae <sbrk_aligned+0x22>
 800ddc8:	e7ef      	b.n	800ddaa <sbrk_aligned+0x1e>
 800ddca:	bf00      	nop
 800ddcc:	20006aa8 	.word	0x20006aa8

0800ddd0 <_malloc_r>:
 800ddd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddd4:	1ccd      	adds	r5, r1, #3
 800ddd6:	f025 0503 	bic.w	r5, r5, #3
 800ddda:	3508      	adds	r5, #8
 800dddc:	2d0c      	cmp	r5, #12
 800ddde:	bf38      	it	cc
 800dde0:	250c      	movcc	r5, #12
 800dde2:	2d00      	cmp	r5, #0
 800dde4:	4606      	mov	r6, r0
 800dde6:	db01      	blt.n	800ddec <_malloc_r+0x1c>
 800dde8:	42a9      	cmp	r1, r5
 800ddea:	d904      	bls.n	800ddf6 <_malloc_r+0x26>
 800ddec:	230c      	movs	r3, #12
 800ddee:	6033      	str	r3, [r6, #0]
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800decc <_malloc_r+0xfc>
 800ddfa:	f000 f869 	bl	800ded0 <__malloc_lock>
 800ddfe:	f8d8 3000 	ldr.w	r3, [r8]
 800de02:	461c      	mov	r4, r3
 800de04:	bb44      	cbnz	r4, 800de58 <_malloc_r+0x88>
 800de06:	4629      	mov	r1, r5
 800de08:	4630      	mov	r0, r6
 800de0a:	f7ff ffbf 	bl	800dd8c <sbrk_aligned>
 800de0e:	1c43      	adds	r3, r0, #1
 800de10:	4604      	mov	r4, r0
 800de12:	d158      	bne.n	800dec6 <_malloc_r+0xf6>
 800de14:	f8d8 4000 	ldr.w	r4, [r8]
 800de18:	4627      	mov	r7, r4
 800de1a:	2f00      	cmp	r7, #0
 800de1c:	d143      	bne.n	800dea6 <_malloc_r+0xd6>
 800de1e:	2c00      	cmp	r4, #0
 800de20:	d04b      	beq.n	800deba <_malloc_r+0xea>
 800de22:	6823      	ldr	r3, [r4, #0]
 800de24:	4639      	mov	r1, r7
 800de26:	4630      	mov	r0, r6
 800de28:	eb04 0903 	add.w	r9, r4, r3
 800de2c:	f000 feec 	bl	800ec08 <_sbrk_r>
 800de30:	4581      	cmp	r9, r0
 800de32:	d142      	bne.n	800deba <_malloc_r+0xea>
 800de34:	6821      	ldr	r1, [r4, #0]
 800de36:	1a6d      	subs	r5, r5, r1
 800de38:	4629      	mov	r1, r5
 800de3a:	4630      	mov	r0, r6
 800de3c:	f7ff ffa6 	bl	800dd8c <sbrk_aligned>
 800de40:	3001      	adds	r0, #1
 800de42:	d03a      	beq.n	800deba <_malloc_r+0xea>
 800de44:	6823      	ldr	r3, [r4, #0]
 800de46:	442b      	add	r3, r5
 800de48:	6023      	str	r3, [r4, #0]
 800de4a:	f8d8 3000 	ldr.w	r3, [r8]
 800de4e:	685a      	ldr	r2, [r3, #4]
 800de50:	bb62      	cbnz	r2, 800deac <_malloc_r+0xdc>
 800de52:	f8c8 7000 	str.w	r7, [r8]
 800de56:	e00f      	b.n	800de78 <_malloc_r+0xa8>
 800de58:	6822      	ldr	r2, [r4, #0]
 800de5a:	1b52      	subs	r2, r2, r5
 800de5c:	d420      	bmi.n	800dea0 <_malloc_r+0xd0>
 800de5e:	2a0b      	cmp	r2, #11
 800de60:	d917      	bls.n	800de92 <_malloc_r+0xc2>
 800de62:	1961      	adds	r1, r4, r5
 800de64:	42a3      	cmp	r3, r4
 800de66:	6025      	str	r5, [r4, #0]
 800de68:	bf18      	it	ne
 800de6a:	6059      	strne	r1, [r3, #4]
 800de6c:	6863      	ldr	r3, [r4, #4]
 800de6e:	bf08      	it	eq
 800de70:	f8c8 1000 	streq.w	r1, [r8]
 800de74:	5162      	str	r2, [r4, r5]
 800de76:	604b      	str	r3, [r1, #4]
 800de78:	4630      	mov	r0, r6
 800de7a:	f000 f82f 	bl	800dedc <__malloc_unlock>
 800de7e:	f104 000b 	add.w	r0, r4, #11
 800de82:	1d23      	adds	r3, r4, #4
 800de84:	f020 0007 	bic.w	r0, r0, #7
 800de88:	1ac2      	subs	r2, r0, r3
 800de8a:	bf1c      	itt	ne
 800de8c:	1a1b      	subne	r3, r3, r0
 800de8e:	50a3      	strne	r3, [r4, r2]
 800de90:	e7af      	b.n	800ddf2 <_malloc_r+0x22>
 800de92:	6862      	ldr	r2, [r4, #4]
 800de94:	42a3      	cmp	r3, r4
 800de96:	bf0c      	ite	eq
 800de98:	f8c8 2000 	streq.w	r2, [r8]
 800de9c:	605a      	strne	r2, [r3, #4]
 800de9e:	e7eb      	b.n	800de78 <_malloc_r+0xa8>
 800dea0:	4623      	mov	r3, r4
 800dea2:	6864      	ldr	r4, [r4, #4]
 800dea4:	e7ae      	b.n	800de04 <_malloc_r+0x34>
 800dea6:	463c      	mov	r4, r7
 800dea8:	687f      	ldr	r7, [r7, #4]
 800deaa:	e7b6      	b.n	800de1a <_malloc_r+0x4a>
 800deac:	461a      	mov	r2, r3
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	42a3      	cmp	r3, r4
 800deb2:	d1fb      	bne.n	800deac <_malloc_r+0xdc>
 800deb4:	2300      	movs	r3, #0
 800deb6:	6053      	str	r3, [r2, #4]
 800deb8:	e7de      	b.n	800de78 <_malloc_r+0xa8>
 800deba:	230c      	movs	r3, #12
 800debc:	6033      	str	r3, [r6, #0]
 800debe:	4630      	mov	r0, r6
 800dec0:	f000 f80c 	bl	800dedc <__malloc_unlock>
 800dec4:	e794      	b.n	800ddf0 <_malloc_r+0x20>
 800dec6:	6005      	str	r5, [r0, #0]
 800dec8:	e7d6      	b.n	800de78 <_malloc_r+0xa8>
 800deca:	bf00      	nop
 800decc:	20006aac 	.word	0x20006aac

0800ded0 <__malloc_lock>:
 800ded0:	4801      	ldr	r0, [pc, #4]	@ (800ded8 <__malloc_lock+0x8>)
 800ded2:	f7ff bf01 	b.w	800dcd8 <__retarget_lock_acquire_recursive>
 800ded6:	bf00      	nop
 800ded8:	20006aa4 	.word	0x20006aa4

0800dedc <__malloc_unlock>:
 800dedc:	4801      	ldr	r0, [pc, #4]	@ (800dee4 <__malloc_unlock+0x8>)
 800dede:	f7ff befc 	b.w	800dcda <__retarget_lock_release_recursive>
 800dee2:	bf00      	nop
 800dee4:	20006aa4 	.word	0x20006aa4

0800dee8 <__ssputs_r>:
 800dee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deec:	688e      	ldr	r6, [r1, #8]
 800deee:	461f      	mov	r7, r3
 800def0:	42be      	cmp	r6, r7
 800def2:	680b      	ldr	r3, [r1, #0]
 800def4:	4682      	mov	sl, r0
 800def6:	460c      	mov	r4, r1
 800def8:	4690      	mov	r8, r2
 800defa:	d82d      	bhi.n	800df58 <__ssputs_r+0x70>
 800defc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800df00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800df04:	d026      	beq.n	800df54 <__ssputs_r+0x6c>
 800df06:	6965      	ldr	r5, [r4, #20]
 800df08:	6909      	ldr	r1, [r1, #16]
 800df0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df0e:	eba3 0901 	sub.w	r9, r3, r1
 800df12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df16:	1c7b      	adds	r3, r7, #1
 800df18:	444b      	add	r3, r9
 800df1a:	106d      	asrs	r5, r5, #1
 800df1c:	429d      	cmp	r5, r3
 800df1e:	bf38      	it	cc
 800df20:	461d      	movcc	r5, r3
 800df22:	0553      	lsls	r3, r2, #21
 800df24:	d527      	bpl.n	800df76 <__ssputs_r+0x8e>
 800df26:	4629      	mov	r1, r5
 800df28:	f7ff ff52 	bl	800ddd0 <_malloc_r>
 800df2c:	4606      	mov	r6, r0
 800df2e:	b360      	cbz	r0, 800df8a <__ssputs_r+0xa2>
 800df30:	6921      	ldr	r1, [r4, #16]
 800df32:	464a      	mov	r2, r9
 800df34:	f7ff fed2 	bl	800dcdc <memcpy>
 800df38:	89a3      	ldrh	r3, [r4, #12]
 800df3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800df3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df42:	81a3      	strh	r3, [r4, #12]
 800df44:	6126      	str	r6, [r4, #16]
 800df46:	6165      	str	r5, [r4, #20]
 800df48:	444e      	add	r6, r9
 800df4a:	eba5 0509 	sub.w	r5, r5, r9
 800df4e:	6026      	str	r6, [r4, #0]
 800df50:	60a5      	str	r5, [r4, #8]
 800df52:	463e      	mov	r6, r7
 800df54:	42be      	cmp	r6, r7
 800df56:	d900      	bls.n	800df5a <__ssputs_r+0x72>
 800df58:	463e      	mov	r6, r7
 800df5a:	6820      	ldr	r0, [r4, #0]
 800df5c:	4632      	mov	r2, r6
 800df5e:	4641      	mov	r1, r8
 800df60:	f000 fe37 	bl	800ebd2 <memmove>
 800df64:	68a3      	ldr	r3, [r4, #8]
 800df66:	1b9b      	subs	r3, r3, r6
 800df68:	60a3      	str	r3, [r4, #8]
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	4433      	add	r3, r6
 800df6e:	6023      	str	r3, [r4, #0]
 800df70:	2000      	movs	r0, #0
 800df72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df76:	462a      	mov	r2, r5
 800df78:	f000 fe56 	bl	800ec28 <_realloc_r>
 800df7c:	4606      	mov	r6, r0
 800df7e:	2800      	cmp	r0, #0
 800df80:	d1e0      	bne.n	800df44 <__ssputs_r+0x5c>
 800df82:	6921      	ldr	r1, [r4, #16]
 800df84:	4650      	mov	r0, sl
 800df86:	f7ff feb7 	bl	800dcf8 <_free_r>
 800df8a:	230c      	movs	r3, #12
 800df8c:	f8ca 3000 	str.w	r3, [sl]
 800df90:	89a3      	ldrh	r3, [r4, #12]
 800df92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800df96:	81a3      	strh	r3, [r4, #12]
 800df98:	f04f 30ff 	mov.w	r0, #4294967295
 800df9c:	e7e9      	b.n	800df72 <__ssputs_r+0x8a>
	...

0800dfa0 <_svfiprintf_r>:
 800dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa4:	4698      	mov	r8, r3
 800dfa6:	898b      	ldrh	r3, [r1, #12]
 800dfa8:	061b      	lsls	r3, r3, #24
 800dfaa:	b09d      	sub	sp, #116	@ 0x74
 800dfac:	4607      	mov	r7, r0
 800dfae:	460d      	mov	r5, r1
 800dfb0:	4614      	mov	r4, r2
 800dfb2:	d510      	bpl.n	800dfd6 <_svfiprintf_r+0x36>
 800dfb4:	690b      	ldr	r3, [r1, #16]
 800dfb6:	b973      	cbnz	r3, 800dfd6 <_svfiprintf_r+0x36>
 800dfb8:	2140      	movs	r1, #64	@ 0x40
 800dfba:	f7ff ff09 	bl	800ddd0 <_malloc_r>
 800dfbe:	6028      	str	r0, [r5, #0]
 800dfc0:	6128      	str	r0, [r5, #16]
 800dfc2:	b930      	cbnz	r0, 800dfd2 <_svfiprintf_r+0x32>
 800dfc4:	230c      	movs	r3, #12
 800dfc6:	603b      	str	r3, [r7, #0]
 800dfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfcc:	b01d      	add	sp, #116	@ 0x74
 800dfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfd2:	2340      	movs	r3, #64	@ 0x40
 800dfd4:	616b      	str	r3, [r5, #20]
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfda:	2320      	movs	r3, #32
 800dfdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dfe0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfe4:	2330      	movs	r3, #48	@ 0x30
 800dfe6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e184 <_svfiprintf_r+0x1e4>
 800dfea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dfee:	f04f 0901 	mov.w	r9, #1
 800dff2:	4623      	mov	r3, r4
 800dff4:	469a      	mov	sl, r3
 800dff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dffa:	b10a      	cbz	r2, 800e000 <_svfiprintf_r+0x60>
 800dffc:	2a25      	cmp	r2, #37	@ 0x25
 800dffe:	d1f9      	bne.n	800dff4 <_svfiprintf_r+0x54>
 800e000:	ebba 0b04 	subs.w	fp, sl, r4
 800e004:	d00b      	beq.n	800e01e <_svfiprintf_r+0x7e>
 800e006:	465b      	mov	r3, fp
 800e008:	4622      	mov	r2, r4
 800e00a:	4629      	mov	r1, r5
 800e00c:	4638      	mov	r0, r7
 800e00e:	f7ff ff6b 	bl	800dee8 <__ssputs_r>
 800e012:	3001      	adds	r0, #1
 800e014:	f000 80a7 	beq.w	800e166 <_svfiprintf_r+0x1c6>
 800e018:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e01a:	445a      	add	r2, fp
 800e01c:	9209      	str	r2, [sp, #36]	@ 0x24
 800e01e:	f89a 3000 	ldrb.w	r3, [sl]
 800e022:	2b00      	cmp	r3, #0
 800e024:	f000 809f 	beq.w	800e166 <_svfiprintf_r+0x1c6>
 800e028:	2300      	movs	r3, #0
 800e02a:	f04f 32ff 	mov.w	r2, #4294967295
 800e02e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e032:	f10a 0a01 	add.w	sl, sl, #1
 800e036:	9304      	str	r3, [sp, #16]
 800e038:	9307      	str	r3, [sp, #28]
 800e03a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e03e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e040:	4654      	mov	r4, sl
 800e042:	2205      	movs	r2, #5
 800e044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e048:	484e      	ldr	r0, [pc, #312]	@ (800e184 <_svfiprintf_r+0x1e4>)
 800e04a:	f7f2 f8e9 	bl	8000220 <memchr>
 800e04e:	9a04      	ldr	r2, [sp, #16]
 800e050:	b9d8      	cbnz	r0, 800e08a <_svfiprintf_r+0xea>
 800e052:	06d0      	lsls	r0, r2, #27
 800e054:	bf44      	itt	mi
 800e056:	2320      	movmi	r3, #32
 800e058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e05c:	0711      	lsls	r1, r2, #28
 800e05e:	bf44      	itt	mi
 800e060:	232b      	movmi	r3, #43	@ 0x2b
 800e062:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e066:	f89a 3000 	ldrb.w	r3, [sl]
 800e06a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e06c:	d015      	beq.n	800e09a <_svfiprintf_r+0xfa>
 800e06e:	9a07      	ldr	r2, [sp, #28]
 800e070:	4654      	mov	r4, sl
 800e072:	2000      	movs	r0, #0
 800e074:	f04f 0c0a 	mov.w	ip, #10
 800e078:	4621      	mov	r1, r4
 800e07a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e07e:	3b30      	subs	r3, #48	@ 0x30
 800e080:	2b09      	cmp	r3, #9
 800e082:	d94b      	bls.n	800e11c <_svfiprintf_r+0x17c>
 800e084:	b1b0      	cbz	r0, 800e0b4 <_svfiprintf_r+0x114>
 800e086:	9207      	str	r2, [sp, #28]
 800e088:	e014      	b.n	800e0b4 <_svfiprintf_r+0x114>
 800e08a:	eba0 0308 	sub.w	r3, r0, r8
 800e08e:	fa09 f303 	lsl.w	r3, r9, r3
 800e092:	4313      	orrs	r3, r2
 800e094:	9304      	str	r3, [sp, #16]
 800e096:	46a2      	mov	sl, r4
 800e098:	e7d2      	b.n	800e040 <_svfiprintf_r+0xa0>
 800e09a:	9b03      	ldr	r3, [sp, #12]
 800e09c:	1d19      	adds	r1, r3, #4
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	9103      	str	r1, [sp, #12]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	bfbb      	ittet	lt
 800e0a6:	425b      	neglt	r3, r3
 800e0a8:	f042 0202 	orrlt.w	r2, r2, #2
 800e0ac:	9307      	strge	r3, [sp, #28]
 800e0ae:	9307      	strlt	r3, [sp, #28]
 800e0b0:	bfb8      	it	lt
 800e0b2:	9204      	strlt	r2, [sp, #16]
 800e0b4:	7823      	ldrb	r3, [r4, #0]
 800e0b6:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0b8:	d10a      	bne.n	800e0d0 <_svfiprintf_r+0x130>
 800e0ba:	7863      	ldrb	r3, [r4, #1]
 800e0bc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e0be:	d132      	bne.n	800e126 <_svfiprintf_r+0x186>
 800e0c0:	9b03      	ldr	r3, [sp, #12]
 800e0c2:	1d1a      	adds	r2, r3, #4
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	9203      	str	r2, [sp, #12]
 800e0c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e0cc:	3402      	adds	r4, #2
 800e0ce:	9305      	str	r3, [sp, #20]
 800e0d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e194 <_svfiprintf_r+0x1f4>
 800e0d4:	7821      	ldrb	r1, [r4, #0]
 800e0d6:	2203      	movs	r2, #3
 800e0d8:	4650      	mov	r0, sl
 800e0da:	f7f2 f8a1 	bl	8000220 <memchr>
 800e0de:	b138      	cbz	r0, 800e0f0 <_svfiprintf_r+0x150>
 800e0e0:	9b04      	ldr	r3, [sp, #16]
 800e0e2:	eba0 000a 	sub.w	r0, r0, sl
 800e0e6:	2240      	movs	r2, #64	@ 0x40
 800e0e8:	4082      	lsls	r2, r0
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	3401      	adds	r4, #1
 800e0ee:	9304      	str	r3, [sp, #16]
 800e0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0f4:	4824      	ldr	r0, [pc, #144]	@ (800e188 <_svfiprintf_r+0x1e8>)
 800e0f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e0fa:	2206      	movs	r2, #6
 800e0fc:	f7f2 f890 	bl	8000220 <memchr>
 800e100:	2800      	cmp	r0, #0
 800e102:	d036      	beq.n	800e172 <_svfiprintf_r+0x1d2>
 800e104:	4b21      	ldr	r3, [pc, #132]	@ (800e18c <_svfiprintf_r+0x1ec>)
 800e106:	bb1b      	cbnz	r3, 800e150 <_svfiprintf_r+0x1b0>
 800e108:	9b03      	ldr	r3, [sp, #12]
 800e10a:	3307      	adds	r3, #7
 800e10c:	f023 0307 	bic.w	r3, r3, #7
 800e110:	3308      	adds	r3, #8
 800e112:	9303      	str	r3, [sp, #12]
 800e114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e116:	4433      	add	r3, r6
 800e118:	9309      	str	r3, [sp, #36]	@ 0x24
 800e11a:	e76a      	b.n	800dff2 <_svfiprintf_r+0x52>
 800e11c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e120:	460c      	mov	r4, r1
 800e122:	2001      	movs	r0, #1
 800e124:	e7a8      	b.n	800e078 <_svfiprintf_r+0xd8>
 800e126:	2300      	movs	r3, #0
 800e128:	3401      	adds	r4, #1
 800e12a:	9305      	str	r3, [sp, #20]
 800e12c:	4619      	mov	r1, r3
 800e12e:	f04f 0c0a 	mov.w	ip, #10
 800e132:	4620      	mov	r0, r4
 800e134:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e138:	3a30      	subs	r2, #48	@ 0x30
 800e13a:	2a09      	cmp	r2, #9
 800e13c:	d903      	bls.n	800e146 <_svfiprintf_r+0x1a6>
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d0c6      	beq.n	800e0d0 <_svfiprintf_r+0x130>
 800e142:	9105      	str	r1, [sp, #20]
 800e144:	e7c4      	b.n	800e0d0 <_svfiprintf_r+0x130>
 800e146:	fb0c 2101 	mla	r1, ip, r1, r2
 800e14a:	4604      	mov	r4, r0
 800e14c:	2301      	movs	r3, #1
 800e14e:	e7f0      	b.n	800e132 <_svfiprintf_r+0x192>
 800e150:	ab03      	add	r3, sp, #12
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	462a      	mov	r2, r5
 800e156:	4b0e      	ldr	r3, [pc, #56]	@ (800e190 <_svfiprintf_r+0x1f0>)
 800e158:	a904      	add	r1, sp, #16
 800e15a:	4638      	mov	r0, r7
 800e15c:	f3af 8000 	nop.w
 800e160:	1c42      	adds	r2, r0, #1
 800e162:	4606      	mov	r6, r0
 800e164:	d1d6      	bne.n	800e114 <_svfiprintf_r+0x174>
 800e166:	89ab      	ldrh	r3, [r5, #12]
 800e168:	065b      	lsls	r3, r3, #25
 800e16a:	f53f af2d 	bmi.w	800dfc8 <_svfiprintf_r+0x28>
 800e16e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e170:	e72c      	b.n	800dfcc <_svfiprintf_r+0x2c>
 800e172:	ab03      	add	r3, sp, #12
 800e174:	9300      	str	r3, [sp, #0]
 800e176:	462a      	mov	r2, r5
 800e178:	4b05      	ldr	r3, [pc, #20]	@ (800e190 <_svfiprintf_r+0x1f0>)
 800e17a:	a904      	add	r1, sp, #16
 800e17c:	4638      	mov	r0, r7
 800e17e:	f000 fa49 	bl	800e614 <_printf_i>
 800e182:	e7ed      	b.n	800e160 <_svfiprintf_r+0x1c0>
 800e184:	0804aa10 	.word	0x0804aa10
 800e188:	0804aa1a 	.word	0x0804aa1a
 800e18c:	00000000 	.word	0x00000000
 800e190:	0800dee9 	.word	0x0800dee9
 800e194:	0804aa16 	.word	0x0804aa16

0800e198 <_sungetc_r>:
 800e198:	b538      	push	{r3, r4, r5, lr}
 800e19a:	1c4b      	adds	r3, r1, #1
 800e19c:	4614      	mov	r4, r2
 800e19e:	d103      	bne.n	800e1a8 <_sungetc_r+0x10>
 800e1a0:	f04f 35ff 	mov.w	r5, #4294967295
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	8993      	ldrh	r3, [r2, #12]
 800e1aa:	f023 0320 	bic.w	r3, r3, #32
 800e1ae:	8193      	strh	r3, [r2, #12]
 800e1b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e1b2:	6852      	ldr	r2, [r2, #4]
 800e1b4:	b2cd      	uxtb	r5, r1
 800e1b6:	b18b      	cbz	r3, 800e1dc <_sungetc_r+0x44>
 800e1b8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	dd08      	ble.n	800e1d0 <_sungetc_r+0x38>
 800e1be:	6823      	ldr	r3, [r4, #0]
 800e1c0:	1e5a      	subs	r2, r3, #1
 800e1c2:	6022      	str	r2, [r4, #0]
 800e1c4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800e1c8:	6863      	ldr	r3, [r4, #4]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	6063      	str	r3, [r4, #4]
 800e1ce:	e7e9      	b.n	800e1a4 <_sungetc_r+0xc>
 800e1d0:	4621      	mov	r1, r4
 800e1d2:	f000 fcc4 	bl	800eb5e <__submore>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d0f1      	beq.n	800e1be <_sungetc_r+0x26>
 800e1da:	e7e1      	b.n	800e1a0 <_sungetc_r+0x8>
 800e1dc:	6921      	ldr	r1, [r4, #16]
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	b151      	cbz	r1, 800e1f8 <_sungetc_r+0x60>
 800e1e2:	4299      	cmp	r1, r3
 800e1e4:	d208      	bcs.n	800e1f8 <_sungetc_r+0x60>
 800e1e6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800e1ea:	42a9      	cmp	r1, r5
 800e1ec:	d104      	bne.n	800e1f8 <_sungetc_r+0x60>
 800e1ee:	3b01      	subs	r3, #1
 800e1f0:	3201      	adds	r2, #1
 800e1f2:	6023      	str	r3, [r4, #0]
 800e1f4:	6062      	str	r2, [r4, #4]
 800e1f6:	e7d5      	b.n	800e1a4 <_sungetc_r+0xc>
 800e1f8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800e1fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e200:	6363      	str	r3, [r4, #52]	@ 0x34
 800e202:	2303      	movs	r3, #3
 800e204:	63a3      	str	r3, [r4, #56]	@ 0x38
 800e206:	4623      	mov	r3, r4
 800e208:	f803 5f46 	strb.w	r5, [r3, #70]!
 800e20c:	6023      	str	r3, [r4, #0]
 800e20e:	2301      	movs	r3, #1
 800e210:	e7dc      	b.n	800e1cc <_sungetc_r+0x34>

0800e212 <__ssrefill_r>:
 800e212:	b510      	push	{r4, lr}
 800e214:	460c      	mov	r4, r1
 800e216:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800e218:	b169      	cbz	r1, 800e236 <__ssrefill_r+0x24>
 800e21a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e21e:	4299      	cmp	r1, r3
 800e220:	d001      	beq.n	800e226 <__ssrefill_r+0x14>
 800e222:	f7ff fd69 	bl	800dcf8 <_free_r>
 800e226:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e228:	6063      	str	r3, [r4, #4]
 800e22a:	2000      	movs	r0, #0
 800e22c:	6360      	str	r0, [r4, #52]	@ 0x34
 800e22e:	b113      	cbz	r3, 800e236 <__ssrefill_r+0x24>
 800e230:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e232:	6023      	str	r3, [r4, #0]
 800e234:	bd10      	pop	{r4, pc}
 800e236:	6923      	ldr	r3, [r4, #16]
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	2300      	movs	r3, #0
 800e23c:	6063      	str	r3, [r4, #4]
 800e23e:	89a3      	ldrh	r3, [r4, #12]
 800e240:	f043 0320 	orr.w	r3, r3, #32
 800e244:	81a3      	strh	r3, [r4, #12]
 800e246:	f04f 30ff 	mov.w	r0, #4294967295
 800e24a:	e7f3      	b.n	800e234 <__ssrefill_r+0x22>

0800e24c <__ssvfiscanf_r>:
 800e24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e250:	460c      	mov	r4, r1
 800e252:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800e256:	2100      	movs	r1, #0
 800e258:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800e25c:	49a6      	ldr	r1, [pc, #664]	@ (800e4f8 <__ssvfiscanf_r+0x2ac>)
 800e25e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800e260:	f10d 0804 	add.w	r8, sp, #4
 800e264:	49a5      	ldr	r1, [pc, #660]	@ (800e4fc <__ssvfiscanf_r+0x2b0>)
 800e266:	4fa6      	ldr	r7, [pc, #664]	@ (800e500 <__ssvfiscanf_r+0x2b4>)
 800e268:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800e26c:	4606      	mov	r6, r0
 800e26e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	f892 9000 	ldrb.w	r9, [r2]
 800e276:	f1b9 0f00 	cmp.w	r9, #0
 800e27a:	f000 8158 	beq.w	800e52e <__ssvfiscanf_r+0x2e2>
 800e27e:	f817 3009 	ldrb.w	r3, [r7, r9]
 800e282:	f013 0308 	ands.w	r3, r3, #8
 800e286:	f102 0501 	add.w	r5, r2, #1
 800e28a:	d019      	beq.n	800e2c0 <__ssvfiscanf_r+0x74>
 800e28c:	6863      	ldr	r3, [r4, #4]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	dd0f      	ble.n	800e2b2 <__ssvfiscanf_r+0x66>
 800e292:	6823      	ldr	r3, [r4, #0]
 800e294:	781a      	ldrb	r2, [r3, #0]
 800e296:	5cba      	ldrb	r2, [r7, r2]
 800e298:	0712      	lsls	r2, r2, #28
 800e29a:	d401      	bmi.n	800e2a0 <__ssvfiscanf_r+0x54>
 800e29c:	462a      	mov	r2, r5
 800e29e:	e7e8      	b.n	800e272 <__ssvfiscanf_r+0x26>
 800e2a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e2a2:	3201      	adds	r2, #1
 800e2a4:	9245      	str	r2, [sp, #276]	@ 0x114
 800e2a6:	6862      	ldr	r2, [r4, #4]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	3a01      	subs	r2, #1
 800e2ac:	6062      	str	r2, [r4, #4]
 800e2ae:	6023      	str	r3, [r4, #0]
 800e2b0:	e7ec      	b.n	800e28c <__ssvfiscanf_r+0x40>
 800e2b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e2b4:	4621      	mov	r1, r4
 800e2b6:	4630      	mov	r0, r6
 800e2b8:	4798      	blx	r3
 800e2ba:	2800      	cmp	r0, #0
 800e2bc:	d0e9      	beq.n	800e292 <__ssvfiscanf_r+0x46>
 800e2be:	e7ed      	b.n	800e29c <__ssvfiscanf_r+0x50>
 800e2c0:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800e2c4:	f040 8085 	bne.w	800e3d2 <__ssvfiscanf_r+0x186>
 800e2c8:	9341      	str	r3, [sp, #260]	@ 0x104
 800e2ca:	9343      	str	r3, [sp, #268]	@ 0x10c
 800e2cc:	7853      	ldrb	r3, [r2, #1]
 800e2ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800e2d0:	bf02      	ittt	eq
 800e2d2:	2310      	moveq	r3, #16
 800e2d4:	1c95      	addeq	r5, r2, #2
 800e2d6:	9341      	streq	r3, [sp, #260]	@ 0x104
 800e2d8:	220a      	movs	r2, #10
 800e2da:	46aa      	mov	sl, r5
 800e2dc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800e2e0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800e2e4:	2b09      	cmp	r3, #9
 800e2e6:	d91e      	bls.n	800e326 <__ssvfiscanf_r+0xda>
 800e2e8:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800e504 <__ssvfiscanf_r+0x2b8>
 800e2ec:	2203      	movs	r2, #3
 800e2ee:	4658      	mov	r0, fp
 800e2f0:	f7f1 ff96 	bl	8000220 <memchr>
 800e2f4:	b138      	cbz	r0, 800e306 <__ssvfiscanf_r+0xba>
 800e2f6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e2f8:	eba0 000b 	sub.w	r0, r0, fp
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	4083      	lsls	r3, r0
 800e300:	4313      	orrs	r3, r2
 800e302:	9341      	str	r3, [sp, #260]	@ 0x104
 800e304:	4655      	mov	r5, sl
 800e306:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e30a:	2b78      	cmp	r3, #120	@ 0x78
 800e30c:	d806      	bhi.n	800e31c <__ssvfiscanf_r+0xd0>
 800e30e:	2b57      	cmp	r3, #87	@ 0x57
 800e310:	d810      	bhi.n	800e334 <__ssvfiscanf_r+0xe8>
 800e312:	2b25      	cmp	r3, #37	@ 0x25
 800e314:	d05d      	beq.n	800e3d2 <__ssvfiscanf_r+0x186>
 800e316:	d857      	bhi.n	800e3c8 <__ssvfiscanf_r+0x17c>
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d075      	beq.n	800e408 <__ssvfiscanf_r+0x1bc>
 800e31c:	2303      	movs	r3, #3
 800e31e:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e320:	230a      	movs	r3, #10
 800e322:	9342      	str	r3, [sp, #264]	@ 0x108
 800e324:	e088      	b.n	800e438 <__ssvfiscanf_r+0x1ec>
 800e326:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800e328:	fb02 1103 	mla	r1, r2, r3, r1
 800e32c:	3930      	subs	r1, #48	@ 0x30
 800e32e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800e330:	4655      	mov	r5, sl
 800e332:	e7d2      	b.n	800e2da <__ssvfiscanf_r+0x8e>
 800e334:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800e338:	2a20      	cmp	r2, #32
 800e33a:	d8ef      	bhi.n	800e31c <__ssvfiscanf_r+0xd0>
 800e33c:	a101      	add	r1, pc, #4	@ (adr r1, 800e344 <__ssvfiscanf_r+0xf8>)
 800e33e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e342:	bf00      	nop
 800e344:	0800e417 	.word	0x0800e417
 800e348:	0800e31d 	.word	0x0800e31d
 800e34c:	0800e31d 	.word	0x0800e31d
 800e350:	0800e471 	.word	0x0800e471
 800e354:	0800e31d 	.word	0x0800e31d
 800e358:	0800e31d 	.word	0x0800e31d
 800e35c:	0800e31d 	.word	0x0800e31d
 800e360:	0800e31d 	.word	0x0800e31d
 800e364:	0800e31d 	.word	0x0800e31d
 800e368:	0800e31d 	.word	0x0800e31d
 800e36c:	0800e31d 	.word	0x0800e31d
 800e370:	0800e487 	.word	0x0800e487
 800e374:	0800e46d 	.word	0x0800e46d
 800e378:	0800e3cf 	.word	0x0800e3cf
 800e37c:	0800e3cf 	.word	0x0800e3cf
 800e380:	0800e3cf 	.word	0x0800e3cf
 800e384:	0800e31d 	.word	0x0800e31d
 800e388:	0800e429 	.word	0x0800e429
 800e38c:	0800e31d 	.word	0x0800e31d
 800e390:	0800e31d 	.word	0x0800e31d
 800e394:	0800e31d 	.word	0x0800e31d
 800e398:	0800e31d 	.word	0x0800e31d
 800e39c:	0800e497 	.word	0x0800e497
 800e3a0:	0800e431 	.word	0x0800e431
 800e3a4:	0800e40f 	.word	0x0800e40f
 800e3a8:	0800e31d 	.word	0x0800e31d
 800e3ac:	0800e31d 	.word	0x0800e31d
 800e3b0:	0800e493 	.word	0x0800e493
 800e3b4:	0800e31d 	.word	0x0800e31d
 800e3b8:	0800e46d 	.word	0x0800e46d
 800e3bc:	0800e31d 	.word	0x0800e31d
 800e3c0:	0800e31d 	.word	0x0800e31d
 800e3c4:	0800e417 	.word	0x0800e417
 800e3c8:	3b45      	subs	r3, #69	@ 0x45
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d8a6      	bhi.n	800e31c <__ssvfiscanf_r+0xd0>
 800e3ce:	2305      	movs	r3, #5
 800e3d0:	e031      	b.n	800e436 <__ssvfiscanf_r+0x1ea>
 800e3d2:	6863      	ldr	r3, [r4, #4]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	dd0d      	ble.n	800e3f4 <__ssvfiscanf_r+0x1a8>
 800e3d8:	6823      	ldr	r3, [r4, #0]
 800e3da:	781a      	ldrb	r2, [r3, #0]
 800e3dc:	454a      	cmp	r2, r9
 800e3de:	f040 80a6 	bne.w	800e52e <__ssvfiscanf_r+0x2e2>
 800e3e2:	3301      	adds	r3, #1
 800e3e4:	6862      	ldr	r2, [r4, #4]
 800e3e6:	6023      	str	r3, [r4, #0]
 800e3e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800e3ea:	3a01      	subs	r2, #1
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	6062      	str	r2, [r4, #4]
 800e3f0:	9345      	str	r3, [sp, #276]	@ 0x114
 800e3f2:	e753      	b.n	800e29c <__ssvfiscanf_r+0x50>
 800e3f4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	4798      	blx	r3
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d0eb      	beq.n	800e3d8 <__ssvfiscanf_r+0x18c>
 800e400:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e402:	2800      	cmp	r0, #0
 800e404:	f040 808b 	bne.w	800e51e <__ssvfiscanf_r+0x2d2>
 800e408:	f04f 30ff 	mov.w	r0, #4294967295
 800e40c:	e08b      	b.n	800e526 <__ssvfiscanf_r+0x2da>
 800e40e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e410:	f042 0220 	orr.w	r2, r2, #32
 800e414:	9241      	str	r2, [sp, #260]	@ 0x104
 800e416:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800e418:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e41c:	9241      	str	r2, [sp, #260]	@ 0x104
 800e41e:	2210      	movs	r2, #16
 800e420:	2b6e      	cmp	r3, #110	@ 0x6e
 800e422:	9242      	str	r2, [sp, #264]	@ 0x108
 800e424:	d902      	bls.n	800e42c <__ssvfiscanf_r+0x1e0>
 800e426:	e005      	b.n	800e434 <__ssvfiscanf_r+0x1e8>
 800e428:	2300      	movs	r3, #0
 800e42a:	9342      	str	r3, [sp, #264]	@ 0x108
 800e42c:	2303      	movs	r3, #3
 800e42e:	e002      	b.n	800e436 <__ssvfiscanf_r+0x1ea>
 800e430:	2308      	movs	r3, #8
 800e432:	9342      	str	r3, [sp, #264]	@ 0x108
 800e434:	2304      	movs	r3, #4
 800e436:	9347      	str	r3, [sp, #284]	@ 0x11c
 800e438:	6863      	ldr	r3, [r4, #4]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	dd39      	ble.n	800e4b2 <__ssvfiscanf_r+0x266>
 800e43e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e440:	0659      	lsls	r1, r3, #25
 800e442:	d404      	bmi.n	800e44e <__ssvfiscanf_r+0x202>
 800e444:	6823      	ldr	r3, [r4, #0]
 800e446:	781a      	ldrb	r2, [r3, #0]
 800e448:	5cba      	ldrb	r2, [r7, r2]
 800e44a:	0712      	lsls	r2, r2, #28
 800e44c:	d438      	bmi.n	800e4c0 <__ssvfiscanf_r+0x274>
 800e44e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800e450:	2b02      	cmp	r3, #2
 800e452:	dc47      	bgt.n	800e4e4 <__ssvfiscanf_r+0x298>
 800e454:	466b      	mov	r3, sp
 800e456:	4622      	mov	r2, r4
 800e458:	a941      	add	r1, sp, #260	@ 0x104
 800e45a:	4630      	mov	r0, r6
 800e45c:	f000 f9f8 	bl	800e850 <_scanf_chars>
 800e460:	2801      	cmp	r0, #1
 800e462:	d064      	beq.n	800e52e <__ssvfiscanf_r+0x2e2>
 800e464:	2802      	cmp	r0, #2
 800e466:	f47f af19 	bne.w	800e29c <__ssvfiscanf_r+0x50>
 800e46a:	e7c9      	b.n	800e400 <__ssvfiscanf_r+0x1b4>
 800e46c:	220a      	movs	r2, #10
 800e46e:	e7d7      	b.n	800e420 <__ssvfiscanf_r+0x1d4>
 800e470:	4629      	mov	r1, r5
 800e472:	4640      	mov	r0, r8
 800e474:	f000 fb3a 	bl	800eaec <__sccl>
 800e478:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e47a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e47e:	9341      	str	r3, [sp, #260]	@ 0x104
 800e480:	4605      	mov	r5, r0
 800e482:	2301      	movs	r3, #1
 800e484:	e7d7      	b.n	800e436 <__ssvfiscanf_r+0x1ea>
 800e486:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800e488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e48c:	9341      	str	r3, [sp, #260]	@ 0x104
 800e48e:	2300      	movs	r3, #0
 800e490:	e7d1      	b.n	800e436 <__ssvfiscanf_r+0x1ea>
 800e492:	2302      	movs	r3, #2
 800e494:	e7cf      	b.n	800e436 <__ssvfiscanf_r+0x1ea>
 800e496:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800e498:	06c3      	lsls	r3, r0, #27
 800e49a:	f53f aeff 	bmi.w	800e29c <__ssvfiscanf_r+0x50>
 800e49e:	9b00      	ldr	r3, [sp, #0]
 800e4a0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e4a2:	1d19      	adds	r1, r3, #4
 800e4a4:	9100      	str	r1, [sp, #0]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	07c0      	lsls	r0, r0, #31
 800e4aa:	bf4c      	ite	mi
 800e4ac:	801a      	strhmi	r2, [r3, #0]
 800e4ae:	601a      	strpl	r2, [r3, #0]
 800e4b0:	e6f4      	b.n	800e29c <__ssvfiscanf_r+0x50>
 800e4b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	4630      	mov	r0, r6
 800e4b8:	4798      	blx	r3
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d0bf      	beq.n	800e43e <__ssvfiscanf_r+0x1f2>
 800e4be:	e79f      	b.n	800e400 <__ssvfiscanf_r+0x1b4>
 800e4c0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800e4c2:	3201      	adds	r2, #1
 800e4c4:	9245      	str	r2, [sp, #276]	@ 0x114
 800e4c6:	6862      	ldr	r2, [r4, #4]
 800e4c8:	3a01      	subs	r2, #1
 800e4ca:	2a00      	cmp	r2, #0
 800e4cc:	6062      	str	r2, [r4, #4]
 800e4ce:	dd02      	ble.n	800e4d6 <__ssvfiscanf_r+0x28a>
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	6023      	str	r3, [r4, #0]
 800e4d4:	e7b6      	b.n	800e444 <__ssvfiscanf_r+0x1f8>
 800e4d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800e4d8:	4621      	mov	r1, r4
 800e4da:	4630      	mov	r0, r6
 800e4dc:	4798      	blx	r3
 800e4de:	2800      	cmp	r0, #0
 800e4e0:	d0b0      	beq.n	800e444 <__ssvfiscanf_r+0x1f8>
 800e4e2:	e78d      	b.n	800e400 <__ssvfiscanf_r+0x1b4>
 800e4e4:	2b04      	cmp	r3, #4
 800e4e6:	dc0f      	bgt.n	800e508 <__ssvfiscanf_r+0x2bc>
 800e4e8:	466b      	mov	r3, sp
 800e4ea:	4622      	mov	r2, r4
 800e4ec:	a941      	add	r1, sp, #260	@ 0x104
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f000 fa08 	bl	800e904 <_scanf_i>
 800e4f4:	e7b4      	b.n	800e460 <__ssvfiscanf_r+0x214>
 800e4f6:	bf00      	nop
 800e4f8:	0800e199 	.word	0x0800e199
 800e4fc:	0800e213 	.word	0x0800e213
 800e500:	0804aa5f 	.word	0x0804aa5f
 800e504:	0804aa16 	.word	0x0804aa16
 800e508:	4b0a      	ldr	r3, [pc, #40]	@ (800e534 <__ssvfiscanf_r+0x2e8>)
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f43f aec6 	beq.w	800e29c <__ssvfiscanf_r+0x50>
 800e510:	466b      	mov	r3, sp
 800e512:	4622      	mov	r2, r4
 800e514:	a941      	add	r1, sp, #260	@ 0x104
 800e516:	4630      	mov	r0, r6
 800e518:	f3af 8000 	nop.w
 800e51c:	e7a0      	b.n	800e460 <__ssvfiscanf_r+0x214>
 800e51e:	89a3      	ldrh	r3, [r4, #12]
 800e520:	065b      	lsls	r3, r3, #25
 800e522:	f53f af71 	bmi.w	800e408 <__ssvfiscanf_r+0x1bc>
 800e526:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800e52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800e530:	e7f9      	b.n	800e526 <__ssvfiscanf_r+0x2da>
 800e532:	bf00      	nop
 800e534:	00000000 	.word	0x00000000

0800e538 <_printf_common>:
 800e538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e53c:	4616      	mov	r6, r2
 800e53e:	4698      	mov	r8, r3
 800e540:	688a      	ldr	r2, [r1, #8]
 800e542:	690b      	ldr	r3, [r1, #16]
 800e544:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e548:	4293      	cmp	r3, r2
 800e54a:	bfb8      	it	lt
 800e54c:	4613      	movlt	r3, r2
 800e54e:	6033      	str	r3, [r6, #0]
 800e550:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e554:	4607      	mov	r7, r0
 800e556:	460c      	mov	r4, r1
 800e558:	b10a      	cbz	r2, 800e55e <_printf_common+0x26>
 800e55a:	3301      	adds	r3, #1
 800e55c:	6033      	str	r3, [r6, #0]
 800e55e:	6823      	ldr	r3, [r4, #0]
 800e560:	0699      	lsls	r1, r3, #26
 800e562:	bf42      	ittt	mi
 800e564:	6833      	ldrmi	r3, [r6, #0]
 800e566:	3302      	addmi	r3, #2
 800e568:	6033      	strmi	r3, [r6, #0]
 800e56a:	6825      	ldr	r5, [r4, #0]
 800e56c:	f015 0506 	ands.w	r5, r5, #6
 800e570:	d106      	bne.n	800e580 <_printf_common+0x48>
 800e572:	f104 0a19 	add.w	sl, r4, #25
 800e576:	68e3      	ldr	r3, [r4, #12]
 800e578:	6832      	ldr	r2, [r6, #0]
 800e57a:	1a9b      	subs	r3, r3, r2
 800e57c:	42ab      	cmp	r3, r5
 800e57e:	dc26      	bgt.n	800e5ce <_printf_common+0x96>
 800e580:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e584:	6822      	ldr	r2, [r4, #0]
 800e586:	3b00      	subs	r3, #0
 800e588:	bf18      	it	ne
 800e58a:	2301      	movne	r3, #1
 800e58c:	0692      	lsls	r2, r2, #26
 800e58e:	d42b      	bmi.n	800e5e8 <_printf_common+0xb0>
 800e590:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e594:	4641      	mov	r1, r8
 800e596:	4638      	mov	r0, r7
 800e598:	47c8      	blx	r9
 800e59a:	3001      	adds	r0, #1
 800e59c:	d01e      	beq.n	800e5dc <_printf_common+0xa4>
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	6922      	ldr	r2, [r4, #16]
 800e5a2:	f003 0306 	and.w	r3, r3, #6
 800e5a6:	2b04      	cmp	r3, #4
 800e5a8:	bf02      	ittt	eq
 800e5aa:	68e5      	ldreq	r5, [r4, #12]
 800e5ac:	6833      	ldreq	r3, [r6, #0]
 800e5ae:	1aed      	subeq	r5, r5, r3
 800e5b0:	68a3      	ldr	r3, [r4, #8]
 800e5b2:	bf0c      	ite	eq
 800e5b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5b8:	2500      	movne	r5, #0
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	bfc4      	itt	gt
 800e5be:	1a9b      	subgt	r3, r3, r2
 800e5c0:	18ed      	addgt	r5, r5, r3
 800e5c2:	2600      	movs	r6, #0
 800e5c4:	341a      	adds	r4, #26
 800e5c6:	42b5      	cmp	r5, r6
 800e5c8:	d11a      	bne.n	800e600 <_printf_common+0xc8>
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	e008      	b.n	800e5e0 <_printf_common+0xa8>
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	4652      	mov	r2, sl
 800e5d2:	4641      	mov	r1, r8
 800e5d4:	4638      	mov	r0, r7
 800e5d6:	47c8      	blx	r9
 800e5d8:	3001      	adds	r0, #1
 800e5da:	d103      	bne.n	800e5e4 <_printf_common+0xac>
 800e5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5e4:	3501      	adds	r5, #1
 800e5e6:	e7c6      	b.n	800e576 <_printf_common+0x3e>
 800e5e8:	18e1      	adds	r1, r4, r3
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	2030      	movs	r0, #48	@ 0x30
 800e5ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e5f2:	4422      	add	r2, r4
 800e5f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e5f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e5fc:	3302      	adds	r3, #2
 800e5fe:	e7c7      	b.n	800e590 <_printf_common+0x58>
 800e600:	2301      	movs	r3, #1
 800e602:	4622      	mov	r2, r4
 800e604:	4641      	mov	r1, r8
 800e606:	4638      	mov	r0, r7
 800e608:	47c8      	blx	r9
 800e60a:	3001      	adds	r0, #1
 800e60c:	d0e6      	beq.n	800e5dc <_printf_common+0xa4>
 800e60e:	3601      	adds	r6, #1
 800e610:	e7d9      	b.n	800e5c6 <_printf_common+0x8e>
	...

0800e614 <_printf_i>:
 800e614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e618:	7e0f      	ldrb	r7, [r1, #24]
 800e61a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e61c:	2f78      	cmp	r7, #120	@ 0x78
 800e61e:	4691      	mov	r9, r2
 800e620:	4680      	mov	r8, r0
 800e622:	460c      	mov	r4, r1
 800e624:	469a      	mov	sl, r3
 800e626:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e62a:	d807      	bhi.n	800e63c <_printf_i+0x28>
 800e62c:	2f62      	cmp	r7, #98	@ 0x62
 800e62e:	d80a      	bhi.n	800e646 <_printf_i+0x32>
 800e630:	2f00      	cmp	r7, #0
 800e632:	f000 80d1 	beq.w	800e7d8 <_printf_i+0x1c4>
 800e636:	2f58      	cmp	r7, #88	@ 0x58
 800e638:	f000 80b8 	beq.w	800e7ac <_printf_i+0x198>
 800e63c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e640:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e644:	e03a      	b.n	800e6bc <_printf_i+0xa8>
 800e646:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e64a:	2b15      	cmp	r3, #21
 800e64c:	d8f6      	bhi.n	800e63c <_printf_i+0x28>
 800e64e:	a101      	add	r1, pc, #4	@ (adr r1, 800e654 <_printf_i+0x40>)
 800e650:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e654:	0800e6ad 	.word	0x0800e6ad
 800e658:	0800e6c1 	.word	0x0800e6c1
 800e65c:	0800e63d 	.word	0x0800e63d
 800e660:	0800e63d 	.word	0x0800e63d
 800e664:	0800e63d 	.word	0x0800e63d
 800e668:	0800e63d 	.word	0x0800e63d
 800e66c:	0800e6c1 	.word	0x0800e6c1
 800e670:	0800e63d 	.word	0x0800e63d
 800e674:	0800e63d 	.word	0x0800e63d
 800e678:	0800e63d 	.word	0x0800e63d
 800e67c:	0800e63d 	.word	0x0800e63d
 800e680:	0800e7bf 	.word	0x0800e7bf
 800e684:	0800e6eb 	.word	0x0800e6eb
 800e688:	0800e779 	.word	0x0800e779
 800e68c:	0800e63d 	.word	0x0800e63d
 800e690:	0800e63d 	.word	0x0800e63d
 800e694:	0800e7e1 	.word	0x0800e7e1
 800e698:	0800e63d 	.word	0x0800e63d
 800e69c:	0800e6eb 	.word	0x0800e6eb
 800e6a0:	0800e63d 	.word	0x0800e63d
 800e6a4:	0800e63d 	.word	0x0800e63d
 800e6a8:	0800e781 	.word	0x0800e781
 800e6ac:	6833      	ldr	r3, [r6, #0]
 800e6ae:	1d1a      	adds	r2, r3, #4
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6032      	str	r2, [r6, #0]
 800e6b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e6b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e09c      	b.n	800e7fa <_printf_i+0x1e6>
 800e6c0:	6833      	ldr	r3, [r6, #0]
 800e6c2:	6820      	ldr	r0, [r4, #0]
 800e6c4:	1d19      	adds	r1, r3, #4
 800e6c6:	6031      	str	r1, [r6, #0]
 800e6c8:	0606      	lsls	r6, r0, #24
 800e6ca:	d501      	bpl.n	800e6d0 <_printf_i+0xbc>
 800e6cc:	681d      	ldr	r5, [r3, #0]
 800e6ce:	e003      	b.n	800e6d8 <_printf_i+0xc4>
 800e6d0:	0645      	lsls	r5, r0, #25
 800e6d2:	d5fb      	bpl.n	800e6cc <_printf_i+0xb8>
 800e6d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e6d8:	2d00      	cmp	r5, #0
 800e6da:	da03      	bge.n	800e6e4 <_printf_i+0xd0>
 800e6dc:	232d      	movs	r3, #45	@ 0x2d
 800e6de:	426d      	negs	r5, r5
 800e6e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e6e4:	4858      	ldr	r0, [pc, #352]	@ (800e848 <_printf_i+0x234>)
 800e6e6:	230a      	movs	r3, #10
 800e6e8:	e011      	b.n	800e70e <_printf_i+0xfa>
 800e6ea:	6821      	ldr	r1, [r4, #0]
 800e6ec:	6833      	ldr	r3, [r6, #0]
 800e6ee:	0608      	lsls	r0, r1, #24
 800e6f0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e6f4:	d402      	bmi.n	800e6fc <_printf_i+0xe8>
 800e6f6:	0649      	lsls	r1, r1, #25
 800e6f8:	bf48      	it	mi
 800e6fa:	b2ad      	uxthmi	r5, r5
 800e6fc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e6fe:	4852      	ldr	r0, [pc, #328]	@ (800e848 <_printf_i+0x234>)
 800e700:	6033      	str	r3, [r6, #0]
 800e702:	bf14      	ite	ne
 800e704:	230a      	movne	r3, #10
 800e706:	2308      	moveq	r3, #8
 800e708:	2100      	movs	r1, #0
 800e70a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e70e:	6866      	ldr	r6, [r4, #4]
 800e710:	60a6      	str	r6, [r4, #8]
 800e712:	2e00      	cmp	r6, #0
 800e714:	db05      	blt.n	800e722 <_printf_i+0x10e>
 800e716:	6821      	ldr	r1, [r4, #0]
 800e718:	432e      	orrs	r6, r5
 800e71a:	f021 0104 	bic.w	r1, r1, #4
 800e71e:	6021      	str	r1, [r4, #0]
 800e720:	d04b      	beq.n	800e7ba <_printf_i+0x1a6>
 800e722:	4616      	mov	r6, r2
 800e724:	fbb5 f1f3 	udiv	r1, r5, r3
 800e728:	fb03 5711 	mls	r7, r3, r1, r5
 800e72c:	5dc7      	ldrb	r7, [r0, r7]
 800e72e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e732:	462f      	mov	r7, r5
 800e734:	42bb      	cmp	r3, r7
 800e736:	460d      	mov	r5, r1
 800e738:	d9f4      	bls.n	800e724 <_printf_i+0x110>
 800e73a:	2b08      	cmp	r3, #8
 800e73c:	d10b      	bne.n	800e756 <_printf_i+0x142>
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	07df      	lsls	r7, r3, #31
 800e742:	d508      	bpl.n	800e756 <_printf_i+0x142>
 800e744:	6923      	ldr	r3, [r4, #16]
 800e746:	6861      	ldr	r1, [r4, #4]
 800e748:	4299      	cmp	r1, r3
 800e74a:	bfde      	ittt	le
 800e74c:	2330      	movle	r3, #48	@ 0x30
 800e74e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e752:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e756:	1b92      	subs	r2, r2, r6
 800e758:	6122      	str	r2, [r4, #16]
 800e75a:	f8cd a000 	str.w	sl, [sp]
 800e75e:	464b      	mov	r3, r9
 800e760:	aa03      	add	r2, sp, #12
 800e762:	4621      	mov	r1, r4
 800e764:	4640      	mov	r0, r8
 800e766:	f7ff fee7 	bl	800e538 <_printf_common>
 800e76a:	3001      	adds	r0, #1
 800e76c:	d14a      	bne.n	800e804 <_printf_i+0x1f0>
 800e76e:	f04f 30ff 	mov.w	r0, #4294967295
 800e772:	b004      	add	sp, #16
 800e774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e778:	6823      	ldr	r3, [r4, #0]
 800e77a:	f043 0320 	orr.w	r3, r3, #32
 800e77e:	6023      	str	r3, [r4, #0]
 800e780:	4832      	ldr	r0, [pc, #200]	@ (800e84c <_printf_i+0x238>)
 800e782:	2778      	movs	r7, #120	@ 0x78
 800e784:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	6831      	ldr	r1, [r6, #0]
 800e78c:	061f      	lsls	r7, r3, #24
 800e78e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e792:	d402      	bmi.n	800e79a <_printf_i+0x186>
 800e794:	065f      	lsls	r7, r3, #25
 800e796:	bf48      	it	mi
 800e798:	b2ad      	uxthmi	r5, r5
 800e79a:	6031      	str	r1, [r6, #0]
 800e79c:	07d9      	lsls	r1, r3, #31
 800e79e:	bf44      	itt	mi
 800e7a0:	f043 0320 	orrmi.w	r3, r3, #32
 800e7a4:	6023      	strmi	r3, [r4, #0]
 800e7a6:	b11d      	cbz	r5, 800e7b0 <_printf_i+0x19c>
 800e7a8:	2310      	movs	r3, #16
 800e7aa:	e7ad      	b.n	800e708 <_printf_i+0xf4>
 800e7ac:	4826      	ldr	r0, [pc, #152]	@ (800e848 <_printf_i+0x234>)
 800e7ae:	e7e9      	b.n	800e784 <_printf_i+0x170>
 800e7b0:	6823      	ldr	r3, [r4, #0]
 800e7b2:	f023 0320 	bic.w	r3, r3, #32
 800e7b6:	6023      	str	r3, [r4, #0]
 800e7b8:	e7f6      	b.n	800e7a8 <_printf_i+0x194>
 800e7ba:	4616      	mov	r6, r2
 800e7bc:	e7bd      	b.n	800e73a <_printf_i+0x126>
 800e7be:	6833      	ldr	r3, [r6, #0]
 800e7c0:	6825      	ldr	r5, [r4, #0]
 800e7c2:	6961      	ldr	r1, [r4, #20]
 800e7c4:	1d18      	adds	r0, r3, #4
 800e7c6:	6030      	str	r0, [r6, #0]
 800e7c8:	062e      	lsls	r6, r5, #24
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	d501      	bpl.n	800e7d2 <_printf_i+0x1be>
 800e7ce:	6019      	str	r1, [r3, #0]
 800e7d0:	e002      	b.n	800e7d8 <_printf_i+0x1c4>
 800e7d2:	0668      	lsls	r0, r5, #25
 800e7d4:	d5fb      	bpl.n	800e7ce <_printf_i+0x1ba>
 800e7d6:	8019      	strh	r1, [r3, #0]
 800e7d8:	2300      	movs	r3, #0
 800e7da:	6123      	str	r3, [r4, #16]
 800e7dc:	4616      	mov	r6, r2
 800e7de:	e7bc      	b.n	800e75a <_printf_i+0x146>
 800e7e0:	6833      	ldr	r3, [r6, #0]
 800e7e2:	1d1a      	adds	r2, r3, #4
 800e7e4:	6032      	str	r2, [r6, #0]
 800e7e6:	681e      	ldr	r6, [r3, #0]
 800e7e8:	6862      	ldr	r2, [r4, #4]
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f7f1 fd17 	bl	8000220 <memchr>
 800e7f2:	b108      	cbz	r0, 800e7f8 <_printf_i+0x1e4>
 800e7f4:	1b80      	subs	r0, r0, r6
 800e7f6:	6060      	str	r0, [r4, #4]
 800e7f8:	6863      	ldr	r3, [r4, #4]
 800e7fa:	6123      	str	r3, [r4, #16]
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e802:	e7aa      	b.n	800e75a <_printf_i+0x146>
 800e804:	6923      	ldr	r3, [r4, #16]
 800e806:	4632      	mov	r2, r6
 800e808:	4649      	mov	r1, r9
 800e80a:	4640      	mov	r0, r8
 800e80c:	47d0      	blx	sl
 800e80e:	3001      	adds	r0, #1
 800e810:	d0ad      	beq.n	800e76e <_printf_i+0x15a>
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	079b      	lsls	r3, r3, #30
 800e816:	d413      	bmi.n	800e840 <_printf_i+0x22c>
 800e818:	68e0      	ldr	r0, [r4, #12]
 800e81a:	9b03      	ldr	r3, [sp, #12]
 800e81c:	4298      	cmp	r0, r3
 800e81e:	bfb8      	it	lt
 800e820:	4618      	movlt	r0, r3
 800e822:	e7a6      	b.n	800e772 <_printf_i+0x15e>
 800e824:	2301      	movs	r3, #1
 800e826:	4632      	mov	r2, r6
 800e828:	4649      	mov	r1, r9
 800e82a:	4640      	mov	r0, r8
 800e82c:	47d0      	blx	sl
 800e82e:	3001      	adds	r0, #1
 800e830:	d09d      	beq.n	800e76e <_printf_i+0x15a>
 800e832:	3501      	adds	r5, #1
 800e834:	68e3      	ldr	r3, [r4, #12]
 800e836:	9903      	ldr	r1, [sp, #12]
 800e838:	1a5b      	subs	r3, r3, r1
 800e83a:	42ab      	cmp	r3, r5
 800e83c:	dcf2      	bgt.n	800e824 <_printf_i+0x210>
 800e83e:	e7eb      	b.n	800e818 <_printf_i+0x204>
 800e840:	2500      	movs	r5, #0
 800e842:	f104 0619 	add.w	r6, r4, #25
 800e846:	e7f5      	b.n	800e834 <_printf_i+0x220>
 800e848:	0804aa21 	.word	0x0804aa21
 800e84c:	0804aa32 	.word	0x0804aa32

0800e850 <_scanf_chars>:
 800e850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e854:	4615      	mov	r5, r2
 800e856:	688a      	ldr	r2, [r1, #8]
 800e858:	4680      	mov	r8, r0
 800e85a:	460c      	mov	r4, r1
 800e85c:	b932      	cbnz	r2, 800e86c <_scanf_chars+0x1c>
 800e85e:	698a      	ldr	r2, [r1, #24]
 800e860:	2a00      	cmp	r2, #0
 800e862:	bf14      	ite	ne
 800e864:	f04f 32ff 	movne.w	r2, #4294967295
 800e868:	2201      	moveq	r2, #1
 800e86a:	608a      	str	r2, [r1, #8]
 800e86c:	6822      	ldr	r2, [r4, #0]
 800e86e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800e900 <_scanf_chars+0xb0>
 800e872:	06d1      	lsls	r1, r2, #27
 800e874:	bf5f      	itttt	pl
 800e876:	681a      	ldrpl	r2, [r3, #0]
 800e878:	1d11      	addpl	r1, r2, #4
 800e87a:	6019      	strpl	r1, [r3, #0]
 800e87c:	6816      	ldrpl	r6, [r2, #0]
 800e87e:	2700      	movs	r7, #0
 800e880:	69a0      	ldr	r0, [r4, #24]
 800e882:	b188      	cbz	r0, 800e8a8 <_scanf_chars+0x58>
 800e884:	2801      	cmp	r0, #1
 800e886:	d107      	bne.n	800e898 <_scanf_chars+0x48>
 800e888:	682b      	ldr	r3, [r5, #0]
 800e88a:	781a      	ldrb	r2, [r3, #0]
 800e88c:	6963      	ldr	r3, [r4, #20]
 800e88e:	5c9b      	ldrb	r3, [r3, r2]
 800e890:	b953      	cbnz	r3, 800e8a8 <_scanf_chars+0x58>
 800e892:	2f00      	cmp	r7, #0
 800e894:	d031      	beq.n	800e8fa <_scanf_chars+0xaa>
 800e896:	e022      	b.n	800e8de <_scanf_chars+0x8e>
 800e898:	2802      	cmp	r0, #2
 800e89a:	d120      	bne.n	800e8de <_scanf_chars+0x8e>
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f819 3003 	ldrb.w	r3, [r9, r3]
 800e8a4:	071b      	lsls	r3, r3, #28
 800e8a6:	d41a      	bmi.n	800e8de <_scanf_chars+0x8e>
 800e8a8:	6823      	ldr	r3, [r4, #0]
 800e8aa:	06da      	lsls	r2, r3, #27
 800e8ac:	bf5e      	ittt	pl
 800e8ae:	682b      	ldrpl	r3, [r5, #0]
 800e8b0:	781b      	ldrbpl	r3, [r3, #0]
 800e8b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 800e8b6:	682a      	ldr	r2, [r5, #0]
 800e8b8:	686b      	ldr	r3, [r5, #4]
 800e8ba:	3201      	adds	r2, #1
 800e8bc:	602a      	str	r2, [r5, #0]
 800e8be:	68a2      	ldr	r2, [r4, #8]
 800e8c0:	3b01      	subs	r3, #1
 800e8c2:	3a01      	subs	r2, #1
 800e8c4:	606b      	str	r3, [r5, #4]
 800e8c6:	3701      	adds	r7, #1
 800e8c8:	60a2      	str	r2, [r4, #8]
 800e8ca:	b142      	cbz	r2, 800e8de <_scanf_chars+0x8e>
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	dcd7      	bgt.n	800e880 <_scanf_chars+0x30>
 800e8d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e8d4:	4629      	mov	r1, r5
 800e8d6:	4640      	mov	r0, r8
 800e8d8:	4798      	blx	r3
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d0d0      	beq.n	800e880 <_scanf_chars+0x30>
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	f013 0310 	ands.w	r3, r3, #16
 800e8e4:	d105      	bne.n	800e8f2 <_scanf_chars+0xa2>
 800e8e6:	68e2      	ldr	r2, [r4, #12]
 800e8e8:	3201      	adds	r2, #1
 800e8ea:	60e2      	str	r2, [r4, #12]
 800e8ec:	69a2      	ldr	r2, [r4, #24]
 800e8ee:	b102      	cbz	r2, 800e8f2 <_scanf_chars+0xa2>
 800e8f0:	7033      	strb	r3, [r6, #0]
 800e8f2:	6923      	ldr	r3, [r4, #16]
 800e8f4:	443b      	add	r3, r7
 800e8f6:	6123      	str	r3, [r4, #16]
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8fe:	bf00      	nop
 800e900:	0804aa5f 	.word	0x0804aa5f

0800e904 <_scanf_i>:
 800e904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e908:	4698      	mov	r8, r3
 800e90a:	4b74      	ldr	r3, [pc, #464]	@ (800eadc <_scanf_i+0x1d8>)
 800e90c:	460c      	mov	r4, r1
 800e90e:	4682      	mov	sl, r0
 800e910:	4616      	mov	r6, r2
 800e912:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e916:	b087      	sub	sp, #28
 800e918:	ab03      	add	r3, sp, #12
 800e91a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800e91e:	4b70      	ldr	r3, [pc, #448]	@ (800eae0 <_scanf_i+0x1dc>)
 800e920:	69a1      	ldr	r1, [r4, #24]
 800e922:	4a70      	ldr	r2, [pc, #448]	@ (800eae4 <_scanf_i+0x1e0>)
 800e924:	2903      	cmp	r1, #3
 800e926:	bf08      	it	eq
 800e928:	461a      	moveq	r2, r3
 800e92a:	68a3      	ldr	r3, [r4, #8]
 800e92c:	9201      	str	r2, [sp, #4]
 800e92e:	1e5a      	subs	r2, r3, #1
 800e930:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e934:	bf88      	it	hi
 800e936:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e93a:	4627      	mov	r7, r4
 800e93c:	bf82      	ittt	hi
 800e93e:	eb03 0905 	addhi.w	r9, r3, r5
 800e942:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e946:	60a3      	strhi	r3, [r4, #8]
 800e948:	f857 3b1c 	ldr.w	r3, [r7], #28
 800e94c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800e950:	bf98      	it	ls
 800e952:	f04f 0900 	movls.w	r9, #0
 800e956:	6023      	str	r3, [r4, #0]
 800e958:	463d      	mov	r5, r7
 800e95a:	f04f 0b00 	mov.w	fp, #0
 800e95e:	6831      	ldr	r1, [r6, #0]
 800e960:	ab03      	add	r3, sp, #12
 800e962:	7809      	ldrb	r1, [r1, #0]
 800e964:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800e968:	2202      	movs	r2, #2
 800e96a:	f7f1 fc59 	bl	8000220 <memchr>
 800e96e:	b328      	cbz	r0, 800e9bc <_scanf_i+0xb8>
 800e970:	f1bb 0f01 	cmp.w	fp, #1
 800e974:	d159      	bne.n	800ea2a <_scanf_i+0x126>
 800e976:	6862      	ldr	r2, [r4, #4]
 800e978:	b92a      	cbnz	r2, 800e986 <_scanf_i+0x82>
 800e97a:	6822      	ldr	r2, [r4, #0]
 800e97c:	2108      	movs	r1, #8
 800e97e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e982:	6061      	str	r1, [r4, #4]
 800e984:	6022      	str	r2, [r4, #0]
 800e986:	6822      	ldr	r2, [r4, #0]
 800e988:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800e98c:	6022      	str	r2, [r4, #0]
 800e98e:	68a2      	ldr	r2, [r4, #8]
 800e990:	1e51      	subs	r1, r2, #1
 800e992:	60a1      	str	r1, [r4, #8]
 800e994:	b192      	cbz	r2, 800e9bc <_scanf_i+0xb8>
 800e996:	6832      	ldr	r2, [r6, #0]
 800e998:	1c51      	adds	r1, r2, #1
 800e99a:	6031      	str	r1, [r6, #0]
 800e99c:	7812      	ldrb	r2, [r2, #0]
 800e99e:	f805 2b01 	strb.w	r2, [r5], #1
 800e9a2:	6872      	ldr	r2, [r6, #4]
 800e9a4:	3a01      	subs	r2, #1
 800e9a6:	2a00      	cmp	r2, #0
 800e9a8:	6072      	str	r2, [r6, #4]
 800e9aa:	dc07      	bgt.n	800e9bc <_scanf_i+0xb8>
 800e9ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800e9b0:	4631      	mov	r1, r6
 800e9b2:	4650      	mov	r0, sl
 800e9b4:	4790      	blx	r2
 800e9b6:	2800      	cmp	r0, #0
 800e9b8:	f040 8085 	bne.w	800eac6 <_scanf_i+0x1c2>
 800e9bc:	f10b 0b01 	add.w	fp, fp, #1
 800e9c0:	f1bb 0f03 	cmp.w	fp, #3
 800e9c4:	d1cb      	bne.n	800e95e <_scanf_i+0x5a>
 800e9c6:	6863      	ldr	r3, [r4, #4]
 800e9c8:	b90b      	cbnz	r3, 800e9ce <_scanf_i+0xca>
 800e9ca:	230a      	movs	r3, #10
 800e9cc:	6063      	str	r3, [r4, #4]
 800e9ce:	6863      	ldr	r3, [r4, #4]
 800e9d0:	4945      	ldr	r1, [pc, #276]	@ (800eae8 <_scanf_i+0x1e4>)
 800e9d2:	6960      	ldr	r0, [r4, #20]
 800e9d4:	1ac9      	subs	r1, r1, r3
 800e9d6:	f000 f889 	bl	800eaec <__sccl>
 800e9da:	f04f 0b00 	mov.w	fp, #0
 800e9de:	68a3      	ldr	r3, [r4, #8]
 800e9e0:	6822      	ldr	r2, [r4, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d03d      	beq.n	800ea62 <_scanf_i+0x15e>
 800e9e6:	6831      	ldr	r1, [r6, #0]
 800e9e8:	6960      	ldr	r0, [r4, #20]
 800e9ea:	f891 c000 	ldrb.w	ip, [r1]
 800e9ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d035      	beq.n	800ea62 <_scanf_i+0x15e>
 800e9f6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800e9fa:	d124      	bne.n	800ea46 <_scanf_i+0x142>
 800e9fc:	0510      	lsls	r0, r2, #20
 800e9fe:	d522      	bpl.n	800ea46 <_scanf_i+0x142>
 800ea00:	f10b 0b01 	add.w	fp, fp, #1
 800ea04:	f1b9 0f00 	cmp.w	r9, #0
 800ea08:	d003      	beq.n	800ea12 <_scanf_i+0x10e>
 800ea0a:	3301      	adds	r3, #1
 800ea0c:	f109 39ff 	add.w	r9, r9, #4294967295
 800ea10:	60a3      	str	r3, [r4, #8]
 800ea12:	6873      	ldr	r3, [r6, #4]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	6073      	str	r3, [r6, #4]
 800ea1a:	dd1b      	ble.n	800ea54 <_scanf_i+0x150>
 800ea1c:	6833      	ldr	r3, [r6, #0]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	6033      	str	r3, [r6, #0]
 800ea22:	68a3      	ldr	r3, [r4, #8]
 800ea24:	3b01      	subs	r3, #1
 800ea26:	60a3      	str	r3, [r4, #8]
 800ea28:	e7d9      	b.n	800e9de <_scanf_i+0xda>
 800ea2a:	f1bb 0f02 	cmp.w	fp, #2
 800ea2e:	d1ae      	bne.n	800e98e <_scanf_i+0x8a>
 800ea30:	6822      	ldr	r2, [r4, #0]
 800ea32:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ea36:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ea3a:	d1c4      	bne.n	800e9c6 <_scanf_i+0xc2>
 800ea3c:	2110      	movs	r1, #16
 800ea3e:	6061      	str	r1, [r4, #4]
 800ea40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ea44:	e7a2      	b.n	800e98c <_scanf_i+0x88>
 800ea46:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ea4a:	6022      	str	r2, [r4, #0]
 800ea4c:	780b      	ldrb	r3, [r1, #0]
 800ea4e:	f805 3b01 	strb.w	r3, [r5], #1
 800ea52:	e7de      	b.n	800ea12 <_scanf_i+0x10e>
 800ea54:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ea58:	4631      	mov	r1, r6
 800ea5a:	4650      	mov	r0, sl
 800ea5c:	4798      	blx	r3
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d0df      	beq.n	800ea22 <_scanf_i+0x11e>
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	05d9      	lsls	r1, r3, #23
 800ea66:	d50d      	bpl.n	800ea84 <_scanf_i+0x180>
 800ea68:	42bd      	cmp	r5, r7
 800ea6a:	d909      	bls.n	800ea80 <_scanf_i+0x17c>
 800ea6c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ea70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ea74:	4632      	mov	r2, r6
 800ea76:	4650      	mov	r0, sl
 800ea78:	4798      	blx	r3
 800ea7a:	f105 39ff 	add.w	r9, r5, #4294967295
 800ea7e:	464d      	mov	r5, r9
 800ea80:	42bd      	cmp	r5, r7
 800ea82:	d028      	beq.n	800ead6 <_scanf_i+0x1d2>
 800ea84:	6822      	ldr	r2, [r4, #0]
 800ea86:	f012 0210 	ands.w	r2, r2, #16
 800ea8a:	d113      	bne.n	800eab4 <_scanf_i+0x1b0>
 800ea8c:	702a      	strb	r2, [r5, #0]
 800ea8e:	6863      	ldr	r3, [r4, #4]
 800ea90:	9e01      	ldr	r6, [sp, #4]
 800ea92:	4639      	mov	r1, r7
 800ea94:	4650      	mov	r0, sl
 800ea96:	47b0      	blx	r6
 800ea98:	f8d8 3000 	ldr.w	r3, [r8]
 800ea9c:	6821      	ldr	r1, [r4, #0]
 800ea9e:	1d1a      	adds	r2, r3, #4
 800eaa0:	f8c8 2000 	str.w	r2, [r8]
 800eaa4:	f011 0f20 	tst.w	r1, #32
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	d00f      	beq.n	800eacc <_scanf_i+0x1c8>
 800eaac:	6018      	str	r0, [r3, #0]
 800eaae:	68e3      	ldr	r3, [r4, #12]
 800eab0:	3301      	adds	r3, #1
 800eab2:	60e3      	str	r3, [r4, #12]
 800eab4:	6923      	ldr	r3, [r4, #16]
 800eab6:	1bed      	subs	r5, r5, r7
 800eab8:	445d      	add	r5, fp
 800eaba:	442b      	add	r3, r5
 800eabc:	6123      	str	r3, [r4, #16]
 800eabe:	2000      	movs	r0, #0
 800eac0:	b007      	add	sp, #28
 800eac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac6:	f04f 0b00 	mov.w	fp, #0
 800eaca:	e7ca      	b.n	800ea62 <_scanf_i+0x15e>
 800eacc:	07ca      	lsls	r2, r1, #31
 800eace:	bf4c      	ite	mi
 800ead0:	8018      	strhmi	r0, [r3, #0]
 800ead2:	6018      	strpl	r0, [r3, #0]
 800ead4:	e7eb      	b.n	800eaae <_scanf_i+0x1aa>
 800ead6:	2001      	movs	r0, #1
 800ead8:	e7f2      	b.n	800eac0 <_scanf_i+0x1bc>
 800eada:	bf00      	nop
 800eadc:	0800f85c 	.word	0x0800f85c
 800eae0:	0800ed79 	.word	0x0800ed79
 800eae4:	0800ee59 	.word	0x0800ee59
 800eae8:	0804aa53 	.word	0x0804aa53

0800eaec <__sccl>:
 800eaec:	b570      	push	{r4, r5, r6, lr}
 800eaee:	780b      	ldrb	r3, [r1, #0]
 800eaf0:	4604      	mov	r4, r0
 800eaf2:	2b5e      	cmp	r3, #94	@ 0x5e
 800eaf4:	bf0b      	itete	eq
 800eaf6:	784b      	ldrbeq	r3, [r1, #1]
 800eaf8:	1c4a      	addne	r2, r1, #1
 800eafa:	1c8a      	addeq	r2, r1, #2
 800eafc:	2100      	movne	r1, #0
 800eafe:	bf08      	it	eq
 800eb00:	2101      	moveq	r1, #1
 800eb02:	3801      	subs	r0, #1
 800eb04:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800eb08:	f800 1f01 	strb.w	r1, [r0, #1]!
 800eb0c:	42a8      	cmp	r0, r5
 800eb0e:	d1fb      	bne.n	800eb08 <__sccl+0x1c>
 800eb10:	b90b      	cbnz	r3, 800eb16 <__sccl+0x2a>
 800eb12:	1e50      	subs	r0, r2, #1
 800eb14:	bd70      	pop	{r4, r5, r6, pc}
 800eb16:	f081 0101 	eor.w	r1, r1, #1
 800eb1a:	54e1      	strb	r1, [r4, r3]
 800eb1c:	4610      	mov	r0, r2
 800eb1e:	4602      	mov	r2, r0
 800eb20:	f812 5b01 	ldrb.w	r5, [r2], #1
 800eb24:	2d2d      	cmp	r5, #45	@ 0x2d
 800eb26:	d005      	beq.n	800eb34 <__sccl+0x48>
 800eb28:	2d5d      	cmp	r5, #93	@ 0x5d
 800eb2a:	d016      	beq.n	800eb5a <__sccl+0x6e>
 800eb2c:	2d00      	cmp	r5, #0
 800eb2e:	d0f1      	beq.n	800eb14 <__sccl+0x28>
 800eb30:	462b      	mov	r3, r5
 800eb32:	e7f2      	b.n	800eb1a <__sccl+0x2e>
 800eb34:	7846      	ldrb	r6, [r0, #1]
 800eb36:	2e5d      	cmp	r6, #93	@ 0x5d
 800eb38:	d0fa      	beq.n	800eb30 <__sccl+0x44>
 800eb3a:	42b3      	cmp	r3, r6
 800eb3c:	dcf8      	bgt.n	800eb30 <__sccl+0x44>
 800eb3e:	3002      	adds	r0, #2
 800eb40:	461a      	mov	r2, r3
 800eb42:	3201      	adds	r2, #1
 800eb44:	4296      	cmp	r6, r2
 800eb46:	54a1      	strb	r1, [r4, r2]
 800eb48:	dcfb      	bgt.n	800eb42 <__sccl+0x56>
 800eb4a:	1af2      	subs	r2, r6, r3
 800eb4c:	3a01      	subs	r2, #1
 800eb4e:	1c5d      	adds	r5, r3, #1
 800eb50:	42b3      	cmp	r3, r6
 800eb52:	bfa8      	it	ge
 800eb54:	2200      	movge	r2, #0
 800eb56:	18ab      	adds	r3, r5, r2
 800eb58:	e7e1      	b.n	800eb1e <__sccl+0x32>
 800eb5a:	4610      	mov	r0, r2
 800eb5c:	e7da      	b.n	800eb14 <__sccl+0x28>

0800eb5e <__submore>:
 800eb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb62:	460c      	mov	r4, r1
 800eb64:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800eb66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb6a:	4299      	cmp	r1, r3
 800eb6c:	d11d      	bne.n	800ebaa <__submore+0x4c>
 800eb6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800eb72:	f7ff f92d 	bl	800ddd0 <_malloc_r>
 800eb76:	b918      	cbnz	r0, 800eb80 <__submore+0x22>
 800eb78:	f04f 30ff 	mov.w	r0, #4294967295
 800eb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eb84:	63a3      	str	r3, [r4, #56]	@ 0x38
 800eb86:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800eb8a:	6360      	str	r0, [r4, #52]	@ 0x34
 800eb8c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800eb90:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800eb94:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800eb98:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800eb9c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800eba0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800eba4:	6020      	str	r0, [r4, #0]
 800eba6:	2000      	movs	r0, #0
 800eba8:	e7e8      	b.n	800eb7c <__submore+0x1e>
 800ebaa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ebac:	0077      	lsls	r7, r6, #1
 800ebae:	463a      	mov	r2, r7
 800ebb0:	f000 f83a 	bl	800ec28 <_realloc_r>
 800ebb4:	4605      	mov	r5, r0
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	d0de      	beq.n	800eb78 <__submore+0x1a>
 800ebba:	eb00 0806 	add.w	r8, r0, r6
 800ebbe:	4601      	mov	r1, r0
 800ebc0:	4632      	mov	r2, r6
 800ebc2:	4640      	mov	r0, r8
 800ebc4:	f7ff f88a 	bl	800dcdc <memcpy>
 800ebc8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ebcc:	f8c4 8000 	str.w	r8, [r4]
 800ebd0:	e7e9      	b.n	800eba6 <__submore+0x48>

0800ebd2 <memmove>:
 800ebd2:	4288      	cmp	r0, r1
 800ebd4:	b510      	push	{r4, lr}
 800ebd6:	eb01 0402 	add.w	r4, r1, r2
 800ebda:	d902      	bls.n	800ebe2 <memmove+0x10>
 800ebdc:	4284      	cmp	r4, r0
 800ebde:	4623      	mov	r3, r4
 800ebe0:	d807      	bhi.n	800ebf2 <memmove+0x20>
 800ebe2:	1e43      	subs	r3, r0, #1
 800ebe4:	42a1      	cmp	r1, r4
 800ebe6:	d008      	beq.n	800ebfa <memmove+0x28>
 800ebe8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebf0:	e7f8      	b.n	800ebe4 <memmove+0x12>
 800ebf2:	4402      	add	r2, r0
 800ebf4:	4601      	mov	r1, r0
 800ebf6:	428a      	cmp	r2, r1
 800ebf8:	d100      	bne.n	800ebfc <memmove+0x2a>
 800ebfa:	bd10      	pop	{r4, pc}
 800ebfc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec00:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec04:	e7f7      	b.n	800ebf6 <memmove+0x24>
	...

0800ec08 <_sbrk_r>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	4d06      	ldr	r5, [pc, #24]	@ (800ec24 <_sbrk_r+0x1c>)
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	4604      	mov	r4, r0
 800ec10:	4608      	mov	r0, r1
 800ec12:	602b      	str	r3, [r5, #0]
 800ec14:	f7f7 fc00 	bl	8006418 <_sbrk>
 800ec18:	1c43      	adds	r3, r0, #1
 800ec1a:	d102      	bne.n	800ec22 <_sbrk_r+0x1a>
 800ec1c:	682b      	ldr	r3, [r5, #0]
 800ec1e:	b103      	cbz	r3, 800ec22 <_sbrk_r+0x1a>
 800ec20:	6023      	str	r3, [r4, #0]
 800ec22:	bd38      	pop	{r3, r4, r5, pc}
 800ec24:	20006aa0 	.word	0x20006aa0

0800ec28 <_realloc_r>:
 800ec28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec2c:	4607      	mov	r7, r0
 800ec2e:	4614      	mov	r4, r2
 800ec30:	460d      	mov	r5, r1
 800ec32:	b921      	cbnz	r1, 800ec3e <_realloc_r+0x16>
 800ec34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec38:	4611      	mov	r1, r2
 800ec3a:	f7ff b8c9 	b.w	800ddd0 <_malloc_r>
 800ec3e:	b92a      	cbnz	r2, 800ec4c <_realloc_r+0x24>
 800ec40:	f7ff f85a 	bl	800dcf8 <_free_r>
 800ec44:	4625      	mov	r5, r4
 800ec46:	4628      	mov	r0, r5
 800ec48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec4c:	f000 f906 	bl	800ee5c <_malloc_usable_size_r>
 800ec50:	4284      	cmp	r4, r0
 800ec52:	4606      	mov	r6, r0
 800ec54:	d802      	bhi.n	800ec5c <_realloc_r+0x34>
 800ec56:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec5a:	d8f4      	bhi.n	800ec46 <_realloc_r+0x1e>
 800ec5c:	4621      	mov	r1, r4
 800ec5e:	4638      	mov	r0, r7
 800ec60:	f7ff f8b6 	bl	800ddd0 <_malloc_r>
 800ec64:	4680      	mov	r8, r0
 800ec66:	b908      	cbnz	r0, 800ec6c <_realloc_r+0x44>
 800ec68:	4645      	mov	r5, r8
 800ec6a:	e7ec      	b.n	800ec46 <_realloc_r+0x1e>
 800ec6c:	42b4      	cmp	r4, r6
 800ec6e:	4622      	mov	r2, r4
 800ec70:	4629      	mov	r1, r5
 800ec72:	bf28      	it	cs
 800ec74:	4632      	movcs	r2, r6
 800ec76:	f7ff f831 	bl	800dcdc <memcpy>
 800ec7a:	4629      	mov	r1, r5
 800ec7c:	4638      	mov	r0, r7
 800ec7e:	f7ff f83b 	bl	800dcf8 <_free_r>
 800ec82:	e7f1      	b.n	800ec68 <_realloc_r+0x40>

0800ec84 <_strtol_l.isra.0>:
 800ec84:	2b24      	cmp	r3, #36	@ 0x24
 800ec86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec8a:	4686      	mov	lr, r0
 800ec8c:	4690      	mov	r8, r2
 800ec8e:	d801      	bhi.n	800ec94 <_strtol_l.isra.0+0x10>
 800ec90:	2b01      	cmp	r3, #1
 800ec92:	d106      	bne.n	800eca2 <_strtol_l.isra.0+0x1e>
 800ec94:	f7fe fff6 	bl	800dc84 <__errno>
 800ec98:	2316      	movs	r3, #22
 800ec9a:	6003      	str	r3, [r0, #0]
 800ec9c:	2000      	movs	r0, #0
 800ec9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca2:	4834      	ldr	r0, [pc, #208]	@ (800ed74 <_strtol_l.isra.0+0xf0>)
 800eca4:	460d      	mov	r5, r1
 800eca6:	462a      	mov	r2, r5
 800eca8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecac:	5d06      	ldrb	r6, [r0, r4]
 800ecae:	f016 0608 	ands.w	r6, r6, #8
 800ecb2:	d1f8      	bne.n	800eca6 <_strtol_l.isra.0+0x22>
 800ecb4:	2c2d      	cmp	r4, #45	@ 0x2d
 800ecb6:	d110      	bne.n	800ecda <_strtol_l.isra.0+0x56>
 800ecb8:	782c      	ldrb	r4, [r5, #0]
 800ecba:	2601      	movs	r6, #1
 800ecbc:	1c95      	adds	r5, r2, #2
 800ecbe:	f033 0210 	bics.w	r2, r3, #16
 800ecc2:	d115      	bne.n	800ecf0 <_strtol_l.isra.0+0x6c>
 800ecc4:	2c30      	cmp	r4, #48	@ 0x30
 800ecc6:	d10d      	bne.n	800ece4 <_strtol_l.isra.0+0x60>
 800ecc8:	782a      	ldrb	r2, [r5, #0]
 800ecca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ecce:	2a58      	cmp	r2, #88	@ 0x58
 800ecd0:	d108      	bne.n	800ece4 <_strtol_l.isra.0+0x60>
 800ecd2:	786c      	ldrb	r4, [r5, #1]
 800ecd4:	3502      	adds	r5, #2
 800ecd6:	2310      	movs	r3, #16
 800ecd8:	e00a      	b.n	800ecf0 <_strtol_l.isra.0+0x6c>
 800ecda:	2c2b      	cmp	r4, #43	@ 0x2b
 800ecdc:	bf04      	itt	eq
 800ecde:	782c      	ldrbeq	r4, [r5, #0]
 800ece0:	1c95      	addeq	r5, r2, #2
 800ece2:	e7ec      	b.n	800ecbe <_strtol_l.isra.0+0x3a>
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1f6      	bne.n	800ecd6 <_strtol_l.isra.0+0x52>
 800ece8:	2c30      	cmp	r4, #48	@ 0x30
 800ecea:	bf14      	ite	ne
 800ecec:	230a      	movne	r3, #10
 800ecee:	2308      	moveq	r3, #8
 800ecf0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ecf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	fbbc f9f3 	udiv	r9, ip, r3
 800ecfe:	4610      	mov	r0, r2
 800ed00:	fb03 ca19 	mls	sl, r3, r9, ip
 800ed04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ed08:	2f09      	cmp	r7, #9
 800ed0a:	d80f      	bhi.n	800ed2c <_strtol_l.isra.0+0xa8>
 800ed0c:	463c      	mov	r4, r7
 800ed0e:	42a3      	cmp	r3, r4
 800ed10:	dd1b      	ble.n	800ed4a <_strtol_l.isra.0+0xc6>
 800ed12:	1c57      	adds	r7, r2, #1
 800ed14:	d007      	beq.n	800ed26 <_strtol_l.isra.0+0xa2>
 800ed16:	4581      	cmp	r9, r0
 800ed18:	d314      	bcc.n	800ed44 <_strtol_l.isra.0+0xc0>
 800ed1a:	d101      	bne.n	800ed20 <_strtol_l.isra.0+0x9c>
 800ed1c:	45a2      	cmp	sl, r4
 800ed1e:	db11      	blt.n	800ed44 <_strtol_l.isra.0+0xc0>
 800ed20:	fb00 4003 	mla	r0, r0, r3, r4
 800ed24:	2201      	movs	r2, #1
 800ed26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed2a:	e7eb      	b.n	800ed04 <_strtol_l.isra.0+0x80>
 800ed2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ed30:	2f19      	cmp	r7, #25
 800ed32:	d801      	bhi.n	800ed38 <_strtol_l.isra.0+0xb4>
 800ed34:	3c37      	subs	r4, #55	@ 0x37
 800ed36:	e7ea      	b.n	800ed0e <_strtol_l.isra.0+0x8a>
 800ed38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ed3c:	2f19      	cmp	r7, #25
 800ed3e:	d804      	bhi.n	800ed4a <_strtol_l.isra.0+0xc6>
 800ed40:	3c57      	subs	r4, #87	@ 0x57
 800ed42:	e7e4      	b.n	800ed0e <_strtol_l.isra.0+0x8a>
 800ed44:	f04f 32ff 	mov.w	r2, #4294967295
 800ed48:	e7ed      	b.n	800ed26 <_strtol_l.isra.0+0xa2>
 800ed4a:	1c53      	adds	r3, r2, #1
 800ed4c:	d108      	bne.n	800ed60 <_strtol_l.isra.0+0xdc>
 800ed4e:	2322      	movs	r3, #34	@ 0x22
 800ed50:	f8ce 3000 	str.w	r3, [lr]
 800ed54:	4660      	mov	r0, ip
 800ed56:	f1b8 0f00 	cmp.w	r8, #0
 800ed5a:	d0a0      	beq.n	800ec9e <_strtol_l.isra.0+0x1a>
 800ed5c:	1e69      	subs	r1, r5, #1
 800ed5e:	e006      	b.n	800ed6e <_strtol_l.isra.0+0xea>
 800ed60:	b106      	cbz	r6, 800ed64 <_strtol_l.isra.0+0xe0>
 800ed62:	4240      	negs	r0, r0
 800ed64:	f1b8 0f00 	cmp.w	r8, #0
 800ed68:	d099      	beq.n	800ec9e <_strtol_l.isra.0+0x1a>
 800ed6a:	2a00      	cmp	r2, #0
 800ed6c:	d1f6      	bne.n	800ed5c <_strtol_l.isra.0+0xd8>
 800ed6e:	f8c8 1000 	str.w	r1, [r8]
 800ed72:	e794      	b.n	800ec9e <_strtol_l.isra.0+0x1a>
 800ed74:	0804aa5f 	.word	0x0804aa5f

0800ed78 <_strtol_r>:
 800ed78:	f7ff bf84 	b.w	800ec84 <_strtol_l.isra.0>

0800ed7c <_strtoul_l.isra.0>:
 800ed7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed80:	4e34      	ldr	r6, [pc, #208]	@ (800ee54 <_strtoul_l.isra.0+0xd8>)
 800ed82:	4686      	mov	lr, r0
 800ed84:	460d      	mov	r5, r1
 800ed86:	4628      	mov	r0, r5
 800ed88:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed8c:	5d37      	ldrb	r7, [r6, r4]
 800ed8e:	f017 0708 	ands.w	r7, r7, #8
 800ed92:	d1f8      	bne.n	800ed86 <_strtoul_l.isra.0+0xa>
 800ed94:	2c2d      	cmp	r4, #45	@ 0x2d
 800ed96:	d110      	bne.n	800edba <_strtoul_l.isra.0+0x3e>
 800ed98:	782c      	ldrb	r4, [r5, #0]
 800ed9a:	2701      	movs	r7, #1
 800ed9c:	1c85      	adds	r5, r0, #2
 800ed9e:	f033 0010 	bics.w	r0, r3, #16
 800eda2:	d115      	bne.n	800edd0 <_strtoul_l.isra.0+0x54>
 800eda4:	2c30      	cmp	r4, #48	@ 0x30
 800eda6:	d10d      	bne.n	800edc4 <_strtoul_l.isra.0+0x48>
 800eda8:	7828      	ldrb	r0, [r5, #0]
 800edaa:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800edae:	2858      	cmp	r0, #88	@ 0x58
 800edb0:	d108      	bne.n	800edc4 <_strtoul_l.isra.0+0x48>
 800edb2:	786c      	ldrb	r4, [r5, #1]
 800edb4:	3502      	adds	r5, #2
 800edb6:	2310      	movs	r3, #16
 800edb8:	e00a      	b.n	800edd0 <_strtoul_l.isra.0+0x54>
 800edba:	2c2b      	cmp	r4, #43	@ 0x2b
 800edbc:	bf04      	itt	eq
 800edbe:	782c      	ldrbeq	r4, [r5, #0]
 800edc0:	1c85      	addeq	r5, r0, #2
 800edc2:	e7ec      	b.n	800ed9e <_strtoul_l.isra.0+0x22>
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d1f6      	bne.n	800edb6 <_strtoul_l.isra.0+0x3a>
 800edc8:	2c30      	cmp	r4, #48	@ 0x30
 800edca:	bf14      	ite	ne
 800edcc:	230a      	movne	r3, #10
 800edce:	2308      	moveq	r3, #8
 800edd0:	f04f 38ff 	mov.w	r8, #4294967295
 800edd4:	2600      	movs	r6, #0
 800edd6:	fbb8 f8f3 	udiv	r8, r8, r3
 800edda:	fb03 f908 	mul.w	r9, r3, r8
 800edde:	ea6f 0909 	mvn.w	r9, r9
 800ede2:	4630      	mov	r0, r6
 800ede4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ede8:	f1bc 0f09 	cmp.w	ip, #9
 800edec:	d810      	bhi.n	800ee10 <_strtoul_l.isra.0+0x94>
 800edee:	4664      	mov	r4, ip
 800edf0:	42a3      	cmp	r3, r4
 800edf2:	dd1e      	ble.n	800ee32 <_strtoul_l.isra.0+0xb6>
 800edf4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800edf8:	d007      	beq.n	800ee0a <_strtoul_l.isra.0+0x8e>
 800edfa:	4580      	cmp	r8, r0
 800edfc:	d316      	bcc.n	800ee2c <_strtoul_l.isra.0+0xb0>
 800edfe:	d101      	bne.n	800ee04 <_strtoul_l.isra.0+0x88>
 800ee00:	45a1      	cmp	r9, r4
 800ee02:	db13      	blt.n	800ee2c <_strtoul_l.isra.0+0xb0>
 800ee04:	fb00 4003 	mla	r0, r0, r3, r4
 800ee08:	2601      	movs	r6, #1
 800ee0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee0e:	e7e9      	b.n	800ede4 <_strtoul_l.isra.0+0x68>
 800ee10:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ee14:	f1bc 0f19 	cmp.w	ip, #25
 800ee18:	d801      	bhi.n	800ee1e <_strtoul_l.isra.0+0xa2>
 800ee1a:	3c37      	subs	r4, #55	@ 0x37
 800ee1c:	e7e8      	b.n	800edf0 <_strtoul_l.isra.0+0x74>
 800ee1e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ee22:	f1bc 0f19 	cmp.w	ip, #25
 800ee26:	d804      	bhi.n	800ee32 <_strtoul_l.isra.0+0xb6>
 800ee28:	3c57      	subs	r4, #87	@ 0x57
 800ee2a:	e7e1      	b.n	800edf0 <_strtoul_l.isra.0+0x74>
 800ee2c:	f04f 36ff 	mov.w	r6, #4294967295
 800ee30:	e7eb      	b.n	800ee0a <_strtoul_l.isra.0+0x8e>
 800ee32:	1c73      	adds	r3, r6, #1
 800ee34:	d106      	bne.n	800ee44 <_strtoul_l.isra.0+0xc8>
 800ee36:	2322      	movs	r3, #34	@ 0x22
 800ee38:	f8ce 3000 	str.w	r3, [lr]
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	b932      	cbnz	r2, 800ee4e <_strtoul_l.isra.0+0xd2>
 800ee40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee44:	b107      	cbz	r7, 800ee48 <_strtoul_l.isra.0+0xcc>
 800ee46:	4240      	negs	r0, r0
 800ee48:	2a00      	cmp	r2, #0
 800ee4a:	d0f9      	beq.n	800ee40 <_strtoul_l.isra.0+0xc4>
 800ee4c:	b106      	cbz	r6, 800ee50 <_strtoul_l.isra.0+0xd4>
 800ee4e:	1e69      	subs	r1, r5, #1
 800ee50:	6011      	str	r1, [r2, #0]
 800ee52:	e7f5      	b.n	800ee40 <_strtoul_l.isra.0+0xc4>
 800ee54:	0804aa5f 	.word	0x0804aa5f

0800ee58 <_strtoul_r>:
 800ee58:	f7ff bf90 	b.w	800ed7c <_strtoul_l.isra.0>

0800ee5c <_malloc_usable_size_r>:
 800ee5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee60:	1f18      	subs	r0, r3, #4
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	bfbc      	itt	lt
 800ee66:	580b      	ldrlt	r3, [r1, r0]
 800ee68:	18c0      	addlt	r0, r0, r3
 800ee6a:	4770      	bx	lr

0800ee6c <powf>:
 800ee6c:	b508      	push	{r3, lr}
 800ee6e:	ed2d 8b04 	vpush	{d8-d9}
 800ee72:	eeb0 8a60 	vmov.f32	s16, s1
 800ee76:	eeb0 9a40 	vmov.f32	s18, s0
 800ee7a:	f000 f859 	bl	800ef30 <__ieee754_powf>
 800ee7e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ee82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee86:	eef0 8a40 	vmov.f32	s17, s0
 800ee8a:	d63e      	bvs.n	800ef0a <powf+0x9e>
 800ee8c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ee90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee94:	d112      	bne.n	800eebc <powf+0x50>
 800ee96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ee9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee9e:	d039      	beq.n	800ef14 <powf+0xa8>
 800eea0:	eeb0 0a48 	vmov.f32	s0, s16
 800eea4:	f000 f839 	bl	800ef1a <finitef>
 800eea8:	b378      	cbz	r0, 800ef0a <powf+0x9e>
 800eeaa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800eeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeb2:	d52a      	bpl.n	800ef0a <powf+0x9e>
 800eeb4:	f7fe fee6 	bl	800dc84 <__errno>
 800eeb8:	2322      	movs	r3, #34	@ 0x22
 800eeba:	e014      	b.n	800eee6 <powf+0x7a>
 800eebc:	f000 f82d 	bl	800ef1a <finitef>
 800eec0:	b998      	cbnz	r0, 800eeea <powf+0x7e>
 800eec2:	eeb0 0a49 	vmov.f32	s0, s18
 800eec6:	f000 f828 	bl	800ef1a <finitef>
 800eeca:	b170      	cbz	r0, 800eeea <powf+0x7e>
 800eecc:	eeb0 0a48 	vmov.f32	s0, s16
 800eed0:	f000 f823 	bl	800ef1a <finitef>
 800eed4:	b148      	cbz	r0, 800eeea <powf+0x7e>
 800eed6:	eef4 8a68 	vcmp.f32	s17, s17
 800eeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eede:	d7e9      	bvc.n	800eeb4 <powf+0x48>
 800eee0:	f7fe fed0 	bl	800dc84 <__errno>
 800eee4:	2321      	movs	r3, #33	@ 0x21
 800eee6:	6003      	str	r3, [r0, #0]
 800eee8:	e00f      	b.n	800ef0a <powf+0x9e>
 800eeea:	eef5 8a40 	vcmp.f32	s17, #0.0
 800eeee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef2:	d10a      	bne.n	800ef0a <powf+0x9e>
 800eef4:	eeb0 0a49 	vmov.f32	s0, s18
 800eef8:	f000 f80f 	bl	800ef1a <finitef>
 800eefc:	b128      	cbz	r0, 800ef0a <powf+0x9e>
 800eefe:	eeb0 0a48 	vmov.f32	s0, s16
 800ef02:	f000 f80a 	bl	800ef1a <finitef>
 800ef06:	2800      	cmp	r0, #0
 800ef08:	d1d4      	bne.n	800eeb4 <powf+0x48>
 800ef0a:	eeb0 0a68 	vmov.f32	s0, s17
 800ef0e:	ecbd 8b04 	vpop	{d8-d9}
 800ef12:	bd08      	pop	{r3, pc}
 800ef14:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ef18:	e7f7      	b.n	800ef0a <powf+0x9e>

0800ef1a <finitef>:
 800ef1a:	ee10 3a10 	vmov	r3, s0
 800ef1e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ef22:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ef26:	bfac      	ite	ge
 800ef28:	2000      	movge	r0, #0
 800ef2a:	2001      	movlt	r0, #1
 800ef2c:	4770      	bx	lr
	...

0800ef30 <__ieee754_powf>:
 800ef30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef34:	ee10 4a90 	vmov	r4, s1
 800ef38:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800ef3c:	ed2d 8b02 	vpush	{d8}
 800ef40:	ee10 6a10 	vmov	r6, s0
 800ef44:	eeb0 8a40 	vmov.f32	s16, s0
 800ef48:	eef0 8a60 	vmov.f32	s17, s1
 800ef4c:	d10c      	bne.n	800ef68 <__ieee754_powf+0x38>
 800ef4e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800ef52:	0076      	lsls	r6, r6, #1
 800ef54:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ef58:	f240 8274 	bls.w	800f444 <__ieee754_powf+0x514>
 800ef5c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ef60:	ecbd 8b02 	vpop	{d8}
 800ef64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef68:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ef6c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ef70:	d802      	bhi.n	800ef78 <__ieee754_powf+0x48>
 800ef72:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ef76:	d908      	bls.n	800ef8a <__ieee754_powf+0x5a>
 800ef78:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ef7c:	d1ee      	bne.n	800ef5c <__ieee754_powf+0x2c>
 800ef7e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ef82:	0064      	lsls	r4, r4, #1
 800ef84:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ef88:	e7e6      	b.n	800ef58 <__ieee754_powf+0x28>
 800ef8a:	2e00      	cmp	r6, #0
 800ef8c:	da1f      	bge.n	800efce <__ieee754_powf+0x9e>
 800ef8e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ef92:	f080 8260 	bcs.w	800f456 <__ieee754_powf+0x526>
 800ef96:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800ef9a:	d32f      	bcc.n	800effc <__ieee754_powf+0xcc>
 800ef9c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800efa0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800efa4:	fa49 f503 	asr.w	r5, r9, r3
 800efa8:	fa05 f303 	lsl.w	r3, r5, r3
 800efac:	454b      	cmp	r3, r9
 800efae:	d123      	bne.n	800eff8 <__ieee754_powf+0xc8>
 800efb0:	f005 0501 	and.w	r5, r5, #1
 800efb4:	f1c5 0502 	rsb	r5, r5, #2
 800efb8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800efbc:	d11f      	bne.n	800effe <__ieee754_powf+0xce>
 800efbe:	2c00      	cmp	r4, #0
 800efc0:	f280 8246 	bge.w	800f450 <__ieee754_powf+0x520>
 800efc4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800efc8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800efcc:	e7c8      	b.n	800ef60 <__ieee754_powf+0x30>
 800efce:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800efd2:	d111      	bne.n	800eff8 <__ieee754_powf+0xc8>
 800efd4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800efd8:	f000 8234 	beq.w	800f444 <__ieee754_powf+0x514>
 800efdc:	d906      	bls.n	800efec <__ieee754_powf+0xbc>
 800efde:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800f2f4 <__ieee754_powf+0x3c4>
 800efe2:	2c00      	cmp	r4, #0
 800efe4:	bfa8      	it	ge
 800efe6:	eeb0 0a68 	vmovge.f32	s0, s17
 800efea:	e7b9      	b.n	800ef60 <__ieee754_powf+0x30>
 800efec:	2c00      	cmp	r4, #0
 800efee:	f280 822c 	bge.w	800f44a <__ieee754_powf+0x51a>
 800eff2:	eeb1 0a68 	vneg.f32	s0, s17
 800eff6:	e7b3      	b.n	800ef60 <__ieee754_powf+0x30>
 800eff8:	2500      	movs	r5, #0
 800effa:	e7dd      	b.n	800efb8 <__ieee754_powf+0x88>
 800effc:	2500      	movs	r5, #0
 800effe:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f002:	d102      	bne.n	800f00a <__ieee754_powf+0xda>
 800f004:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f008:	e7aa      	b.n	800ef60 <__ieee754_powf+0x30>
 800f00a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f00e:	f040 8227 	bne.w	800f460 <__ieee754_powf+0x530>
 800f012:	2e00      	cmp	r6, #0
 800f014:	f2c0 8224 	blt.w	800f460 <__ieee754_powf+0x530>
 800f018:	eeb0 0a48 	vmov.f32	s0, s16
 800f01c:	ecbd 8b02 	vpop	{d8}
 800f020:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f024:	f000 bae6 	b.w	800f5f4 <__ieee754_sqrtf>
 800f028:	2d01      	cmp	r5, #1
 800f02a:	d199      	bne.n	800ef60 <__ieee754_powf+0x30>
 800f02c:	eeb1 0a40 	vneg.f32	s0, s0
 800f030:	e796      	b.n	800ef60 <__ieee754_powf+0x30>
 800f032:	0ff0      	lsrs	r0, r6, #31
 800f034:	3801      	subs	r0, #1
 800f036:	ea55 0300 	orrs.w	r3, r5, r0
 800f03a:	d104      	bne.n	800f046 <__ieee754_powf+0x116>
 800f03c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f040:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f044:	e78c      	b.n	800ef60 <__ieee754_powf+0x30>
 800f046:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f04a:	d96d      	bls.n	800f128 <__ieee754_powf+0x1f8>
 800f04c:	4baa      	ldr	r3, [pc, #680]	@ (800f2f8 <__ieee754_powf+0x3c8>)
 800f04e:	4598      	cmp	r8, r3
 800f050:	d808      	bhi.n	800f064 <__ieee754_powf+0x134>
 800f052:	2c00      	cmp	r4, #0
 800f054:	da0b      	bge.n	800f06e <__ieee754_powf+0x13e>
 800f056:	2000      	movs	r0, #0
 800f058:	ecbd 8b02 	vpop	{d8}
 800f05c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f060:	f000 bac2 	b.w	800f5e8 <__math_oflowf>
 800f064:	4ba5      	ldr	r3, [pc, #660]	@ (800f2fc <__ieee754_powf+0x3cc>)
 800f066:	4598      	cmp	r8, r3
 800f068:	d908      	bls.n	800f07c <__ieee754_powf+0x14c>
 800f06a:	2c00      	cmp	r4, #0
 800f06c:	dcf3      	bgt.n	800f056 <__ieee754_powf+0x126>
 800f06e:	2000      	movs	r0, #0
 800f070:	ecbd 8b02 	vpop	{d8}
 800f074:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f078:	f000 bab0 	b.w	800f5dc <__math_uflowf>
 800f07c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f080:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f084:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800f300 <__ieee754_powf+0x3d0>
 800f088:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f08c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f090:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f094:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f098:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f09c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800f304 <__ieee754_powf+0x3d4>
 800f0a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0a4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800f308 <__ieee754_powf+0x3d8>
 800f0a8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f0ac:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800f30c <__ieee754_powf+0x3dc>
 800f0b0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f0b4:	eeb0 7a67 	vmov.f32	s14, s15
 800f0b8:	eea0 7a26 	vfma.f32	s14, s0, s13
 800f0bc:	ee17 3a10 	vmov	r3, s14
 800f0c0:	f36f 030b 	bfc	r3, #0, #12
 800f0c4:	ee07 3a10 	vmov	s14, r3
 800f0c8:	eeb0 6a47 	vmov.f32	s12, s14
 800f0cc:	eea0 6a66 	vfms.f32	s12, s0, s13
 800f0d0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f0d4:	3d01      	subs	r5, #1
 800f0d6:	4305      	orrs	r5, r0
 800f0d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f0dc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f0e0:	f36f 040b 	bfc	r4, #0, #12
 800f0e4:	bf18      	it	ne
 800f0e6:	eeb0 8a66 	vmovne.f32	s16, s13
 800f0ea:	ee06 4a90 	vmov	s13, r4
 800f0ee:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f0f2:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800f0f6:	ee67 7a26 	vmul.f32	s15, s14, s13
 800f0fa:	eee6 0a07 	vfma.f32	s1, s12, s14
 800f0fe:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f102:	ee17 1a10 	vmov	r1, s14
 800f106:	2900      	cmp	r1, #0
 800f108:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f10c:	f340 80dd 	ble.w	800f2ca <__ieee754_powf+0x39a>
 800f110:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f114:	f240 80ca 	bls.w	800f2ac <__ieee754_powf+0x37c>
 800f118:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f120:	bf4c      	ite	mi
 800f122:	2001      	movmi	r0, #1
 800f124:	2000      	movpl	r0, #0
 800f126:	e797      	b.n	800f058 <__ieee754_powf+0x128>
 800f128:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f12c:	bf01      	itttt	eq
 800f12e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f310 <__ieee754_powf+0x3e0>
 800f132:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f136:	f06f 0317 	mvneq.w	r3, #23
 800f13a:	ee17 7a90 	vmoveq	r7, s15
 800f13e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f142:	bf18      	it	ne
 800f144:	2300      	movne	r3, #0
 800f146:	3a7f      	subs	r2, #127	@ 0x7f
 800f148:	441a      	add	r2, r3
 800f14a:	4b72      	ldr	r3, [pc, #456]	@ (800f314 <__ieee754_powf+0x3e4>)
 800f14c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f150:	429f      	cmp	r7, r3
 800f152:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f156:	dd06      	ble.n	800f166 <__ieee754_powf+0x236>
 800f158:	4b6f      	ldr	r3, [pc, #444]	@ (800f318 <__ieee754_powf+0x3e8>)
 800f15a:	429f      	cmp	r7, r3
 800f15c:	f340 80a4 	ble.w	800f2a8 <__ieee754_powf+0x378>
 800f160:	3201      	adds	r2, #1
 800f162:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f166:	2600      	movs	r6, #0
 800f168:	4b6c      	ldr	r3, [pc, #432]	@ (800f31c <__ieee754_powf+0x3ec>)
 800f16a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f16e:	ee07 1a10 	vmov	s14, r1
 800f172:	edd3 5a00 	vldr	s11, [r3]
 800f176:	4b6a      	ldr	r3, [pc, #424]	@ (800f320 <__ieee754_powf+0x3f0>)
 800f178:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f17c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f180:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f184:	1049      	asrs	r1, r1, #1
 800f186:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f18a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f18e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f192:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f196:	ee07 1a90 	vmov	s15, r1
 800f19a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f19e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f1a2:	ee15 7a10 	vmov	r7, s10
 800f1a6:	401f      	ands	r7, r3
 800f1a8:	ee06 7a90 	vmov	s13, r7
 800f1ac:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f1b0:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f1b4:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f1b8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f1bc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f324 <__ieee754_powf+0x3f4>
 800f1c0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f328 <__ieee754_powf+0x3f8>
 800f1c4:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f1c8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f32c <__ieee754_powf+0x3fc>
 800f1cc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f1d0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f300 <__ieee754_powf+0x3d0>
 800f1d4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f1d8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f330 <__ieee754_powf+0x400>
 800f1dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f1e0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f334 <__ieee754_powf+0x404>
 800f1e4:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f1e8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f1ec:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f1f0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f1f4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f1f8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f1fc:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f200:	eef0 5a67 	vmov.f32	s11, s15
 800f204:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f208:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f20c:	ee15 1a90 	vmov	r1, s11
 800f210:	4019      	ands	r1, r3
 800f212:	ee05 1a90 	vmov	s11, r1
 800f216:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f21a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f21e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f222:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f226:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f22a:	eeb0 6a67 	vmov.f32	s12, s15
 800f22e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f232:	ee16 1a10 	vmov	r1, s12
 800f236:	4019      	ands	r1, r3
 800f238:	ee06 1a10 	vmov	s12, r1
 800f23c:	eeb0 7a46 	vmov.f32	s14, s12
 800f240:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f244:	493c      	ldr	r1, [pc, #240]	@ (800f338 <__ieee754_powf+0x408>)
 800f246:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f24a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f24e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f33c <__ieee754_powf+0x40c>
 800f252:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f340 <__ieee754_powf+0x410>
 800f256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f25a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f344 <__ieee754_powf+0x414>
 800f25e:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f262:	ed91 7a00 	vldr	s14, [r1]
 800f266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f26a:	ee07 2a10 	vmov	s14, r2
 800f26e:	4a36      	ldr	r2, [pc, #216]	@ (800f348 <__ieee754_powf+0x418>)
 800f270:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800f274:	eeb0 7a67 	vmov.f32	s14, s15
 800f278:	eea6 7a25 	vfma.f32	s14, s12, s11
 800f27c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f280:	ed92 5a00 	vldr	s10, [r2]
 800f284:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f288:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f28c:	ee17 2a10 	vmov	r2, s14
 800f290:	401a      	ands	r2, r3
 800f292:	ee07 2a10 	vmov	s14, r2
 800f296:	ee77 6a66 	vsub.f32	s13, s14, s13
 800f29a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f29e:	eee6 6a65 	vfms.f32	s13, s12, s11
 800f2a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f2a6:	e715      	b.n	800f0d4 <__ieee754_powf+0x1a4>
 800f2a8:	2601      	movs	r6, #1
 800f2aa:	e75d      	b.n	800f168 <__ieee754_powf+0x238>
 800f2ac:	d152      	bne.n	800f354 <__ieee754_powf+0x424>
 800f2ae:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f34c <__ieee754_powf+0x41c>
 800f2b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f2b6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f2ba:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2c2:	f73f af29 	bgt.w	800f118 <__ieee754_powf+0x1e8>
 800f2c6:	2386      	movs	r3, #134	@ 0x86
 800f2c8:	e048      	b.n	800f35c <__ieee754_powf+0x42c>
 800f2ca:	4a21      	ldr	r2, [pc, #132]	@ (800f350 <__ieee754_powf+0x420>)
 800f2cc:	4293      	cmp	r3, r2
 800f2ce:	d907      	bls.n	800f2e0 <__ieee754_powf+0x3b0>
 800f2d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2d8:	bf4c      	ite	mi
 800f2da:	2001      	movmi	r0, #1
 800f2dc:	2000      	movpl	r0, #0
 800f2de:	e6c7      	b.n	800f070 <__ieee754_powf+0x140>
 800f2e0:	d138      	bne.n	800f354 <__ieee754_powf+0x424>
 800f2e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f2e6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f2ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f2ee:	dbea      	blt.n	800f2c6 <__ieee754_powf+0x396>
 800f2f0:	e7ee      	b.n	800f2d0 <__ieee754_powf+0x3a0>
 800f2f2:	bf00      	nop
 800f2f4:	00000000 	.word	0x00000000
 800f2f8:	3f7ffff3 	.word	0x3f7ffff3
 800f2fc:	3f800007 	.word	0x3f800007
 800f300:	3eaaaaab 	.word	0x3eaaaaab
 800f304:	3fb8aa00 	.word	0x3fb8aa00
 800f308:	3fb8aa3b 	.word	0x3fb8aa3b
 800f30c:	36eca570 	.word	0x36eca570
 800f310:	4b800000 	.word	0x4b800000
 800f314:	001cc471 	.word	0x001cc471
 800f318:	005db3d6 	.word	0x005db3d6
 800f31c:	0804ab70 	.word	0x0804ab70
 800f320:	fffff000 	.word	0xfffff000
 800f324:	3e6c3255 	.word	0x3e6c3255
 800f328:	3e53f142 	.word	0x3e53f142
 800f32c:	3e8ba305 	.word	0x3e8ba305
 800f330:	3edb6db7 	.word	0x3edb6db7
 800f334:	3f19999a 	.word	0x3f19999a
 800f338:	0804ab60 	.word	0x0804ab60
 800f33c:	3f76384f 	.word	0x3f76384f
 800f340:	3f763800 	.word	0x3f763800
 800f344:	369dc3a0 	.word	0x369dc3a0
 800f348:	0804ab68 	.word	0x0804ab68
 800f34c:	3338aa3c 	.word	0x3338aa3c
 800f350:	43160000 	.word	0x43160000
 800f354:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f358:	d96f      	bls.n	800f43a <__ieee754_powf+0x50a>
 800f35a:	15db      	asrs	r3, r3, #23
 800f35c:	3b7e      	subs	r3, #126	@ 0x7e
 800f35e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f362:	4118      	asrs	r0, r3
 800f364:	4408      	add	r0, r1
 800f366:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f36a:	4a4e      	ldr	r2, [pc, #312]	@ (800f4a4 <__ieee754_powf+0x574>)
 800f36c:	3b7f      	subs	r3, #127	@ 0x7f
 800f36e:	411a      	asrs	r2, r3
 800f370:	4002      	ands	r2, r0
 800f372:	ee07 2a10 	vmov	s14, r2
 800f376:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f37a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f37e:	f1c3 0317 	rsb	r3, r3, #23
 800f382:	4118      	asrs	r0, r3
 800f384:	2900      	cmp	r1, #0
 800f386:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f38a:	bfb8      	it	lt
 800f38c:	4240      	neglt	r0, r0
 800f38e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800f392:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800f4a8 <__ieee754_powf+0x578>
 800f396:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800f4ac <__ieee754_powf+0x57c>
 800f39a:	ee16 3a90 	vmov	r3, s13
 800f39e:	f36f 030b 	bfc	r3, #0, #12
 800f3a2:	ee06 3a90 	vmov	s13, r3
 800f3a6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f3aa:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f3ae:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f3b2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800f4b0 <__ieee754_powf+0x580>
 800f3b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f3ba:	eee0 7a87 	vfma.f32	s15, s1, s14
 800f3be:	eeb0 7a67 	vmov.f32	s14, s15
 800f3c2:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f3c6:	eef0 5a47 	vmov.f32	s11, s14
 800f3ca:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800f3ce:	ee67 6a07 	vmul.f32	s13, s14, s14
 800f3d2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f3d6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800f4b4 <__ieee754_powf+0x584>
 800f3da:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800f4b8 <__ieee754_powf+0x588>
 800f3de:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f3e2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800f4bc <__ieee754_powf+0x58c>
 800f3e6:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f3ea:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800f4c0 <__ieee754_powf+0x590>
 800f3ee:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800f3f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f4c4 <__ieee754_powf+0x594>
 800f3f6:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f3fa:	eeb0 6a47 	vmov.f32	s12, s14
 800f3fe:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800f402:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f406:	ee67 5a06 	vmul.f32	s11, s14, s12
 800f40a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800f40e:	eee7 7a27 	vfma.f32	s15, s14, s15
 800f412:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f416:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f41a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f41e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f422:	ee10 3a10 	vmov	r3, s0
 800f426:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f42a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f42e:	da06      	bge.n	800f43e <__ieee754_powf+0x50e>
 800f430:	f000 f854 	bl	800f4dc <scalbnf>
 800f434:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f438:	e592      	b.n	800ef60 <__ieee754_powf+0x30>
 800f43a:	2000      	movs	r0, #0
 800f43c:	e7a7      	b.n	800f38e <__ieee754_powf+0x45e>
 800f43e:	ee00 3a10 	vmov	s0, r3
 800f442:	e7f7      	b.n	800f434 <__ieee754_powf+0x504>
 800f444:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f448:	e58a      	b.n	800ef60 <__ieee754_powf+0x30>
 800f44a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800f4c8 <__ieee754_powf+0x598>
 800f44e:	e587      	b.n	800ef60 <__ieee754_powf+0x30>
 800f450:	eeb0 0a48 	vmov.f32	s0, s16
 800f454:	e584      	b.n	800ef60 <__ieee754_powf+0x30>
 800f456:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f45a:	f43f adbb 	beq.w	800efd4 <__ieee754_powf+0xa4>
 800f45e:	2502      	movs	r5, #2
 800f460:	eeb0 0a48 	vmov.f32	s0, s16
 800f464:	f000 f832 	bl	800f4cc <fabsf>
 800f468:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f46c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f470:	4647      	mov	r7, r8
 800f472:	d003      	beq.n	800f47c <__ieee754_powf+0x54c>
 800f474:	f1b8 0f00 	cmp.w	r8, #0
 800f478:	f47f addb 	bne.w	800f032 <__ieee754_powf+0x102>
 800f47c:	2c00      	cmp	r4, #0
 800f47e:	bfbc      	itt	lt
 800f480:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f484:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f488:	2e00      	cmp	r6, #0
 800f48a:	f6bf ad69 	bge.w	800ef60 <__ieee754_powf+0x30>
 800f48e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f492:	ea58 0805 	orrs.w	r8, r8, r5
 800f496:	f47f adc7 	bne.w	800f028 <__ieee754_powf+0xf8>
 800f49a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f49e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f4a2:	e55d      	b.n	800ef60 <__ieee754_powf+0x30>
 800f4a4:	ff800000 	.word	0xff800000
 800f4a8:	3f317218 	.word	0x3f317218
 800f4ac:	3f317200 	.word	0x3f317200
 800f4b0:	35bfbe8c 	.word	0x35bfbe8c
 800f4b4:	b5ddea0e 	.word	0xb5ddea0e
 800f4b8:	3331bb4c 	.word	0x3331bb4c
 800f4bc:	388ab355 	.word	0x388ab355
 800f4c0:	bb360b61 	.word	0xbb360b61
 800f4c4:	3e2aaaab 	.word	0x3e2aaaab
 800f4c8:	00000000 	.word	0x00000000

0800f4cc <fabsf>:
 800f4cc:	ee10 3a10 	vmov	r3, s0
 800f4d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f4d4:	ee00 3a10 	vmov	s0, r3
 800f4d8:	4770      	bx	lr
	...

0800f4dc <scalbnf>:
 800f4dc:	ee10 3a10 	vmov	r3, s0
 800f4e0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f4e4:	d02b      	beq.n	800f53e <scalbnf+0x62>
 800f4e6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f4ea:	d302      	bcc.n	800f4f2 <scalbnf+0x16>
 800f4ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f4f0:	4770      	bx	lr
 800f4f2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f4f6:	d123      	bne.n	800f540 <scalbnf+0x64>
 800f4f8:	4b24      	ldr	r3, [pc, #144]	@ (800f58c <scalbnf+0xb0>)
 800f4fa:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f590 <scalbnf+0xb4>
 800f4fe:	4298      	cmp	r0, r3
 800f500:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f504:	db17      	blt.n	800f536 <scalbnf+0x5a>
 800f506:	ee10 3a10 	vmov	r3, s0
 800f50a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f50e:	3a19      	subs	r2, #25
 800f510:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f514:	4288      	cmp	r0, r1
 800f516:	dd15      	ble.n	800f544 <scalbnf+0x68>
 800f518:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f594 <scalbnf+0xb8>
 800f51c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f598 <scalbnf+0xbc>
 800f520:	ee10 3a10 	vmov	r3, s0
 800f524:	eeb0 7a67 	vmov.f32	s14, s15
 800f528:	2b00      	cmp	r3, #0
 800f52a:	bfb8      	it	lt
 800f52c:	eef0 7a66 	vmovlt.f32	s15, s13
 800f530:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f534:	4770      	bx	lr
 800f536:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f59c <scalbnf+0xc0>
 800f53a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f53e:	4770      	bx	lr
 800f540:	0dd2      	lsrs	r2, r2, #23
 800f542:	e7e5      	b.n	800f510 <scalbnf+0x34>
 800f544:	4410      	add	r0, r2
 800f546:	28fe      	cmp	r0, #254	@ 0xfe
 800f548:	dce6      	bgt.n	800f518 <scalbnf+0x3c>
 800f54a:	2800      	cmp	r0, #0
 800f54c:	dd06      	ble.n	800f55c <scalbnf+0x80>
 800f54e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f552:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f556:	ee00 3a10 	vmov	s0, r3
 800f55a:	4770      	bx	lr
 800f55c:	f110 0f16 	cmn.w	r0, #22
 800f560:	da09      	bge.n	800f576 <scalbnf+0x9a>
 800f562:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f59c <scalbnf+0xc0>
 800f566:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f5a0 <scalbnf+0xc4>
 800f56a:	ee10 3a10 	vmov	r3, s0
 800f56e:	eeb0 7a67 	vmov.f32	s14, s15
 800f572:	2b00      	cmp	r3, #0
 800f574:	e7d9      	b.n	800f52a <scalbnf+0x4e>
 800f576:	3019      	adds	r0, #25
 800f578:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f57c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f580:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f5a4 <scalbnf+0xc8>
 800f584:	ee07 3a90 	vmov	s15, r3
 800f588:	e7d7      	b.n	800f53a <scalbnf+0x5e>
 800f58a:	bf00      	nop
 800f58c:	ffff3cb0 	.word	0xffff3cb0
 800f590:	4c000000 	.word	0x4c000000
 800f594:	7149f2ca 	.word	0x7149f2ca
 800f598:	f149f2ca 	.word	0xf149f2ca
 800f59c:	0da24260 	.word	0x0da24260
 800f5a0:	8da24260 	.word	0x8da24260
 800f5a4:	33000000 	.word	0x33000000

0800f5a8 <with_errnof>:
 800f5a8:	b510      	push	{r4, lr}
 800f5aa:	ed2d 8b02 	vpush	{d8}
 800f5ae:	eeb0 8a40 	vmov.f32	s16, s0
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	f7fe fb66 	bl	800dc84 <__errno>
 800f5b8:	eeb0 0a48 	vmov.f32	s0, s16
 800f5bc:	ecbd 8b02 	vpop	{d8}
 800f5c0:	6004      	str	r4, [r0, #0]
 800f5c2:	bd10      	pop	{r4, pc}

0800f5c4 <xflowf>:
 800f5c4:	b130      	cbz	r0, 800f5d4 <xflowf+0x10>
 800f5c6:	eef1 7a40 	vneg.f32	s15, s0
 800f5ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f5ce:	2022      	movs	r0, #34	@ 0x22
 800f5d0:	f7ff bfea 	b.w	800f5a8 <with_errnof>
 800f5d4:	eef0 7a40 	vmov.f32	s15, s0
 800f5d8:	e7f7      	b.n	800f5ca <xflowf+0x6>
	...

0800f5dc <__math_uflowf>:
 800f5dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f5e4 <__math_uflowf+0x8>
 800f5e0:	f7ff bff0 	b.w	800f5c4 <xflowf>
 800f5e4:	10000000 	.word	0x10000000

0800f5e8 <__math_oflowf>:
 800f5e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f5f0 <__math_oflowf+0x8>
 800f5ec:	f7ff bfea 	b.w	800f5c4 <xflowf>
 800f5f0:	70000000 	.word	0x70000000

0800f5f4 <__ieee754_sqrtf>:
 800f5f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f5f8:	4770      	bx	lr
	...

0800f5fc <_init>:
 800f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fe:	bf00      	nop
 800f600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f602:	bc08      	pop	{r3}
 800f604:	469e      	mov	lr, r3
 800f606:	4770      	bx	lr

0800f608 <_fini>:
 800f608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f60a:	bf00      	nop
 800f60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60e:	bc08      	pop	{r3}
 800f610:	469e      	mov	lr, r3
 800f612:	4770      	bx	lr
